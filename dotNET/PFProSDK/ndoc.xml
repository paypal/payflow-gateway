<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Payflow_dotNET</name>
    </assembly>
    <members>
        <member name="T:PayPal.Payments.Common.Context">
            -----------------------------------------------------------------------------
            <summary>
            This class contains the all error message generated for the class containing 
            the context.This also contains the highest severity level contained by the 
            context
            </summary>
            <remarks>
                
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:PayPal.Payments.Common.Context.mErrorObjects">
            <summary>
            Holds the collection of error objects for the context instance.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Context.mHighestErrorLvl">
            <summary>
            Indicates the highest severity level error in the array list.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Context.mLoadLoggerErrs">
            <summary>
            Indicates if the Error messages due to Logger class needs to be added to the context.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Context.#ctor">
            <summary>
            Constructor for Context
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.Context.HighestErrorLvl">
            <summary>
            Indicates the highest severity level error in the array list.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.Context.LoadLoggerErrs">
            <summary>
            Indicates if the Error messages due to Logger class needs to be added to the context.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Context.AddError(PayPal.Payments.Common.ErrorObject)">
            -----------------------------------------------------------------------------
            <summary>
            This method adds the passed error object in the array list contained by 
            the context object
            </summary>
            <param name="ErrObject">ErrorObject</param>
            <returns>Nothing</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.AddErrors(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            This method adds the passed arraylist of error objects
            to the context object
            </summary>
            <param name="ErrorObjects">Array List</param>
            <returns>Nothing</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.LogErrors">
            -----------------------------------------------------------------------------
            <summary>
            This method will log all the error and exceptions contained in the ErrorObjects 
            arraylist.This will then call the log method from the Logger class after 
            converting the array list into a ErrorObject array.
            </summary>
            <returns>Nothing</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.IsErrorContained">
            -----------------------------------------------------------------------------
            <summary>
            This method will check if the context contains any error message.This method 
            can be used for checking if the context is empty.
            </summary>
            <returns>boolean value 'true' - If errors are present
            		false in case of no errors.</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.IsCommunicationErrorContained(PayPal.Payments.Common.ErrorObject)">
             -----------------------------------------------------------------------------
             <summary>
             This method will check if the context contains a specific error message.This method 
             can be used for checking if the context is empty.
             </summary>
            <param name="Error">Error Object</param>
             <returns>boolean value 'true' - If specific Error is present
            			false in case of no errors.</returns>
             <remarks>
             </remarks>
             -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.GetError(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This method will return the error object from the Context as per the index 
            passed to the function.If the index value passed is more than the count of the 
            errors in the array list then it returns a null.
            </summary>
            <param name="Index">int</param> 
            <returns>ErrorObject</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.GetErrors">
            -----------------------------------------------------------------------------
            <summary>
            This method returns the array list populated with all the error contained 
            in the context
            </summary>
            <returns>Array List</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.GetErrors(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This method will return the array list populated with all the error contained 
            in the context which are equal to or above the severity level passed to the 
            function
            </summary>
            <param name="SevLvl">integer</param> 
            <returns>Array List</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.getErrorCount">
            -----------------------------------------------------------------------------
            <summary>
            This method will return the total number of errors contained in the 
            Context Object.
            </summary>
            <returns>Integer</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.PopulateErrors">
            -----------------------------------------------------------------------------
            <summary>
            This method will populate all the error objects contained in the arraylist with 
            details such as the severity level and message body.It uses 'PopulateErrorDetails'
            method of the Logger class.
            </summary>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.ToString">
            -----------------------------------------------------------------------------
            <summary>
            This method overrides the toString() method of the System.Object Class.This method 
            converts the information in the Context in the string format.The format is as follows:
            
            Message (Message Number in the context)-----------------------------
            [(Message severity Level)](Message code)-(Formatted message body with context info)
            Message stack Trace
             
            </summary>
            <returns>Returns all the messages contained by the context in the string format.
            </returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Context.ToString(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This method is another overload for the method toString().This method 
            converts the information in the Context in the string format.This will return 
            the formatted error string for messages that have severity level equal to or above
            the severitylevel parameter passed to this function.The messages for different errors
            are separated by the separator format passed to the method.In case no separator is 
            passed a new line character is used.
              
            </summary>
            <param name="SeverityLevel" >All the errors messages which have severity levels equal 
            to or greater than this is returned </param>
            <param name="Seperator" >Message separator.</param>
            <returns>Returns the messages contained by the context in the string format.
            </returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
            
        </member>
        <member name="M:PayPal.Payments.Common.Context.ClearErrors">
            <summary>
            This resets the context object
            </summary>
            <returns>Void</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Context.GetStringSeverity(System.Int32)">
            <summary>
            This gets the severity level for a
            severity integer value.
            </summary>
            <param name="Severity">Severity level integer value</param>
            <returns>Severity level string value</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Context.Equals(System.Object)">
            <summary>
            Not implemented 
            </summary>
            <param name="obj"></param>
            <returns>Object.Equals</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Context.GetHashCode">
            <summary>
            Not implemented 
            </summary>
            <returns>Object.GetHashCode</returns>
        </member>
        <member name="T:PayPal.Payments.Common.ErrorObject">
            -----------------------------------------------------------------------------
            <summary>
            This class contains the error message along with the message code ,Severity level 
            of the error and the stack Trace.This class represents the format of an error/message. 
            </summary>
            <remarks>
                
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:PayPal.Payments.Common.ErrorObject.mMsgCode">
            <summary>
            Holds the message code for the Error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.ErrorObject.mMsgCodeParams">
            <summary>
            Holds the context parameters for the place holders.These parameters will be used 
            in conjunction with the message body to get the formatted message for the error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.ErrorObject.mSeverity">
            <summary>
            Holds the Severity Level for the error.Sets this to debug by default.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.ErrorObject.mStackTrace">
            <summary>
            Holds the stack trace, if applicable.This is helpful in case the error is an 
            Exception.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.ErrorObject.mMsgBody">
            <summary>
            Holds the message body for the Error.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.ErrorObject.MessageCode">
            <summary>
            Gets Message Code
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.ErrorObject.ErrorStackTrace">
            <summary>
            Gets Stack Trace of the Error Object.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.ErrorObject.SeverityLevel">
            <summary>
            Gets the SeverityLevel
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.ErrorObject.MessageParams">
            <summary>
            Gets MessageParams
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.ToString">
            -----------------------------------------------------------------------------
            <summary>
            This function overrides the object.toString method.
            This function formats the error message by filling the place holders with the 
            context parameters
            </summary>
            <returns>Formatted error String </returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.Int32,System.String,System.String[])">
            <summary>
            Used for Validation Errors which don’t have a stack trace.
            </summary>
            <param name="Severity">Severity level for the error.</param>
            <param name="MsgCode">Message Code.</param>
            <param name="MsgCodeParams">Parameters which are used as context information.</param>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Used for populating error message from the Message xml file.
            </summary>
            <param name="Severity">Severity level for the error.</param>
            <param name="MsgCode">Message Code.</param>
            <param name="MsgBody">Message Description for the Error.</param>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.Int32,System.String,System.String[],System.String)">
            <summary>
            Used for Exception objects, which have a stack trace.
            </summary>
            <param name="Severity">Severity level for the error.</param>
            <param name="MsgCode">Message Code.</param>
            <param name="MsgCodeParams">Parameters which are used as context information.</param>
            <param name="StackTrace">Stack Trace information for the Error.</param>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.Int32,System.String,System.String,System.String[],System.String)">
            <summary>
            Used for copying the error object in the logger class.
            </summary>
            <param name="Severity">Severity level for the error.</param>
            <param name="MsgCode">Message Code.</param>
            <param name="MsgBody">Message Description for the Error.</param>
            <param name="MsgCodeParams">Parameters which are used as context information.</param>
            <param name="StackTrace">Stack Trace information for the Error.</param>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.String,System.String)">
            <summary>
            Used for Exception objects without any message code.
            </summary>
            <param name="MsgBody">Message Description for the Error.</param>
            <param name="StackTrace">Stack Trace information for the Error.</param>
        </member>
        <member name="M:PayPal.Payments.Common.ErrorObject.#ctor(System.String)">
            <summary>
            Used for Exception objects without any message code and stack trace.
            </summary>
            <param name="MsgBody">Message Description for the Error.</param>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.BaseException">
            -----------------------------------------------------------------------------
            <summary>
            This is the base class for all the different exception classes.
            </summary>
            <remarks>
                
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:PayPal.Payments.Common.Exceptions.BaseException.mErrorContext">
            <summary>
            Static context object which holds the information about the different exceptions 
            that are raised.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.BaseException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="Err">ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.BaseException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex">Exception which needs to be converted into a Base 
            exception type. </param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.BaseException.ToString">
            -----------------------------------------------------------------------------
            <summary>
            This method will return the information contained in the exception in 
            the String format.This internally calls the context.ToString() method to get 
            the string format
            </summary>
            <returns>String representation of the Exception</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.CommunicationException">
            <summary>
            This Exception class will be used for handling the Communication Exceptions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.CommunicationException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="ErrObject" >ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.CommunicationException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex" >Exception which needs to be converted into a Communication 
            exception type. </param>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.DataObjectException">
            <summary>
            This Exception class will be used for handling the DataObject Exceptions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.DataObjectException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="ErrObject" >ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.DataObjectException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex" >Exception which needs to be converted into a DataObjectException type. </param>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.GeneralException">
            <summary>
            This Exception class will be used for handling the General Exceptions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.GeneralException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="ErrObject" >ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.GeneralException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex" >Exception which needs to be converted into 
            a GeneralException type. </param>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.NamespaceDoc">
             <summary>
            NameSpace doc for Exceptions namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.ProtocolException">
            <summary>
            This Exception class will be used for handling the Protocol Exceptions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.ProtocolException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="ErrObject" >ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.ProtocolException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex" >Exception which needs to be converted into 
            a ProtocolException type. </param>
        </member>
        <member name="T:PayPal.Payments.Common.Exceptions.TransactionException">
            <summary>
            This Exception class will be used for handling the Transaction Exceptions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.TransactionException.#ctor(PayPal.Payments.Common.ErrorObject)">
            <summary>
            Constructor with Error object as a parameter.
            </summary>
            <param name="ErrObject" >ErrorObject which needs to be added to the exception.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Exceptions.TransactionException.#ctor(System.Exception)">
            <summary>
            Constructor with another exception as a parameter.
            </summary>
            <param name="Ex" >Exception which needs to be converted into 
            a GeneralException type. </param>
        </member>
        <member name="T:PayPal.Payments.Common.Logging.Logger">
            -----------------------------------------------------------------------------
            <summary>
            This is the main class which is used for Logging.It has a static constructor 
            which initializes the sortedlist containing all the error messages.
            This class will primarily be used by the Context class.
            The only method from this class which can be used outside the assembly is the log
            method which takes in a string and severity level as parameters.
            </summary>
            <remarks>
                
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mMessages">
            <summary>
            This SortedList holds the Message code,Body and severity level of the messages
            mentioned in the XML file.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mInstance">
            <summary>
            Holds the instance of this singleton class.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mLoggerErrs">
            <summary>
            Holds the errors generated by Logger class.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mLogFileName">
            <summary>
            Holds log file name
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mFileLength">
            <summary>
            Holds Log file size
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mFileInfo">
            <summary>
            Holds log file 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mWriteToFile">
            <summary>
            This StermWriter writes in to Log file
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mFileSize">
            <summary>
            Holds Log file size Limit from Config file
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mErrInLogger">
            <summary>
            This flag indicates, if an error occurred because of the Logger class.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mLogLevel">
            <summary>
            Holds Log level info
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mFileSizeLimit">
            <summary>
            Holds Log file size limit 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mIsCom">
            <summary>
            Hold COM information 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Logging.Logger.mRequestId">
            <summary>
            Hold RequestID information 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            This private constructor reads the config file for the name of file which contains the 
            error messages.After getting the name it loads the static member "mMessages" with 
            the messages mentioned in the file.
            Gets Log file name from Config file. If not available then assign default file name.
            Gets Log file size from Config file. If not available then assign default file size.
            </summary>
            <returns>Nothing</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:PayPal.Payments.Common.Logging.Logger.Instance">
            <summary>
            Holds the instance of this singleton class.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.Logging.Logger.GetLoggerErrs">
            <summary>
            Get the Errors generated from the Logger.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.Log(PayPal.Payments.Common.ErrorObject)">
            -----------------------------------------------------------------------------
            <summary>
            This is a internal method and takes in a errorobject as a parameter.This method 
            then calls another overloaded version for the method Log which takes in a 
            string to be logged and the severity level of the Error Object.
            </summary>
            <param name="Message" >ErrorObject</param>
            <return></return>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.Log(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            This is a internal method and takes in a arraylist of the errorobjects 
            as a parameter.The method goes through the array list for each errorobject 
            found makes a call to another overloaded version of the Log method which takes 
            in ErrorObject as a parameter.If there are some errors which have been generated by
            the Logger class then those are logged instead of the passed messages.
            </summary>
            <param name="Messages" >ArrayList containing the error objects</param>
            <return></return>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.Log(System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This method used to log the data in a file.Different type of severity level are logged here.
            The levels that can be logged are decided by the configuration settings in the 
            Application config file.
            </summary>
            <param name="Message">String value that needs to be logged</param>
            <param name="SeverityLvl">Severity level of the message.This could be one of the following:
            	1 (Debug)
            	2 (Info)
            	3 (Warn)
            	4 (Error)
            	5 (Fatal)
            </param>
            <return></return>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.ArchivedLogFile">
            -----------------------------------------------------------------------------
            <summary>
            This is a internal method.This method contains implementation for rolling file functionality.
            </summary>
            <return></return>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:PayPal.Payments.Common.Logging.Logger.PopulateErrorDetails(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            This method populates each ErrorObject int the arraylist passed, with the 
            details from the SortedList held by the logger class.It populates the mLoggerErrs
            in case the relevant message code is not found.
            </summary>
            <param name="ErrObj">ErrorObject</param> 
            <returns>ErrorObject</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:PayPal.Payments.Common.Logging.NamespaceDoc">
             <summary>
            NameSpace doc for Logging namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Common.NamespaceDoc">
             <summary>
            NameSpace doc for Common namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.GlobalClass">
            <summary>
            Summary description for GlobalClass.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.LocalPolicy">
            <summary>
            Custom class to define custom security
            policy for SSL server certificates.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.LocalPolicy.mContext">
            <summary>
            Context object
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.LocalPolicy.mIsXmlPayRequest">
            <summary>
            Flag to indicate whether NVP or
            XML Pay request
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.LocalPolicy.#ctor(PayPal.Payments.Common.Context@,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.LocalPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.LocalPolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
            <summary>
            This overridden method is called by the 
            runtime after the server cert is validated
            </summary>
            <param name="ServicePoint">Current Service point of the request</param>
            <param name="Cert">Certificate</param>
            <param name="WebRequest">Web request</param>
            <param name="ProblemCode">Problem Code</param>
            <returns>True if certificate is valid, false otherwise</returns>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.NamespaceDoc">
             <summary>
            NameSpace doc for Utility namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.ParameterListValidator">
            <summary>
            Parameter List Validator Class.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.ParameterListValidator.#ctor">
            <summary>
            private Constructor.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.ParameterListValidator.Validate(System.String,System.Boolean,PayPal.Payments.Common.Context@)">
            <summary>
            Validates the parameter list.
            </summary>
            <param name="ParamList">Parameter List</param>
            <param name="IsXmlPayReq">true if Request is XmlPay, false otherwise.</param>
            <param name="CurrentContext">Context object by reference.</param>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.ParameterListValidator.ParseNVPList(System.String,PayPal.Payments.Common.Context@,System.Boolean)">
            <summary>
            Validates Name Value Pair Request.
            </summary>
            <param name="ParamList">Name Value Param List.</param>
            <param name="CurrentContext">Context object by reference.</param>
            <param name="PopulateResponseHashTable">True will populate the return hashtable, false will just parse the request and check for validity</param>
            <returns>Name value hash table</returns>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.PayflowConstants">
            <summary>
            Summary description for PayflowConstants.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowConstants.#ctor">
            <summary>
            Private constructor
            for PayflowConstants
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.DEFAULT_TIMEOUT">
            <summary>
            Default Timeout in seconds (45 sec)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.DEFAULT_RETRYCONNECTIONTIME">
            <summary>
            Default Connection reconnect Time span in seconds (3 sec)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.DEFAULT_HOSTPORT">
            <summary>
            Default Payflow Host port (443)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CLIENT_PREFIX">
            <summary>
            SDK Client Prefix
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CLIENT_TYPE">
            <summary>
            SDK Client Type (N --> .NET)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CLIENT_VERSION">
            <summary>
            SDK Client Version (400 --> V4 protocol)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.USER_AGENT">
            <summary>
            SDK User Agent (Payflow SDK for .NET)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.STRONG_ASSEMBLY">
            <summary>
            SDK Request Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.WEAK_ASSEMBLY">
            <summary>
            SDK Request Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAX_RETRY">
            <summary>
            Maximum retry attempts (3)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_ID">
            <summary>
            XmlPay ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_RESP_ID">
            <summary>
            XmlPay Response ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_CONTENT_TYPE">
            <summary>
            XML Content Type (text/xml) 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.NV_CONTENT_TYPE">
            <summary>
            Name value Content Type (text/namevalue)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XMLPAY_NAMESPACE">
            <summary>
            XML Pay namespace (http://www.paypal.com/XMLPay)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XMLPAY_REQUEST_TAG">
            <summary>
            XML Pay request tag (XMLPayRequest)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.EMPTY_STRING">
            <summary>
            Empty String 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CURRENCYCODE_DEFAULT">
            <summary>
            Default Country Code 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CURRENCYCODE_USD">
            <summary>
            Currency code for USD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.DELIMITER_NVP">
            <summary>
            NVP Delimiter (&amp;)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.OPENING_BRACE_NVP">
            <summary>
            NVP Opening Brace ([)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CLOSING_BRACE_NVP">
            <summary>
            NVP Closing Brace (])
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.UNDERSCORE">
            <summary>
            Constant Underscore
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.DOT">
            <summary>
            Constant DOT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEPARATOR_NVP">
            <summary>
            NVP Separator (=)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INVALID_NUMBER">
            <summary>
            Numeric values initialize
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TAG_DUPLICATE">
            <summary>
            Duplicate tag
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RESULT">
            <summary>
            Xml Pay Param Result
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_MESSAGE">
            <summary>
            Xml Pay param Message
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TENDERTYPE_CARD">
            <summary>
            Card Tender (C)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TENDERTYPE_ACH">
            <summary>
            ACH Tender (A)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TENDERTYPE_TELECHECK">
            <summary>
            Telecheck Tender (K)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TENDERTYPE_PAYPAL">
            <summary>
            PayPal Tender (P)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypeCCD">
            <summary>
            ACH Authtype CCD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypePPD">
            <summary>
            ACH Authtype PPD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypePOP">
            <summary>
            ACH Authtype POP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypeWEB">
            <summary>
            ACH Authtype WEB
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypeRCK">
            <summary>
            ACH Authtype RCK
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypeARC">
            <summary>
            ACH Authtype ARC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.AchAuthTypeTEL">
            <summary>
            ACH Authtype TEL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_AUTH">
            <summary>
            Authorization TrxType (A)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_SALE">
            <summary>
            Sale TrxType (S)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_CREDIT">
            <summary>
            Credit Trxtype (C)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_VOICEAUTH">
            <summary>
            Voice Authorization Trxtype (F)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_CAPTURE">
            <summary>
            Capture Trxtype (D)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_INQUIRY">
            <summary>
            Inquiry Trxtype (I)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_VOID">
            <summary>
            Void Trxtype (V)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_RECURRING">
            <summary>
            Recurring Trxtype (R)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_FRAUDAPPROVE">
            <summary>
            Fraud Review Trxtype (U)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_BUYERAUTH_VE">
            <summary>
            Buyer auth Verify Enrollment Trxtype (E)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRXTYPE_BUYERAUTH_VA">
            <summary>
            Buyer auth Validate Authentication Trxtype (Z)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RMS_UPDATEACTION_APPROVE">
            <summary>
            RMS Update Action Approve
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RMS_UPDATEACTION_DECLINE">
            <summary>
            RMS Update Action Decline
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_ADD">
            <summary>
            Recurring Action Add (A)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_MODIFY">
            <summary>
            Recurring Action Modify (M)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_REACTIVATE">
            <summary>
            Recurring Action Reactivate (R)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_CANCEL">
            <summary>
            Recurring Action Cancel (C)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_INQUIRY">
            <summary>
            Recurring Action Inquiry (I)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_ACTION_PAYMENT">
            <summary>
            Recurring Action Payment (P)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_WEEK">
            <summary>
            Recurring PayPeriod Every Week (WEEK)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_BIWK">
            <summary>
            Recurring PayPeriod Every Two Weeks (BIWK)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_SMMO">
            <summary>
            Recurring PayPeriod Twice Every Month (SMMO)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_FRWK">
            <summary>
            Recurring PayPeriod Every Four Weeks (FRWK)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_MONT">
            <summary>
            Recurring PayPeriod Every Month (MONT)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_QTER">
            <summary>
            Recurring PayPeriod Every Quarter (QTER)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_SMYR">
            <summary>
            Recurring PayPeriod Twice Every Year (SMYR)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.RECURRING_PAYPERIOD_YEAR">
            <summary>
            Recurring PayPeriod Every Year (YEAR)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MSG_COMMUNICATION_ERROR">
            <summary>
            Error Message Constant for communication error (MSG_1012)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY">
            <summary>
            Error Message Constant for communication error xml pay (MSG_1005)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MSG_COMMUNICATION_ERROR_NO_RESPONSE_ID">
            <summary>
            Error Message Constant for communication error (MSG_1012)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY_NO_RESPONSE_ID">
            <summary>
            Error Message Constant for communication error xml pay (MSG_1005)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CHECK_TYPE_PERSONEL">
            <summary>
            Check type Personal (P)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CHECK_TYPE_CORPORATE">
            <summary>
            Check type Corporate (C)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CommErrorCodes">
            <summary>
            Communication Error Codes
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CommErrorMessages">
            <summary>
            Communication Error Messages
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowConstants.PopulateErrorCodes">
            <summary>
            Populates Error code hash table
            </summary>
            <returns>Error code hash table</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowConstants.PopulateErrorMessages">
            <summary>
            Populates Message code hash table
            </summary>
            <returns>Message code hash table</returns>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_REQUEST_ID">
            <summary>
            HTTP Header PAYFLOW-Request-ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_TIMEOUT">
            <summary>
            HTTP Header PAYFLOW-CLIENT-TIMEOUT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_FILE_NAME">
            <summary>
            Holds the name of the key used to get the message file name. 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CONFIG_LOGFILE_NAME">
            <summary>
            Holds the key name which holds the Log file name 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CONFIG_LOGFILE_SIZE">
            <summary>
            Holds the key name which holds the limit for Log file size
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CONFIG_LOG_LEVEL">
            <summary>
            Holds the key name which holds the Logging level
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.LOGFILE_NAME">
            <summary>
            Holds the default Log file name 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.LOGFILE_SIZE">
            <summary>
            Holds the default limit for Log file size
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.LOGGING_OFF">
            <summary>
            Logging Level OFF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_ID">
            <summary>
            Holds the name of the key in the message file that holds the message code.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_BODY">
            <summary>
            Holds the name of the key in the message file that holds the message body.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_SEVERITY">
            <summary>
            Holds the name of the key in the message file that holds the message severity.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRACE_TAG">
            <summary>
            Tag for TRACE in config file
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRACE_DEFAULT">
            <summary>
            Default value of Trace
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRACE_ON">
            <summary>
            On value for Trace
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRACE_OFF">
            <summary>
            Off value for Trace
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.TRACE">
            <summary>
            Trace value
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ERROR_FATAL">
            <summary>
            Severity for a FATAL level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ERROR_ERROR">
            <summary>
            Severity for a ERROR level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ERROR_WARN">
            <summary>
            Severity for a WARN level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ERROR_INFO">
            <summary>
            Severity for a INFO level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ERROR_DEBUG">
            <summary>
            Severity for a DEBUG level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEVERITY_FATAL">
            <summary>
            Severity for a FATAL level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEVERITY_ERROR">
            <summary>
            Severity for a ERROR level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEVERITY_WARN">
            <summary>
            Severity for a WARN level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEVERITY_INFO">
            <summary>
            Severity for a INFO level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.SEVERITY_DEBUG">
            <summary>
            Severity for a DEBUG level message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.CONFIG_ERROR">
            <summary>
            Represents the description for error in the configuration file.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.LOGGING_ERROR">
            <summary>
            Represents the description for error occurred during the logging process.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_FORMATTING_ERROR">
            <summary>
            Error occurred while formatting message.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_WRAPPERHEADER_ERROR">
            <summary>
            Error occurred while Adding invalid client(Wrapper) header.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_LOG_ERROR">
            <summary>
            Error occurred while Writting in to Log file
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MESSAGE_CONFIG_LOG_ERROR">
            <summary>
            Error occurred while KEYs are not present in config file for Log
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.FORMAT_MSG_SEPERATOR">
            <summary>
            Format Message Separator (Message)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.FORMAT_MSG_LINESEPERATOR">
            <summary>
            Format Message Line Separator (---------------------)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.FORMAT_MSG_OPENBRACKET">
            <summary>
            Format Message  Open Bracket ([)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.FORMAT_MSG_CLOSEBRACKET">
            <summary>
            Format Message  Close Bracket (])
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.FORMAT_MSG_CODEBODY_SEP">
            <summary>
            Format Message Code body Separator (-)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_SOK_CONN_FAILED">
            <summary>
            Communication Error Connection Failed
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_PARM_NAME">
            <summary>
            Communication Error Param Name Error
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_PARM_NAME_LEN">
            <summary>
            Communication Error Param Name Length Error
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_TIMEOUT_WAIT_RESP">
            <summary>
            Communication Error Timeout Waiting for Response
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_NULL_HOST_STRING">
            <summary>
            Communication Error Null Host String
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_INVALID_TIMEOUT">
            <summary>
            Communication Error Invalid Timeout
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_MISSING_REQUEST_ID">
            <summary>
            Communication Error Missing Request Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_EMPTY_PARAM_LIST">
            <summary>
            Communication Error Empty Param List
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_CONTXT_INIT_FAILED">
            <summary>
            Communication Error Context Initialization Failed
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_UNKNOWN_STATE">
            <summary>
            Communication Error Unknown State
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_INVALID_NVP">
            <summary>
            Communication Error Invalid Name Value Pair Request
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_RESPONSE_FORMAT_ERROR">
            <summary>
            Communication Error Response Format Error
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_VERSION_NOT_SUPPORTED">
            <summary>
            Communication Error Version Not Supported
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_CONFIG_ERROR">
            <summary>
            Internal Error Configuration Error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_LOG_ERROR">
            <summary>
            Internal Error Log error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_MSGFILE_INIT_ERROR">
            <summary>
            Internal Error Log4net initialization error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_CURRENCY_PROCESS_ERROR">
            <summary>
            Internal Error currency Process error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.E_COMMON_NAME">
            <summary>
            Internal Error currency Process error.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INTL_PARAM_REQUEST">
            <summary>
            Internal Param REQUEST
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INTL_PARAM_FULLRESPONSE">
            <summary>
            Internal Param FULLRESPONSE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INTL_PARAM_PAYFLOW_HOST">
            <summary>
            Internal Param PAYFLOW_HOST
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INTL_PARAM_PAYFLOW_PORT">
            <summary>
            Internal Param PAYFLOW_PORT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.INTL_PARAM_PAYFLOW_TIMEOUT">
            <summary>
            Internal Param PAYFLOW_TIMEOUT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULE">
            <summary>
            Internal Param rule
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_NUM">
            <summary>
            Internal Param num
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULEID">
            <summary>
            Internal Param ruleId
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULEALIAS">
            <summary>
            Internal Param ruleAlias
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULEDESCRIPTION">
            <summary>
            Internal Param ruleDescription
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_ACTION">
            <summary>
            Internal Param action
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_TRIGGEREDMESSAGE">
            <summary>
            Internal Param triggeredMessage
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULEVENDORPARMS">
            <summary>
            Internal Param rulevendorparms
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_RULEPARAMETER">
            <summary>
            Internal Param ruleParameter
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_NAME">
            <summary>
            Internal Param name
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_VALUE">
            <summary>
            Internal Param value
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_TYPE">
            <summary>
            Internal Param type
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_VERSION">
            <summary>
            XML Pay Param version
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_VENDOR">
            <summary>
            XML Pay Param Vendor
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_USER">
            <summary>
            XML Pay Param User
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_PARTNER">
            <summary>
            XML Pay Param Partner
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_PASSWORD">
            <summary>
            XML Pay Param Password
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_ACCTNUM">
            <summary>
            XML Pay Param AcctNum
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_CARDNUM">
            <summary>
            XML Pay Param CardNum
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_EXPDATE">
            <summary>
            XML Pay Param ExpDate
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_MAGDATA">
            <summary>
            XML Pay Param MagData
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_MICR">
            <summary>
            XML Pay Param MICR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_CVNUM">
            <summary>
            XML Pay Param CVNum
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_DL">
            <summary>
            XML Pay Param DL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_SS">
            <summary>
            XML Pay Param SS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_DOB">
            <summary>
            XML Pay Param DOB
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.XML_PARAM_START_TAG">
            <summary>
            XML Pay Start tag 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHTYPE">
            <summary>
            Payflow Param AUTHTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PRENOTE">
            <summary>
            Payflow Param PRENOTE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TERMCITY">
            <summary>
            Payflow Param TERMCITY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TERMSTATE">
            <summary>
            Payflow Param TERMSTATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ABA">
            <summary>
            Payflow Param ABA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACCTTYPE">
            <summary>
            Payflow Param ACCTTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TENDER">
            <summary>
            Payflow Param TENDER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CHKNUM">
            <summary>
            Payflow Param CHKNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CHKTYPE">
            <summary>
            Payflow Param CHKTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STREET">
            <summary>
            Payflow Param STREET
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BILLTOSTREET2">
            <summary>
            Payflow Param BILLTOSTREET2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CITY">
            <summary>
            Payflow Param CITY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STATE">
            <summary>
            Payflow Param STATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COUNTRY">
            <summary>
            Payflow Param COUNTRY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BILLTOCOUNTRY">
            <summary>
            Payflow Param BILLTOCOUNTRY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ZIP">
            <summary>
            Payflow Param ZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PHONENUM">
            <summary>
            Payflow Param PHONENUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BILLTOPHONE2">
            <summary>
            Payflow Param BILLTOPHONE2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_EMAIL">
            <summary>
            Payflow Param EMAIL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FAX">
            <summary>
            Payflow Param FAX
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FIRSTNAME">
            <summary>
            Payflow Param FIRSTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MIDDLENAME">
            <summary>
            Payflow Param MIDDLENAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_LASTNAME">
            <summary>
            Payflow Param LASTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HOMEPHONE">
            <summary>
            Payflow Param HOMEPHONE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BROWSERTIME">
            <summary>
            Payflow Param BROWSERTIME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BROWSERCOUNTRYCODE">
            <summary>
            Payflow Param BROWSERCOUNTRYCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ECHODATA">
            <summary>
            Payflow Param ECHODATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BROWSERUSERAGENT">
            <summary>
            Payflow Param BROWSERUSERAGENT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACSURL">
            <summary>
            Payflow Param ACSURL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHENICATION_ID">
            <summary>
            Payflow Param AUTHENICATION_ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHENICATION_STATUS">
            <summary>
            Payflow Param AUTHENICATION_STATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CAVV">
            <summary>
            Payflow Param CAVV
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ECI">
            <summary>
            Payflow Param ECI
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DSTRANSACTIONID">
            <summary>
            Payflow Param DSTRANSACTIONID 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_THREEDSVERSION">
            <summary>
            Payflow Param THREEDSVERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MD">
            <summary>
            Payflow Param MD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAREQ">
            <summary>
            Payflow Param PAREQ
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_XID">
            <summary>
            Payflow Param XID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MICR">
            <summary>
            Payflow Param MICR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NAME">
            <summary>
            Payflow Param NAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DL">
            <summary>
            Payflow Param DL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SS">
            <summary>
            Payflow Param SS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REQNAME">
            <summary>
            Payflow Param REQNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTCODE">
            <summary>
            Payflow Param CUSTCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTIP">
            <summary>
            Payflow Param CUSTIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTHOSTNAME">
            <summary>
            Payflow Param CUSTHOSTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTBROWSER">
            <summary>
            Payflow Param CUSTBROWSER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTVATREGNUM">
            <summary>
            Payflow Param CUSTVATREGNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DOB">
            <summary>
            Payflow Param DOB
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTID">
            <summary>
            Payflow Param CUSTID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COMPANYNAME">
            <summary>
            Payflow Param COMPANYNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CORPNAME">
            <summary>
            Payflow Param CORPNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHDESCR">
            <summary>
            Payflow Param MERCHDESCR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHSVC">
            <summary>
            Payflow Param MERCHSVC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDLMSGS">
            <summary>
            Payflow Param ADDLMSGS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PREFPSMSG">
            <summary>
            Payflow Param PREFPSMSG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_POSTFPSMSG">
            <summary>
            Payflow Param POSTFPSMSG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RESPTEXT">
            <summary>
            Payflow Param RESPTEXT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROCAVS">
            <summary>
            Payflow Param PROCAVS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROCCARDSECURE">
            <summary>
            Payflow Param PROCCARDSECURE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROCCVV2">
            <summary>
            Payflow Param PROCCVV2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HOSTCODE">
            <summary>
            Payflow Param HOSTCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_INVNUM">
            <summary>
            Payflow Param INVNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AMT">
            <summary>
            Payflow Param AMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TAXEXEMPT">
            <summary>
            Payflow Param TAXEXEMPT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TAXAMT">
            <summary>
            Payflow Param TAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DUTYAMT">
            <summary>
            Payflow Param DUTYAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FREIGHTAMT">
            <summary>
            Payflow Param FREIGHTAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HANDLINGAMT">
            <summary>
            Payflow Param HANDLINGAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPPINGAMT">
            <summary>
            Payflow Param SHIPPINGAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DISCOUNT">
            <summary>
             Payflow Param DISCOUNT
             </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DESC">
            <summary>
            Payflow Param DESC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COMMENT1">
            <summary>
            Payflow Param COMMENT1
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COMMENT2">
            <summary>
            Payflow Param COMMENT2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DESC1">
            <summary>
            Payflow Param DESC1
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DESC2">
            <summary>
            Payflow Param DESC2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DESC3">
            <summary>
            Payflow Param DESC3
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DESC4">
            <summary>
            Payflow Param DESC4
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTREF">
            <summary>
            Payflow Param CUSTREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PONUM">
            <summary>
            Payflow Param PONUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATREGNUM">
            <summary>
            Payflow Param VATREGNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATTAXAMT">
            <summary>
            Payflow Param VATTAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_LOCALTAXAMT">
            <summary>
            Payflow Param LOCALTAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NATIONALTAXAMT">
            <summary>
            Payflow Param NATIONALTAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ALTTAXAMT">
            <summary>
            Payflow Param ALTTAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COMMCODE">
            <summary>
            Payflow Param COMMCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_INVOICEDATE">
            <summary>
            Payflow Param INVOICEDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STARTTIME">
            <summary>
            Payflow Param STARTTIME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ENDTIME">
            <summary>
            Payflow Param ENDTIME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORDERDATE">
            <summary>
            Payflow Param ORDERDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORDERTIME">
            <summary>
            Payflow Param ORDERTIME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_AMT">
            <summary>
            Payflow Param L_AMTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_COST">
            <summary>
            Payflow Param L_COSTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_FREIGHTAMT">
            <summary>
            Payflow Param L_FREIGHTAMTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_HANDLINGAMT">
            <summary>
            Payflow Param L_HANDLINGAMTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_TAXAMT">
            <summary>
            Payflow Param L_TAXAMTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_UOM">
            <summary>
            Payflow Param L_UOMn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PICKUPSTREET">
            <summary>
            Payflow Param L_PICKUPSTREETn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PICKUPSTATE">
            <summary>
            Payflow Param L_PICKUPSTATEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PICKUPCOUNTRY">
            <summary>
            Payflow Param L_PICKUPCOUNTRYn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PICKUPCITY">
            <summary>
            Payflow Param L_PICKUPCITYn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PICKUPZIP">
            <summary>
            Payflow Param L_PICKUPZIPn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_DESC">
            <summary>
            Payflow Param L_DESCn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_DISCOUNT">
            <summary>
            Payflow Param L_DISCOUNTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_MANUFACTURER">
            <summary>
            Payflow Param L_MANUFACTURERn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_PRODCODE">
            <summary>
            Payflow Param L_PRODCODEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ITEMAMT">
            <summary>
            Payflow Param ITEMAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ITEMNUMBER">
            <summary>
            Payflow Param L_ITEMNUMBERn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_QTY">
            <summary>
            Payflow Param L_QTYn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_SKU">
            <summary>
            Payflow Param L_SKUn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_TAXRATE">
            <summary>
            Payflow Param L_TAXRATEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_TAXTYPE">
            <summary>
            Payflow Param L_TAXTYPEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_TYPE">
            <summary>
            Payflow Param L_TYPEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_COMMCODE">
            <summary>
            Payflow Param L_COMMCODEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_TRACKINGNUM">
            <summary>
            Payflow Param L_TRACKINGNUMn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_COSTCENTERNUM">
            <summary>
            Payflow Param L_COSTCENTERNUMn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_CATALOGNUM">
            <summary>
            Payflow Param L_CATALOGNUMn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_UPC">
            <summary>
            Payflow Param L_UPCn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_UNSPSCCODE">
            <summary>
            Payflow Param L_UNSPSCCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_NAME">
            <summary>
            Payflow Param L_NAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_EXPDATE">
            <summary>
            Payflow Param EXPDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CVV2">
            <summary>
            Payflow Param CVV2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACCT">
            <summary>
            Payflow Param ACCT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COMMCARD">
            <summary>
            Payflow Param COMMCARD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROFILENAME">
            <summary>
            Payflow Param PROFILENAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_START">
            <summary>
            Payflow Param START
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TERM">
            <summary>
            Payflow Param TERM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYPERIOD">
            <summary>
            Payflow Param PAYPERIOD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_OPTIONALTRX">
            <summary>
            Payflow Param OPTIONALTRX
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_OPTIONALTRXAMT">
            <summary>
            Payflow Param OPTIONALTRXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RETRYNUMDAYS">
            <summary>
            Payflow Param RETRYNUMDAYS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MAXFAILPAYMENTS">
            <summary>
            Payflow Param MAXFAILPAYMENTS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NUMFAILPAYMENTS">
            <summary>
            Payflow Param NUMFAILPAYMENTS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGPROFILEID">
            <summary>
            Payflow Param ORIGPROFILEID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTHISTORY">
            <summary>
            Payflow Param PAYMENTHISTORY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTNUM">
            <summary>
            Payflow Param PAYMENTNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FREQUENCY">
            <summary>
            Payflow Param PAYMENTNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RECURRING">
            <summary>
            Payflow Param RECURRING
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROFILEID">
            <summary>
            Payflow Param PROFILEID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RPREF">
            <summary>
            Payflow Param RPREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRXPNREF">
            <summary>
            Payflow Param TRXPNREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRXRESULT">
            <summary>
            Payflow Param TRXRESULT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRXRESPMSG">
            <summary>
            Payflow Param TRXRESPMSG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STATUS">
            <summary>
            Payflow Param STATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTSLEFT">
            <summary>
            Payflow Param PAYMENTSLEFT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NEXTPAYMENT">
            <summary>
            Payflow Param NEXTPAYMENT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_END">
            <summary>
            Payflow Param END
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AGGREGATEAMT">
            <summary>
            Payflow Param AGGREGATEAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AGGREGATEOPTIONALAMT">
            <summary>
            Payflow Param AGGREGATEOPTIONALAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOFIRSTNAME">
            <summary>
            Payflow Param SHIPTOFIRSTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOMIDDLENAME">
            <summary>
            Payflow Param SHIPTOMIDDLENAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOLASTNAME">
            <summary>
            Payflow Param SHIPTOLASTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOSTREET">
            <summary>
            Payflow Param SHIPTOSTREET
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOCITY">
            <summary>
            Payflow Param SHIPTOCITY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOSTATE">
            <summary>
            Payflow Param SHIPTOSTATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOZIP">
            <summary>
            Payflow Param SHIPTOZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOCOUNTRY">
            <summary>
            Payflow Param SHIPTOCOUNTRY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_RESULTn">
            <summary>
            Payflow Param P_RESULTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_PNREFn">
            <summary>
            Payflow Param P_PNREFn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_TRANSTATEn">
            <summary>
            Payflow Param P_TRANSTATEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_TENDERn">
            <summary>
            Payflow Param P_TENDERn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_TRANSTIMEn">
            <summary>
            Payflow Param P_TRANSTIMEn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_P_AMTn">
            <summary>
            Payflow Param P_AMOUNTn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FPS_PREXMLDATA">
            <summary>
            Payflow Param FPS_PREXMLDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FPS_POSTXMLDATA">
            <summary>
            Payflow Param FPS_POSTXMLDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOSTREET2">
            <summary>
            Payflow Param SHIPTOSTREET2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOPHONE">
            <summary>
            Payflow Param SHIPTOPHONE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOPHONE2">
            <summary>
            Payflow Param SHIPTOPHONE2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOEMAIL">
            <summary>
            Payflow Param SHIPTOEMAIL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPCARRIER">
            <summary>
            Payflow Param SHIPCARRIER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPMETHOD">
            <summary>
            Payflow Param SHIPMETHOD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPFROMZIP">
            <summary>
            Payflow Param SHIPFROMZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPPEDFROMZIP">
            <summary>
            Payflow Param SHIPPEDFROMZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SWIPE">
            <summary>
            Payflow Param SWIPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RESULT">
            <summary>
            Payflow Param RESULT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PNREF">
            <summary>
            Payflow Param PNREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RESPMSG">
            <summary>
            Payflow Param RESPMSG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHCODE">
            <summary>
            Payflow Param AUTHCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AVSADDR">
            <summary>
            Payflow Param AVSADDR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AVSZIP">
            <summary>
            Payflow Param AVSZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CARDSECURE">
            <summary>
            Payflow Param CARDSECURE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CVV2MATCH">
            <summary>
            Payflow Param CVV2MATCH
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_EMAILMATCH">
            <summary>
            Payflow Param EMAILMATCH
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PHONEMATCH">
            <summary>
            Payflow Param PHONEMATCH
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_IAVS">
            <summary>
            Payflow Param IAVS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGRESULT">
            <summary>
            Payflow Param ORIGRESULT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRANSSTATE">
            <summary>
            Payflow Param TRANSSTATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER">
            <summary>
            Payflow Param USER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VENDOR">
            <summary>
            Payflow Param VENDOR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PARTNER">
            <summary>
            Payflow Param PARTNER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PWD">
            <summary>
            Payflow Param PWD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRXTYPE">
            <summary>
            Payflow Param TRXTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VERBOSITY">
            <summary>
            Payflow Param VERBOSITY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PARES">
            <summary>
            Payflow Param PARES
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CURRENCY">
            <summary>
            Payflow Param CURRENCY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PUR_DESC">
            <summary>
            Payflow Param PUR_DESC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGID">
            <summary>
            Payflow Param ORIGID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_UPDATEACTION">
            <summary>
            Payflow Param UPDATEACTION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACTION">
            <summary>
            Payflow Param ACTION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_OSNAME">
            <summary>
            Payflow Param VIT_OSNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_OSARCH">
            <summary>
            Payflow Param VIT_OSARCH
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_OSVERSION">
            <summary>
            Payflow Param VIT_OSVERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_SDKRUNTIMEVERSION">
            <summary>
            Payflow Param VIT_SDKRUNTIMEVERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_PROXY">
            <summary>
            Payflow Param VIT_PROXY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_WRAPTYPE">
            <summary>
            Payflow Param VIT_WRAPTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VIT_WRAPVERSION">
            <summary>
            Payflow Param VIT_WRAPVERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REQUEST_ID">
            <summary>
            Payflow Param REQUEST_ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATTAXPERCENT">
            <summary>
            Payflow Param VATTAXPERCENT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DUPLICATE">
            <summary>
            Payflow Param DUPLICATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DATE_TO_SETTLE">
            <summary>
            Payflow Param DATE_TO_SETTLE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BATCHID">
            <summary>
            Payflow Param BATCHID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PREFIX_RECURRING_INQUIRY_RESP">
            <summary>
            Recurring Inquiry Response Param Prefix 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SETTLE_DATE">
            <summary>
            Payflow Param SETTLE_DATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGPNREF">
            <summary>
            Payflow Param ORIGPNREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TOKEN">
            <summary>
            Payflow Param TOKEN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MAXAMT">
            <summary>
            Payflow Param MAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RETURNURL">
            <summary>
            Payflow Param RETURNURL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CANCELURL">
            <summary>
            Payflow Param CANCELURL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REQCONFIRMSHIPPING">
            <summary>
            Payflow Param REQCONFIRMSHIPPING
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NOSHIPPING">
            <summary>
            Payflow Param NOSHIPPING
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDROVERRIDE">
            <summary>
            Payflow Param ADDROVERRIDE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_LOCALECODE">
            <summary>
            Payflow Param LOCALECODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAGESTYLE">
            <summary>
            Payflow Param PAGESTYLE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HDRIMG">
            <summary>
            Payflow Param HDRIMG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HDRBORDERCOLOR">
            <summary>
            Payflow Param HDRBORDERCOLOR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_HDRBACKCOLOR">
            <summary>
            Payflow Param HDRBACKCOLOR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYFLOWCOLOR">
            <summary>
            Payflow Param PAYFLOWCOLOR
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_POSTALCODE">
            <summary>
            Payflow Param POSTALCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_COUNTRYCODE">
            <summary>
            Payflow Param COUNTRYCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYERID">
            <summary>
            Payflow Param PAYERID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NOTIFYURL">
            <summary>
            Payflow Param NOTIFYURL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ITEMNUMBER">
            <summary>
            Payflow Param L_XXXXn
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BUTTONSOURCE">
            <summary>
            Payflow Param BUTTONSOURCE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYERSTATUS">
            <summary>
            Payflow Param PAYERSTATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOCOUNTRYCODE">
            <summary>
            Payflow Param SHIPTOCOUNTRYCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTOBUSINESS">
            <summary>
            Payflow Param SHIPTOBUSINESS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDRSTATUS">
            <summary>
            Payflow Param ADDRSTATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PPREF">
            <summary>
            Payflow Param PPREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_FEEAMT">
            <summary>
            Payflow Param FEEAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SETTLEAMT">
            <summary>
            Payflow Param SETTLEAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_EXCHANGERATE">
            <summary>
            Payflow Param EXCHANGERATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PENDINGREASON">
            <summary>
            Payflow Param PENDINGREASON
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTTYPE">
            <summary>
            Payflow Param PAYMENTTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTDATE">
            <summary>
            Payflow Param PAYMENTDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTSTATUS">
            <summary>
            Payflow Param PAYMENTSTATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTOM">
            <summary>
            Payflow Param CUSTOM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTSESSIONID">
            <summary>
            Payflow Param MERCHANTSESSIONID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORDERDESC">
            <summary>
            Payflow Param ORDERDESC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGPPREF">
            <summary>
            Payflow Param ORIGPPREF
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CARDSTART">
            <summary>
            Payflow Param CARDSTART
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CARDISSUE">
            <summary>
            Payflow Param CARDISSUE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CORRELATIONID">
            <summary>
            Payflow Param CORRELATIONID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CAPTURECOMPLETE">
            <summary>
            Payflow Param CAPTURECOMPLETE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RECURRINGTYPE">
            <summary>
            Payflow Param RECURRINGTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NOTE">
            <summary>
            Payflow Param NOTE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MEMO">
            <summary>
            Payflow Param MEMO
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BALAMT">
            <summary>
            Payflow Param BALAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AMEXID">
            <summary>
            Payflow Param AMEXID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AMEXPOSDATA">
            <summary>
            Payflow Param AMEXPOSDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BILLINGTYPE">
            <summary>
            Payflow Param BILLINGTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BA_DESC">
            <summary>
            Payflow Param BA_DESC
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BA_CUSTOM">
            <summary>
            Payflow Param BA_CUSTOM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BA_FLAG">
            <summary>
            Payflow Param BA_FLAG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BAID">
            <summary>
            Payflow Param BAID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_BA_STATUS">
            <summary>
            Payflow Param BA_STATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTNAME">
            <summary>
            Payflow Param MERCHANTNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTSTREET">
            <summary>
            Payflow Param MERCHANTSTREET
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTCITY">
            <summary>
            Payflow Param MERCHANTCITY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTSTATE">
            <summary>
            Payflow Param MERCHANTSTATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTCOUNTRYCODE">
            <summary>
            Payflow Param MERCHANTCOUNTRYCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTZIP">
            <summary>
            Payflow Param MERCHANTZIP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_DOREAUTHORIZATION">
            <summary>
            Payflow Param DOREAUTHORIZATION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPPINGMETHOD">
            <summary>
            Payflow Param SHIPPINGMETHOD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROMOCODEOVERRIDE">
            <summary>
            Payflow Param PROMOCODEOVERRIDE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROFILEADDRESSCHANGEDATE">
            <summary>
            Payflow Param PROFILEADDRESSCHANGEDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYPALCHECKOUTBTNTYPE">
            <summary>
            Payflow Param PAYPALCHECKOUTBTNTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PRODUCTCATEGORY">
            <summary>
            Payflow Param PRODUCTCATEGORY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PROMOCODE">
            <summary>
            Payflow Param PROMOCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRANSTIME">
            <summary>
            Payflow Param TRANSTIME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CARDTYPE">
            <summary>
            Payflow Param CARDTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORIGAMT">
            <summary>
            Payflow Param ORIGAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PARTIALAUTH">
            <summary>
            Payflow Param PARTIALAUTH
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_EXTRSPMSG">
            <summary>
            Payflow Param EXTRSPMSG
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SECURETOKEN">
            <summary>
            Payflow Param SECURETOKEN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SECURETOKENID">
            <summary>
            Payflow Param SECURETOKENID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CREATESECURETOKEN">
            <summary>
            Payflow Param CREATESECURETOKEN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VISACARDLEVEL">
            <summary>
            Payflow Param VISACARDLEVEL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ALLOWNOTE">
            <summary>
            Payflow Param ALLOWNOTE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REQBILLINGADDRESS">
            <summary>
            Payflow Param REQBILLINGADDRESS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SHIPTONAME">
            <summary>
            Payflow Param SHIPTONAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ORDERID">
            <summary>
            Payflow Param ORDERID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER1">
            <summary>
            Payflow Param USER1
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER2">
            <summary>
            Payflow Param USER2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER3">
            <summary>
            Payflow Param USER3
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER4">
            <summary>
            Payflow Param USER4
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER5">
            <summary>
            Payflow Param USER5
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER6">
            <summary>
            Payflow Param USER6
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER7">
            <summary>
            Payflow Param USER7
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER8">
            <summary>
            Payflow Param USER8
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER9">
            <summary>
            Payflow Param USER9
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_USER10">
            <summary>
            Payflow Param USER10
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TRACEID">
            <summary>
            Payflow Param TRACEID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACHSTATUS">
            <summary>
            Payflow Param ACHSTATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CARDONFILE">
            <summary>
            Payflow Param CARDONFILE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TXID">
            <summary>
            Payflow Param TXID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAYMENTADVICECODE">
            <summary>
            Payflow Param PAYMENTADVICECODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ASSOCIATIONRESPCODE">
            <summary>
            Payflow Param ASSOCIATIONRESPCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_TYPE">
            <summary>
            Payflow Param TYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AFFLUENT">
            <summary>
            Payflow Param AFFLUENT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CCUPDATED">
            <summary>
            Payflow Param CCUPDATED
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RRN">
            <summary>
            Payflow Param RRN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STAN">
            <summary>
            Payflow Param STAN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACI">
            <summary>
            Payflow Param ACI
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VALIDATIONCODE">
            <summary>
            Payflow Param VALIDATIONCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTLOCATIONID">
            <summary>
            Payflow Param MERCHANTLOCATIONID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTID">
            <summary>
            Payflow Param MERCHANTID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTCONTACTINFO">
            <summary>
            Payflow Param MERCHANTCONTACTINFO
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CCTRANSID">
            <summary>
            Payflow Param CCTRANSID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CCTRANS_POSDATA">
            <summary>
            Payflow Param CCTRANS_POSDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHDATE">
            <summary>
            Payflow Param AUTHDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTURL">
            <summary>
            Payflow Param MERCHANTURL
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTVATNUM">
            <summary>
            Payflow Param MERCHANTVATNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTINVNUM">
            <summary>
            Payflow Param MERCHANTINVNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATINVNUM">
            <summary>
            Payflow Param VATINVNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATTAXRATE">
            <summary>
            Payflow Param VATTAXRATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REPORTGROUP">
            <summary>
            Payflow Param REPORTGROUP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXAMT">
            <summary>
            Payflow Param L_ALTTAXAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXID">
            <summary>
            Payflow Param L_ALTTAXID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXRATE">
            <summary>
            Payflow Param L_ALTTAXRATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_CARRIERSERVICELEVELCODE">
            <summary>
            Payflow Param L_CARRIERSERVICELEVELCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_EXTAMT">
            <summary>
            Payflow Param L_EXTAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDLAMT">
            <summary>
            Payflow Param LADDLAMT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDLAMTTYPE">
            <summary>
            Payflow Param ADDLAMTTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CATTYPE">
            <summary>
            Payflow Param CATTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CONTACTLESS">
            <summary>
            Payflow Param CONTACTLESS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTDATA">
            <summary>
            Payflow Param CUSTDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTOMERID">
            <summary>
            Payflow Param CUSTOMERID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTOMERNUMBER">
            <summary>
            Payflow Param CUSTOMERNUMBER
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MISCDATA">
            <summary>
            Payflow Param MISCDATA
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CREATIONDATE">
            <summary>
            Payflow Param CREATIONDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_LASTCHANGED">
            <summary>
            Payflow Param LASTCHANGED
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RPSTATE">
            <summary>
            Payflow Param RPSTATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_NEXTPAYMENTNUM">
            <summary>
            Payflow Param NEXTPAYMENTNUM
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_SCAEXEMPTION">
            <summary>
            Payflow Param SCAEXEMPTION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CITDATE">
            <summary>
            Payflow Param CITDATE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VMAID">
            <summary>
            Payflow Param VMAID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PAR">
            <summary>
            Payflow Param VMAID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_PARID">
            <summary>
            Payflow Param VMAID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCMP">
            <summary>
            Magtek Param ENCMP
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCRYPTIONBLOCKTYPE">
            <summary>
            Magtek Param ENCRYPTIONBLOCKTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCTRACK1">
            <summary>
            Magtek Param ENCTRACK1
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCTRACK2">
            <summary>
            Magtek Param ENCTRACK2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCTRACK3">
            <summary>
            Magtek Param ENCTRACK3
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_KSN">
            <summary>
            Magtek Param KSN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MAGTEKCARDTYPE">
            <summary>
            Magtek Param MAGTEKCARDTYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MPSTATUS">
            <summary>
            Magtek Param MPSTATUS
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_REGISTEREDBY">
            <summary>
            Magtek Param REGISTEREDBY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_SWIPEDECRHOST">
            <summary>
            Magtek Param SWIPEDECRHOST
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_DEVICESN">
            <summary>
            Magtek Param DEVICESN
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MERCHANTID">
            <summary>
            Magtek Param MERCHANTID
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_PAN4">
            <summary>
            Magtek Param PAN4
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_PCODE">
            <summary>
            Magtek Param PCODE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_AUTHVALUE1">
            <summary>
            Magtek Param AUTHVALUE1
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_AUTHVALUE2">
            <summary>
            Magtek Param AUTHVALUE2
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_AUTHVALUE3">
            <summary>
            Magtek Param AUTHVALUE3
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MAGTEKUSERNAME">
            <summary>
            Magtek Param MAGTEKUSERNAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MAGTEKPWD">
            <summary>
            Magtek Param MAGTEKUSERPWD
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_MAGTRESPONSE">
            <summary>
            Magtek Param MAGTRESPONSE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_CLIENT_DURATION">
            <summary>
            Constant for PAYFLOW-CLIENT-DURATION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_CLIENT_VERSION">
            <summary>
            Constant for PAYFLOW-CLIENT-VERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_OS_ARCHITECTURE">
            <summary>
            Constant for PAYFLOW-OS-ARCHITECTURE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_OS_NAME">
            <summary>
            Constant for PAYFLOW-OS-NAME
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_OS_VERSION">
            <summary>
            Constant for PAYFLOW-OS-VERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_PROXY">
            <summary>
            Constant for PAYFLOW-PROXY
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_RUNTIME_VERSION">
            <summary>
            Constant for PAYFLOW-RUNTIME-VERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_INTEGRATION_PRODUCT">
            <summary>
            Constant for PAYFLOW-INTEGRATION-PRODUCT
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_INTEGRATION_VERSION">
            <summary>
            Constant for PAYFLOW-INTEGRATION-VERSION
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_CLIENT_TYPE">
            <summary>
            Constant for PAYFLOW-CLIENT-TYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PAYFLOWHEADER_ASSEMBLY">
            <summary>
            Constant for PAYFLOW-CLIENT-TYPE
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_SET">
            <summary>
            Set Action (S)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_GET">
            <summary>
            Get Action (G)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_DO">
            <summary>
            Do Action (D)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_UPDATEBA">
            <summary>
            Update Action (U)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_SETBA">
            <summary>
            SetBA Action (Z)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_GETBA">
            <summary>
            GETBA Action (W)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.ACTIONTYPE_DOBA">
            <summary>
            DOBA Action (X)
            </summary>
        </member>
        <member name="T:PayPal.Payments.Common.Utility.PayflowUtility">
            <summary>
            Utility class
            </summary>
        </member>
        <member name="F:PayPal.Payments.Common.Utility.PayflowUtility.mTraceInitialized">
            <summary>
            This is used to check whether constant for 
            TRACE is intialized already or not.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.Utility.PayflowUtility.RequestId">
            <summary>
            Generates Request Id
            </summary>
        </member>
        <member name="P:PayPal.Payments.Common.Utility.PayflowUtility.TraceInitialized">
            <summary>
            Gets, sets mTraceInitialized
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.#ctor">
            <summary>
            Constructor for PayflowUtility
            </summary>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.AppendToRequest(System.String,System.Object)">
            <summary>
            Appends a name value pair to request
            </summary>
            <param name="Name">Payflow  param name</param>
            <param name="Value">Value</param>
            <returns>Formatted name value pair string</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.LocateValueForName(System.String,System.String,System.Boolean)">
            <summary>
            Locates value from name value pair and masks or
            returns it.
            </summary>
            <param name="ParamList">Paramalist</param>
            <param name="Name">Payflow  Param name</param>
            <param name="MaskFoundValue">true if sensitive fields from the param list need to be masked,
             false if need to extract a param value from param list</param>
            <returns>Param Value if MaskFoundValue is false, Masked param list if MaskFoundValue is true</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.IsTimedOut(System.Int64,System.Int64,System.Int64@)">
            <summary>
            Check if timeout has occurred
            </summary>
            <param name="TimeOutMsec">Time out in Msec</param>
            <param name="StartTimeMsec">Start time in Msec</param>
            <param name="TimeRemainingMsec">out Time remaining in Msec</param>
            <returns>True if Timed out, false otherwise</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetXmlVersion(System.String)">
            <summary>
            Retrieves XmlPay version from Xml Pay Request.
            </summary>
            <param name="Request">Xml Pay Request.</param>
            <returns>String Value of version</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetXmlAttribute(System.String,System.String)">
            <summary>
            Retrieves value of given Xml attribute from Xml Pay Request.
            </summary>
            <param name="Request">Xml Pay Request</param>
            <param name="Attribute">Attribute Tag Name</param>
            <returns></returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetXmlNameSpace(System.String)">
            <summary>
            Gets the Xml Namespace from the XmlPay Request.
            </summary>
            <param name="Request">Xml Pay Request.</param>
            <returns>String Value of Xml Namespace.</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetXmlNodeValue(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the inner text from an xml node.
            </summary>
            <param name="XmlPayRequest">XmlPay Request loaded in System.Xml.XmlDocument.</param>
            <param name="NodeName">Node Name</param>
            <returns>Inner text in node.</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.PopulateCommError(System.String,System.Exception,System.Int32,System.Boolean,System.String)">
            <summary>
            Populates Errors from Exceptions.
            </summary>
            <param name="CommMessageCode">Error Message Code</param>
            <param name="Ex">Occurred Exception, pass null if no Exception.</param>
            <param name="AddMessage">Additional Message</param>
            <param name="IsXmlPayReq">True if request is xml pay request, false otherwise</param>  
            <param name="SeverityLevel">Severity Level</param>
            <returns>Populated ErrorObject.</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.MaskSensitiveFields(System.String)">
            <summary>
            Masks the sensitive fields in the
            param list which will be used for
            logging purpose.
            </summary>
            <param name="ParmList">Paramlist to be masked.</param>
            <returns>Masked param list.</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.MaskXMLPayRequest(System.String)">
            <summary>
            Masks XMLPay Request
            </summary>
            <param name="ParmList">XMLPay request to be masked</param>
            <returns>Masked XMLPay Request</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.MaskNVPRequest(System.String)">
            <summary>
            Masks the NVP request
            </summary>
            <param name="ParmList">Param List to be masked</param>
            <returns>Masked Param List</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.MaskXmlNodeValue(System.Xml.XmlDocument@,System.String)">
            <summary>
            This method replaces the inner text of the node NodeName in the XMLPayRequest xml document with XXXXX
            </summary>
            <param name="XmlPayRequest">This is the XML Document</param>
            <param name="NodeName">This is the node name whose inner text is to be masked</param>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetStatus(PayPal.Payments.DataObjects.Response)">
            <summary>
            Provides the status of the transaction based on the transaction response.
            </summary>
            <param name="Resp">Response obtained from PayPal Payment Gateway.</param>
            <returns>String result for the transaction:
            <list type="bullet">
            <item>If Transaction Result = 0  then Transaction Successful.</item>
            <item>If Transaction Result != 0 then Transaction Failed.</item>
            </list>
            </returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetStatus(System.String)">
            <summary>
            Provides the status of the transaction based on the transaction responses.
            </summary>
            <param name="TransactionResponse">Transaction response string obtained from PayPal Payment Gateway.</param>
            <returns>String result for the transaction:
            <list type="bullet">
            <item>If Transaction Result = 0 Transaction Successful.</item>
            <item>If Transaction Result != 0 then Transaction Failed.</item>
            </list>
            </returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetTransactionStatus(PayPal.Payments.DataObjects.Response)">
            <summary>
            Returns a boolean value indicating the status of the transaction
            </summary>
            <param name="Resp">Response obtained from PayPal Payment Gateway.</param>
            <returns>true if transaction was success</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.GetXmlPayNodeValue(System.String,System.String)">
            <summary>
            Gets the inner text of a node from an XMLPay request
            </summary>
            <param name="XmlPayRequest">XMLPay request string</param>
            <param name="NodeName">Node name</param>
            <returns>Inner text string</returns>
        </member>
        <member name="M:PayPal.Payments.Common.Utility.PayflowUtility.AppSettings(System.String)">
            <summary>
            Returns AppSettings
            </summary>
            <param name="AppSettingsKey"></param>
            <returns></returns>
        </member>
        <member name="T:PayPal.Payments.Communication.InitState">
            <summary> InitState - PayPal Payment State</summary>
        </member>
        <member name="M:PayPal.Payments.Communication.InitState.#ctor(PayPal.Payments.Communication.PaymentConnection,System.String,PayPal.Payments.Common.Context@)">
            <summary>
            Constructor for InitState.
            </summary>
            <param name="connection">PaymentConnection Object.</param>
            <param name="InitialParameterList">Initial Parameter list.</param>
            <param name="PsmContext">Context Object by ref</param>
        </member>
        <member name="M:PayPal.Payments.Communication.InitState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor for InitState.
            </summary>
            <param name="CurrentPaymentState">PaymentState Object.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.InitState.Execute">
            <summary>
            Sets the appropriate server file path for the connection
            and initializes the connection uri.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.NamespaceDoc">
             <summary>
            NameSpace doc for Communications namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.PayflowNETAPI">
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PayflowNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PayflowNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PayflowNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PayflowNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
             </code>
             <code lang="Visual Basic" escaped="false">
            		' Sample Request. 
            		' Please replace user, vendor, password &amp; partner with your merchant information.
            		Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
            		' Create an instance of PayflowNETAPI.
            		Dim PayflowNetApi As PayflowNETAPI = new PayflowNETAPI
             
            		' RequestId is a unique string that is required for each &amp; every transaction. 
            		' The merchant can use her/his own algorithm to generate this unique request id or 
            		' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
            		Dim Response As String = PayflowNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
            		' To write the Response on to the console.
            		Console.WriteLine(Environment.NewLine + "Request = " + PayflowNetApi.TransactionRequest)
            		Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
            		' Following lines of code are optional. 
            		' Begin optional code for displaying SDK errors ...
            		' It is used to read any errors that might have occurred in the SDK.
             
            		Dim TransErrors As String = PayflowNetApi.TransactionContext.ToString()
            		If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
            			Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
            		End If
             </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mPaymentStateMachine">
            <summary>
            PaymentStateMachine object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mRequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mHostAddress">
            <summary>
            Host Address
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mHostPort">
            <summary>
            Host Port
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mTimeOut">
            <summary>
            TimeOut
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mProxyAddress">
            <summary>
            Proxy Address
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mProxyPort">
            <summary>
            Proxy Port
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mProxyLogon">
            <summary>
            Proxy Logon
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mProxyPassword">
            <summary>
            Proxy Password
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mTransactionContext">
            <summary>
            Transaction Context
            </summary>p
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mTransactionRequest">
            <summary>
            Transaction Request 
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mTransactionResponse">
            <summary>
            Transaction Response
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mIsStrongAssemblyTransaction">
            <summary>
            Flag for Strong Assembly Transaction;
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mIsXmlPayRequest">
            <summary>
            Flag for xml pay request
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mTransRqst">
            <summary>
            Transaction request withought masking
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PayflowNETAPI.mClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor">
             <summary>
             PayflowNETAPI Constructor
             </summary>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	   String TransErrors = PfProNetApi.TransactionContext.ToString();
            	   if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	   {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	   }
            	   
                // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
             <summary>
             PayflowNETAPI Constructor
             </summary>
             <param name="HostAddress">Payflow Host Address.</param>
             <param name="HostPort">Payflow Host Port.</param>
             <param name="TimeOut">Transaction Timeout.</param>
             <param name="ProxyAddress">Proxy Address.</param>
             <param name="ProxyPort">Proxy Port.</param>
             <param name="ProxyLogon">Proxy Logon Id.</param>
             <param name="ProxyPassword">Proxy Password.</param>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PfProNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor(System.String,System.Int32)">
             <summary>
             PayflowNETAPI Constructor
             </summary>
             <param name="HostAddress">Payflow Host Address.</param>
             <param name="HostPort">Payflow Host Port.</param>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PfProNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
             <summary>
             PayflowNETAPI Constructor
             <param name="HostAddress">Payflow Host Address.</param>
             <param name="HostPort">Payflow Host Port.</param>
             <param name="ProxyAddress">Proxy Address.</param>
             <param name="ProxyPort">Proxy Port.</param>
             <param name="ProxyLogon">Proxy Logon Id.</param>
             <param name="ProxyPassword">Proxy Password.</param>
            </summary>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PfProNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor(System.String,System.Int32,System.Int32)">
             <summary>
             PayflowNETAPI Constructor
             </summary>
             <param name="HostAddress">Payflow Host Address.</param>
             <param name="HostPort">Payflow Host Port.</param>
             <param name="TimeOut">Transaction Timeout.</param>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PfProNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.#ctor(System.String)">
             <summary>
              PayflowNETAPI Constructor
             </summary>
             <param name="HostAddress">Payflow Host Address.</param>
             <summary>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>PAYFLOW_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction timeout</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PfProNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PfProNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	    	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
             ' Sample Request. 
             ' Please replace user, vendor, password &amp; partner with your merchant information.
             Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
             ' Create an instance of PayflowNETAPI.
             Dim PfProNetApi As PayflowNETAPI = new PayflowNETAPI
             
             ' RequestId is a unique string that is required for each &amp; every transaction. 
             ' The merchant can use her/his own algorithm to generate this unique request id or 
             ' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
             Dim Response As String = PfProNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
             ' To write the Response on to the console.
             Console.WriteLine(Environment.NewLine + "Request = " + PfProNetApi.TransactionRequest)
             Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
             ' Following lines of code are optional. 
             ' Begin optional code for displaying SDK errors ...
             ' It is used to read any errors that might have occurred in the SDK.
             
             Dim TransErrors As String = PfProNetApi.TransactionContext.ToString()
             If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
               Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
             End If
             
             'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.RequestId">
            <summary>
            Gets the Request Id.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.TransactionContext">
            <summary>
            Gets the Transaction Context object.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.TransactionResponse">
            <summary>
            Gets the Transaction response.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.TransactionRequest">
            <summary>
            Gets the Transaction request.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.IsStrongAssemblyTransaction">
            <summary>
            Gets, Sets flag for Strong Assembly
            Transaction.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.Version">
            <summary>
            Gets the PayflowNETAPI Client Version.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PayflowNETAPI.ClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.SetParameters(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            SetParameters will be used to initialize the different parameters passed by the user. This has been kept 
            as a public function since this needs to be called by the COM implementation. This is an undocumented 
            functionionality which the pure dotNET client are not suppose to use.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.SubmitTransaction(System.String,System.String)">
             <summary>
             <para>Submits a transaction to Payflow Server.</para>
             PayflowNETAPI is used to submit a Name-value pair or XMLPay request to
             PayPal payment gateway for online payment processing. The response 
             returned is the string value of the response from the PayPal payment 
             gateway.
             </summary>
             <param name="ParamList">Parameter list.</param>
             <param name="RequestId">Request Id</param>
             <returns>String value of transaction response.</returns>
             <remarks>Instance of PayflowNETAPI initialized with the information related 
             to connection to the PayPal payment gateway.
             If the empty constructor of this class is used to create the object or 
             passed values are empty, then The following values (if empty) 
             are looked for as follows:
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>From Internal Default</description>
             <description>From App.config key</description>
             </listheader>
             <item>
             <term>Payflow Host</term>
             <description>NA</description>
             <description>Payflow_HOST</description>
             </item>
             <item>
             <term>Payflow Port</term>
             <description>443</description>
             <description>NA</description>
             </item>
             <item>
             <term>Transaction TimeOut</term>
             <description>45 seconds</description>
             <description>NA</description>
             </item>
             </list>
             </remarks>
             <example>
             <code lang="C#" escaped="false">
            	/// ..........
             	// Sample Request. 
             	// Please replace user, vendor, password &amp; partner with your merchant information.
             	String Request = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            
             	// Create an instance of PayflowNETAPI.
             	PayflowNETAPI PayflowNetApi = new PayflowNETAPI();
            
             	// RequestId is a unique string that is required for each &amp; every transaction. 
             	// The merchant can use her/his own algorithm to generate this unique request id or 
             	// use the SDK provided API to generate this as shown below (PayflowUtility.RequestId).
             	String Response = PayflowNetApi.SubmitTransaction(Request, PayflowUtility.RequestId);
            
             	// To write the Response on to the console.
             	Console.WriteLine(Environment.NewLine + "Request = " + PayflowNetApi.TransactionRequest);
             	Console.WriteLine(Environment.NewLine + "Response = " + Response);
            
             	// Following lines of code are optional. 
             	// Begin optional code for displaying SDK errors ...
             	// It is used to read any errors that might have occurred in the SDK.
            
            	    String TransErrors = PayflowNetApi.TransactionContext.ToString();
            	    if (TransErrors != null &amp;&amp; TransErrors.Length > 0)	
            	    {
            	     	Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors);
            	    }
            	   
                 // End optional code for displaying SDK errors.
            
             </code>
             <code lang="Visual Basic" escaped="false">
            		' Sample Request. 
            		' Please replace user, vendor, password &amp; partner with your merchant information.
            		Dim Request As String = "TRXTYPE=S&amp;ACCT=5105105105105100&amp;EXPDATE=0115&amp;TENDER=C&amp;INVNUM=INV12345&amp;AMT=25.12&amp;PONUM=PO12345&amp;STREET=123 Main St.&amp;ZIP=12345&amp;USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
             
            		' Create an instance of PayflowNETAPI.
            		Dim PayflowNetApi As PayflowNETAPI = new PayflowNETAPI
             
            		' RequestId is a unique string that is required for each &amp; every transaction. 
            		' The merchant can use her/his own algorithm to generate this unique request id or 
            		' use the SDK provided API to generate this as shown below (PayflowUtility.GetRequestId()).
            		Dim Response As String = PayflowNetApi.SubmitTransaction(Request, PayflowUtility.RequestId)
             
            		' To write the Response on to the console.
            		Console.WriteLine(Environment.NewLine + "Request = " + PayflowNetApi.TransactionRequest)
            		Console.WriteLine(Environment.NewLine + "Response = " + Response)
             
            		' Following lines of code are optional. 
            		' Begin optional code for displaying SDK errors ...
            		' It is used to read any errors that might have occurred in the SDK.
             
            		Dim TransErrors As String = PayflowNetApi.TransactionContext.ToString()
            		If (Not TransErrors Is Nothing And TransErrors.Length > 0) Then
            			Console.WriteLine(Environment.NewLine + "Transaction Errors from SDK = " + TransErrors)
            		End If
             
            		'End optional code for displaying SDK errors.
             </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.InitDefaultValues">
            <summary>
            Initializes the default connection values
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.CheckTransactionArgs(System.String,System.String)">
            <summary>
            Checks the vital transaction arguments
            for null or empty and populates context
            accordingly.
            </summary>
            <param name="ParamList">Param list</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.AddTransHeader(System.String,System.String)">
            <summary>
            Adds a Transaction header
            </summary>
            <param name="HeaderName">Header Name</param>
            <param name="HeaderValue">Header Value</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.RemoveTransHeader(System.String)">
            <summary>
            Removes a Transaction header
            </summary>
            <param name="HeaderName">Header Name</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.RemoveHeader(System.String)">
            <summary>
            Removes a header
            </summary>
            <param name="HeaderName">Header Name</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.AddHeader(System.String,System.String)">
            <summary>
            Adds a header
            </summary>
            <param name="HeaderName">Header name</param>
            <param name="HeaderValue">Header value</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.Equals(System.Object)">
            <summary>
            This function overides the System.Object.Equals function.
            </summary>
            <param name="obj">Object which needs to be compared.</param>
            <returns>Returns the boolean value indicating if the Object passed is equal to the current object.
            </returns>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.GetHashCode">
            <summary>
            This function overides the System.Object.GetHashCode function.
            </summary>
            <returns>Returns the HashCode for the current instance.
            </returns>
        </member>
        <member name="M:PayPal.Payments.Communication.PayflowNETAPI.ToString">
            <summary>
            This function overides the System.Object.ToString function.
            </summary>
            <returns>Returns the String representation of the current instance.
            </returns>
        </member>
        <member name="T:PayPal.Payments.Communication.PaymentConnection">
            <summary>
            This is the Connection Class.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mIsProxy">
            <summary>
            Holds whether transaction is
            with or without proxy.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mHostAddress">
            <summary>
            Payflow  Host Address
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mHostPort">
            <summary>
            Payflow  Host Port
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mServerUri">
            <summary>
            Payflow  Server Uri object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mServerConnection">
            <summary>
            Connection object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyAddress">
            <summary>
            Proxy Address.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyPort">
            <summary>
            Proxy Port
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyLogon">
            <summary>
            Proxy Logon Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyPassword">
            <summary>
            Proxy Password
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mConnectionTimeOut">
            <summary>
            Connection TimeOut Value.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mStartTime">
            <summary>
            Transaction start time.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mRequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mContentType">
            <summary>
            Param List Content Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyInfo">
            <summary>
            Proxy Object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mIsXmlPayRequest">
            <summary>
            Flag for XmlPay Request Type.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mContext">
            <summary>
            Context object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentConnection.mProxyStatus">
            <summary>
            Status of proxy connection. 
            False if proxy host address is  not parsed successfully.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.IsProxy">
            <summary>
            Gets whether transaction
            is with or without proxy.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.ContentType">
            <summary>
            Gets, Sets the param list
            content type.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.RequestId">
            <summary>
            Gets, Sets Request Id.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.StartTime">
            <summary>
            Gets the StartTime of the
            transaction.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.TimeOut">
            <summary>
            Gets, Sets the timeout
            value of transaction.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.ConnContext">
            <summary>
            Gets the Connection
            context object.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.IsXmlPayRequest">
            <summary>
            Gets, Sets XmlPay Request type flag.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentConnection.ClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.#ctor(PayPal.Payments.Common.Context@)">
            <summary>
            Constructor for PaymentConnection.
            </summary>
            <param name="PsmContext">Context object by reference.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.InitializeHost(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes Connection Host Attributes.
            </summary>
            <param name="HostAddress">String Value of Host Address.</param>
            <param name="HostPort">Host port as positive integer.</param>
            <param name="TimeOut">Connection Timeout in Seconds.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.InitializeProxy(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes proxy Attributes
            </summary>
            <param name="ProxyAddress">String Value of Proxy Address.</param>
            <param name="ProxyPort">Proxy port as positive integer.</param>
            <param name="ProxyLogon">String Value of Proxy User Id.</param>
            <param name="ProxyPassword">String Value of Proxy Password.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.InitializeConnection(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes Connection from Connection Attributes.
            </summary>
            <param name="HostAddress">String Value of Host Address.</param>
            <param name="HostPort">Host port as positive integer.</param>
            <param name="TimeOut">Connection Timeout in Seconds.</param>
            <param name="ProxyAddress">String Value of Proxy Address. Pass null if not applicable.</param>
            <param name="ProxyPort">Proxy port as positive integer.Pass 0 if not applicable.</param>
            <param name="ProxyLogon">String Value of Proxy User Id.Pass null if not applicable.</param>
            <param name="ProxyPassword">String Value of Proxy Password.Pass null if not applicable.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.InitServerUri">
            <summary>
            Initialized the Server Uri object from
            available connection attributes.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.InitProxyInfo">
            <summary>
            Initializes Proxy Object from
            available proxy information.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.CreateConnection">
            <summary>
            Initializes all the connection attributes and creates the connection.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.ConnectToServer">
            <summary>
            Initializes the Server Connection.
            </summary>
            <returns>True if success, False otherwise.</returns>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.SendToServer(System.String)">
            <summary>
            Sends the request to the server.
            </summary>
            <param name="Request">String Value of request.</param>
            <returns>True if success, False otherwise.</returns>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.ReceiveResponse">
            <summary>
            Receives the transaction response from
            the server. 
            </summary>
            <returns>String Value of Response.</returns>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentConnection.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.PaymentState">
            <summary>
            This is the abstract Base class for all payment states.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mDefaultXmlNameSpace">
            <summary>
            This is the default XMLPay namespace.
            </summary>
            <remarks>
            <para>Maps to default value:
            <code>http://www.paypal.com/XMLPay</code></para>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.PFProXmlNameSpace">
            <summary>
            Payflow XMLPay namespace.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mContentType">
            <summary>
            Param list content type.
            </summary>
            <remarks>
            Allowed content types are:
            <list type="table">
            <listheader>
            <term>Content Type</term>
            <description>Expected Value</description>
            </listheader>
            <item>
            <term>Name Value Pair</term>
            <description>text/namevalue</description>
            </item>
            <item>
            <term>XML Pay</term>
            <description>text/xml</description>
            </item>
            </list>
            <para>Maps to HTTP Header <code>CONTENT-TYPE</code></para>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mConnection">
            <summary>
            Connection object.
            </summary>
            <remarks>This connection object takes care of
            initializing, connecting, sending and receiving data
            from the Payflow server.
            <seealso cref="T:PayPal.Payments.Communication.PaymentConnection"/>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mParameterList">
            <summary>
            Parameter List.
            </summary>
            <remarks>This is the parameter list in Name-Value Pair or XMLPay format.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mTransactionRequest">
            <summary>
            Transaction Request.
            </summary>
            <remarks>Transaction Request in Name-Value Pair or XMLPay format.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mTransactionResponse">
            <summary>
            Transaction Response.
            </summary>
            <remarks>Transaction Response in Name-Value Pair or XMLPay format.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mAttemptNo">
            <summary>
            Retry Attempt number.
            </summary>
            <remarks>This retry number is the current retry attempt. The maximum number of
            retries allowed are given by constant MAX_RETRY in PayflowConstants.</remarks>
            <seealso paramref="PayflowConstants.MAX_RETRY"/>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mInProgress">
            <summary>
            In Progress flag.
            </summary>
            <remarks>This indicates whether the current transaction is in progress or not.
            True indicates in progress, false otherwise.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mStateExecuted">
            <summary>
            State executed flag.
            </summary>
            <remarks>This indicates whether the current state has finished its execution.
            True indicates executed, false otherwise.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mStateSucceeded">
            <summary>
            State Success flag.
            </summary>
            <remarks>This indicates whether the current state has succeeded.
            True indicates succeeded, false otherwise.</remarks>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentState.mContext">
            <summary>
            Context object.
            </summary>
            <remarks>This is the context object which is passed by reference in the constructor. This is to 
            maintain a single context across the whole transaction.</remarks>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.Connection">
            <summary>
            Gets the connection object.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	PaymentConnection Connection = 
            						CurrentPaymentState.Connection;
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Dim Connection As PaymentConnection = 
            						CurrentPaymentState.Connection
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.ParameterList">
            <summary>
            Gets the param list.
            </summary>
            <remarks>This is the parameter list in Name-Value Pair or XMLPay format.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	Console.WriteLine("Parameter List = " + CurrentPaymentState.ParameterList);
            	
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Console.WriteLine("Parameter List = " + CurrentPaymentState.ParameterList)
            	
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.TransactionRequest">
            <summary>
            Gets, Sets the transaction Request.
            </summary>
            <remarks>Transaction Request in Name-Value Pair or XMLPay format.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	CurrentPaymentState.TransactionRequest = 
            		"TRXTYPE[1]=S&amp;ACCT[16]=5105105105105100&amp;EXPDATE[4]=0115&amp;TENDER[1]=C&amp;INVNUM[8]=INV12345&amp;AMT[5]=25.12
            		&amp;PONUM[7]=PO12345&amp;STREET[23]=123 Main St.&amp;ZIP[5]=12345&amp;
            		USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password";
            			
            	Console.WriteLine("Transaction Request = " + CurrentPaymentState.TransactionRequest);
            			
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	CurrentPaymentState.TransactionRequest = 
            		"TRXTYPE[1]=S&amp;ACCT[16]=5105105105105100&amp;EXPDATE[4]=0115&amp;TENDER[1]=C&amp;INVNUM[8]=INV12345&amp;AMT[5]=25.12
            		&amp;PONUM[7]=PO12345&amp;STREET[23]=123 Main St.&amp;ZIP[5]=12345&amp;
            		USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password"
            			
            	Console.WriteLine("Transaction Request = " + CurrentPaymentState.TransactionRequest)
            	
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.TransactionResponse">
            <summary>
            Gets, Sets the transaction response.
            </summary>
            <remarks>Transaction Response in Name-Value Pair or XMLPay format.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	CurrentPaymentState.TransactionResponse = 
            		"RESULT=0&amp;PNREF=XXXXXXXXXXXX&amp;RESPMSG=Approved";
            		
            	Console.WriteLine("Transaction Response = " + CurrentPaymentState.TransactionResponse);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	CurrentPaymentState.TransactionResponse = 
            		"RESULT=0&amp;PNREF=XXXXXXXXXXXX&amp;RESPMSG=Approved"
            		
            	Console.WriteLine("Transaction Response = " + CurrentPaymentState.TransactionResponse)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.AttemptNo">
            <summary>
            Gets the retry attempt no.
            </summary>
            <remarks>This retry number is the current retry attempt. The maximum number of
            retries allowed are given by constant MAX_RETRY in PayflowConstants.</remarks>
            <seealso paramref="PayflowConstants.MAX_RETRY"/>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	int CurrentAttempt = CurrentPaymentState.AttemptNo;
            	
            	Console.WriteLine("Current Attempt Number = {0}",CurrentAttempt);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Dim CurrentAttempt As Integer = CurrentPaymentState.AttemptNo
            	
            	Console.WriteLine("Current Attempt Number = " + CurrentAttempt)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.ContentType">
            <summary>
            Gets the param list content type.
            </summary>
            <remarks>
            Allowed content types are:
            <list type="table">
            <listheader>
            <term>Content Type</term>
            <description>Expected Value</description>
            </listheader>
            <item>
            <term>Name Value Pair</term>
            <description>text/namevalue</description>
            </item>
            <item>
            <term>XML Pay</term>
            <description>text/xml</description>
            </item>
            </list>
            <para>Maps to HTTP Header <code>CONTENT-TYPE</code></para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	Console.WriteLine("Request Content Type = " + CurrentPaymentState.ContentType);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Console.WriteLine("Request Content Type = " + CurrentPaymentState.ContentType)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.IsXmlPayRequest">
            <summary>
            Gets the XmlPay Request type flag.
            </summary>
            <remarks>This indicates whether the transaction request is of type Name-Value pair or
            XMLPay request. True if XMLPay request, false if Name-Value pair.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.IsXmlPayRequest)
            	{
            		Console.WriteLine("Request Type = XML Pay request");
            	}
            	else
            	{
            		Console.WriteLine("Request Type = Name-value pair request");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.IsXmlPayRequest)
            	{
            		Console.WriteLine("Request Type = XML Pay request")
            	}
            	Else
            	{
            		Console.WriteLine("Request Type = Name-value pair request")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.DefaultXmlNameSpace">
            <summary>
            Gets the Default Xml Namespace.
            </summary>
            <remarks>
            <para>Maps to default value:
            <code>http://www.paypal.com/XMLPay</code></para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	
            	Console.WriteLine("Default Xml Namespace = " + CurrentPaymentState.DefaultXmlNameSpace);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Console.WriteLine("Default Xml Namespace = " + CurrentPaymentState.DefaultXmlNameSpace)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.CommContext">
            <summary>
            Gets the Context Object.
            </summary>
            <remarks>This is the context object which is passed by reference in the constructor. This is to 
            maintain a single context across the whole transaction.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	
            	Context CommContext = CurrentPaymentState.CommContext;
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Dim CommContext As Context = CurrentPaymentState.CommContext
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.HaveRequestId">
            <summary>
            Checks if the Request has Request Id value.
            </summary>
            <returns>True if Request id is Found, False otherwise.</returns>
            <remarks>This indicates whether request id is obtained, true if obtained, false otherwise.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.HaveRequestId)
            	{
            		Console.WriteLine("RequestId obtained.");
            	}
            	else
            	{
            		Console.WriteLine("RequestId not obtained.");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.HaveRequestId)
            	{
            		Console.WriteLine("RequestId obtained.")
            	}
            	Else
            	{
            		Console.WriteLine("RequestId not obtained.")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.XmlNameSpace">
            <summary>
            Gets Xml Name Space
            </summary>
            <returns>Xml Name Space Value.</returns>
            <remarks>This gives the Xml namespace value for the current transaction. 
            Generally, this is set to default namespace value i.e.
            <code>http://www.paypal.com/XMLPay</code>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	
            	Console.WriteLine("Xml Namespace = " + CurrentPaymentState.XmlNameSpace);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	' CurrentPaymentState is the
            	' PaymentState object.
            	
            	Console.WriteLine("Xml Namespace = " + CurrentPaymentState.XmlNameSpace)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.HasResponse">
            <summary>
            Checks if Response is obtained.
            </summary>
            <returns>True if Response if obtained, False otherwise.</returns>
            <remarks>This indicates whether response is obtained. True if obtained, false otherwise.</remarks>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.InProgress">
            <summary>
            Indicates if transaction is in progress.
            </summary>
            <returns>True if in progress, False otherwise.</returns>
            <remarks>This indicates whether the current transaction is in progress or not.
            True indicates in progress, false otherwise.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.InProgress)
            	{
            		Console.WriteLine("Transaction in progress.");
            	}
            	else
            	{
            		Console.WriteLine("Transaction not in progress.");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.InProgress)
            	{
            		Console.WriteLine("Transaction in progress.")
            	}
            	Else
            	{
            		Console.WriteLine("Transaction not in progress.")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.Success">
            <summary>
            Indicates current state success..
            <remarks>This indicates whether the current state has succeeded.
            True indicates succeeded, false otherwise.</remarks>
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.Success)
            	{
            		Console.WriteLine("Current state succeeds.");
            	}
            	else
            	{
            		Console.WriteLine("Current state does not succeed.");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.Success)
            	{
            		Console.WriteLine("Current state succeeds.")
            	}
            	Else
            	{
            		Console.WriteLine("Current state does not succeed.")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.Failed">
            <summary>
            Current state failure.
            <remarks>This indicates whether the current state has failed.
            True indicates failed, false otherwise.</remarks>
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.Failed)
            	{
            		Console.WriteLine("Current state fails.");
            	}
            	else
            	{
            		Console.WriteLine("Current state does not fail.");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.Failed)
            	{
            		Console.WriteLine("Current state fails.")
            	}
            	Else
            	{
            		Console.WriteLine("Current state does not fail.")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.HasExecuted">
            <summary>
            Returns state executed.
            </summary>
            <example>
            <remarks>This indicates whether the current state has finished its execution.
            True indicates executed, false otherwise.</remarks>
            <code lang="C#" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	if(CurrentPaymentState.HasExecuted)
            	{
            		Console.WriteLine("Current State has finished execution.");
            	}
            	else
            	{
            		Console.WriteLine("Current State has not finished execution.");
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	// CurrentPaymentState is the
            	// PaymentState object.
            	
            	If(CurrentPaymentState.HasExecuted)
            	{
            		Console.WriteLine("Current State has finished execution.")
            	}
            	Else
            	{
            		Console.WriteLine("Current State has not finished execution.")
            	}
            	EndIf
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>This is an abstract class, creating an object of PaymentState directly is not possible.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.#ctor(PayPal.Payments.Communication.PaymentConnection,System.String,PayPal.Payments.Common.Context@)">
            <summary>
            Constructor
            </summary>
            <param name="Connection">PaymentConnection Object</param>
            <param name="ParamList">Parameter List</param>
            <param name="PsmContext">Context Object by ref</param>
            <remarks>This is an abstract class, creating an object of PaymentState directly is not possible.</remarks>		
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor
            </summary>
            <param name="CurrentPmtState">Current PaymentState Object.</param>
            <remarks>This is an abstract class, creating an object of PaymentState directly is not possible.</remarks>		
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.InitializeContentType(System.String)">
            <summary>
            Initializes the Content Type of the Request.
            </summary>
            <param name="InitialParamList">Param List.</param>
            <remarks>This method initializes the content type of the
            parameter list in the member mContentType.
            <para>Allowed content types are:</para>
            <list type="table">
            <listheader>
            <term>Content Type</term>
            <description>Expected Value</description>
            </listheader>
            <item>
            <term>Name Value Pair</term>
            <description>text/namevalue</description>
            </item>
            <item>
            <term>XML Pay</term>
            <description>text/xml</description>
            </item>
            </list>
            <para>Maps to HTTP Header <code>CONTENT-TYPE</code></para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.SetProgressComplete">
            <summary>
            Sets the transaction complete flag.
            </summary>
            <remarks>this method sets the value of member mInProgress.
            This indicates whether the current transaction is in progress or not.
            True indicates in progress, false otherwise.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.SetTransactionSuccess">
            <summary>
            Sets transaction successful.
            </summary>
            <remarks>This sets the transaction status to success.</remarks>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentState.SetTransactionFail">
            <summary>
            Sets transaction failed.
            </summary>
            <remarks>This sets the transaction status to failed.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.SetStateSuccess">
            <summary>
            Sets the state success.
            </summary>
            <remarks>This sets the current state to success.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.SetStateOutCome(System.Boolean)">
            <summary>
            Sets state outcome.
            </summary>
            <param name="Value">True if success, false otherwise.</param>
            <remarks>This sets the state outcome to a desired value either true or false.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.SetStateFail">
            <summary>
            Sets the state failed.
            </summary>
            <remarks>This sets the current state to failed.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.Execute">
            <summary>
            Abstract function declaration
            of Execute.
            </summary>
            <remarks>This is the abstract method definition of Execute. The Execute method
            acts as the main important method in these payment state hierarchy. this method is overridden as
            per the requirements in the derived classes.</remarks>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentState.ValidateRequestId">
            <summary>
            Validates Request Id.
            </summary>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="T:PayPal.Payments.Communication.PaymentStateMachine">
            <summary>
            Payment State Driver class.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mVitOSName">
            <summary>
            OS Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mVitOSArch">
            <summary>
            OS Architecture.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mVitOSVersion">
            <summary>
            OS Version.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mVitRuntimeVersion">
            <summary>
            .NET Version.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mVitProxy">
            <summary>
            Proxy Used (Y/N)
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mPaymentState">
            <summary>
            Payment State object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mConnection">
            <summary>
            Connection object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.psmContext">
            <summary>
            Context object.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Communication.PaymentStateMachine.mClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.Instance">
            <summary>
            Gets the instance of PaymentStateMachine.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.Response">
            <summary>
            Gets transaction response.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.RequestId">
            <summary>
            Gets the Request Id
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.StartTime">
            <summary>
            Gets the transaction start time.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.TimeOut">
            <summary>
            Gets, Sets the transaction timeout.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.PsmContext">
            <summary>
            Gets the context object.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.IsXmlPayRequest">
            <summary>
            Gets XML Pay Request flag.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.InProgress">
            <summary>
            Gets the Inprogress status of transaction.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Communication.PaymentStateMachine.ClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.#ctor">
            <summary>
            Private constructor for PaymentStateMachine
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.SetVersionTracking">
            <summary>
            Sets the Version Tracking information
            in NV Request.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.InitializeContext(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,PayPal.Payments.DataObjects.ClientInfo)">
            <summary>
            Initializes transaction context.
            </summary>
            <param name="HostAddress">Payflow Host Address.</param>
            <param name="HostPort">Payflow Host Port.</param>
            <param name="TimeOut">Transaction timeout.</param>
            <param name="ProxyAddress">Proxy Address.</param>
            <param name="ProxyPort">Proxy Port.</param>
            <param name="ProxyLogon">Proxy Logon Id.</param>
            <param name="ProxyPassword">Proxy Password.</param>
            <param name="ClientInfo">Client Info</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.InitTrans(System.String,System.String)">
            <summary>
            Initialized Transaction.
            </summary>
            <param name="ParamList">Parameter List</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.Execute">
            <summary>
            Executes the transaction.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.PaymentStateMachine.GetNextState(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Changes the Payment States depending upon
            the current state status.
            </summary>
            <param name="CurrentPmtState">Current Payment State.</param>
            <returns>Next Payment State</returns>
        </member>
        <member name="T:PayPal.Payments.Communication.ReceiveState">
            <summary>
            Represent Receive State.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.ReceiveState.#ctor(PayPal.Payments.Communication.PaymentState)">
             <summary>
             Copy Constructor for RecieveState.
             </summary>
            <param name="CurrentPmtState">Current Payment State.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.ReceiveState.Execute">
            <summary>
            Execute function.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.ReceiveState.SetReceiveResponse(System.String)">
            <summary>
            Abstract declaration of SetReceiveResponse
            </summary>
            <param name="response">Response String.</param>
            <returns>True if response set,false otherwise.</returns>
        </member>
        <member name="T:PayPal.Payments.Communication.ReconnectState">
            <summary>
            Represents Reconnect State.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.ReconnectState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor for ReconnectState.
            </summary>
            <param name="CurrentPmtState">Current Payment State.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.ReconnectState.Execute">
            <summary>
            Execute function.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.RetryState">
            <summary>
            Represents RetryState.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.RetryState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor for RetryState.
            </summary>
            <param name="CurrentPmtState">Current Payment State.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.RetryState.Execute">
            <summary>
            Execute function.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.SendInitState">
            <summary>
            Represents SendInitState.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.SendInitState.#ctor(PayPal.Payments.Communication.PaymentConnection,System.String,PayPal.Payments.Common.Context@)">
            <summary>
            Constructor for SendInitState Object.
            </summary>
            <param name="Connection">PaymentConnection Object.</param>
            <param name="InitialParameterList">Parameter List</param>
            <param name="PsmContext">Context Object by reference.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.SendInitState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor for SendInitState
            </summary>
            <param name="CurrentPaymentState">Current Payment State object.</param>
        </member>
        <member name="T:PayPal.Payments.Communication.SendReconnectState">
            <summary>
            Represents SendReconnectState
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.SendReconnectState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy Constructor for SendInitState
            </summary>
            <param name="CurrentPaymentState">Current Payment State object.</param>
        </member>
        <member name="T:PayPal.Payments.Communication.SendState">
            <summary>
            Represents SendState.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.SendState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy constructor for SendState.
            </summary>
            <param name="CurrentPaymentState">Current Payment State object.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.SendState.GetSendRequest">
            <summary>
            Abstract Declaration of 
            GetSendRequest
            </summary>
            <returns>request to be sent</returns>
        </member>
        <member name="M:PayPal.Payments.Communication.SendState.Execute">
            <summary>
            Execute function
            </summary>
        </member>
        <member name="T:PayPal.Payments.Communication.TransactionReceiveState">
            <summary>
            Represents transaction receive state.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.TransactionReceiveState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy constructor for TransactionReceiveState.
            </summary>
            <param name="CurrentPaymentState">Current Payment State object.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.TransactionReceiveState.SetReceiveResponse(System.String)">
            <summary>
            Sets the received response
            </summary>
            <param name="Response">response</param>
            <returns>true if response set, false otherwise.</returns>
        </member>
        <member name="T:PayPal.Payments.Communication.TransactionSendState">
            <summary>
            Represents transaction send state.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Communication.TransactionSendState.#ctor(PayPal.Payments.Communication.PaymentState)">
            <summary>
            Copy constructor for TransactionSendState.
            </summary>
            <param name="CurrentPaymentState">Current Payment State object.</param>
        </member>
        <member name="M:PayPal.Payments.Communication.TransactionSendState.GetSendRequest">
            <summary>
            Gets the request to be sent.
            </summary>
            <returns>Request to be sent.</returns>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ACHTender">
            <summary>
            This class is used to create and use an ACH
            ( Automatic Clearing House ) Tender type.
            </summary>
            <remarks>BankAcct is the Payment device associated with this
            tender type.</remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.BankAcct"/>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ACHTender.mAuthType">
            <summary>
            ACH Auth Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ACHTender.mPreNote">
            <summary>
            ACH Prenote (Y/N)
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ACHTender.mTermCity">
            <summary>
            ACH Term City
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ACHTender.mTermState">
            <summary>
            ACH Term State
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ACHTender.#ctor(PayPal.Payments.DataObjects.BankAcct)">
            <summary>
            Constructor
            </summary>
            <param name="BnkAcct">Bank Account object.</param>
            <remarks>
            ACHTender should be used to perform the transactions 
            in which the user provides his bank account details for
            the online payment processing.
            <para>Maps to Payflow Parameter:</para>
            <code>TENDER</code>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	//BnkAcct is the populated BankAcct object.
            	.............
            	
            	//Create the Tender object
            	ACHTender Tender = new ACHTender(BnkAcct);
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	//BnkAcct is the populated BankAcct object.
            	.............
            	
            	'Create the Tender object
            	Dim Tender As ACHTender = new ACHTender(BnkAcct)
            	
            	.............
            </code>
            <seealso cref="T:PayPal.Payments.DataObjects.BankAcct"/>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ACHTender.PreNote">
            <summary>
            Gets, Sets the Prenote.
            </summary>
            <remarks>
            <para>Prenote indicates a prenotification payment with no amount.
            Used to verify bank account validity. Receiving banks are not required 
            to respond to prenotification payments.</para>
            <para>Allowed Prenote values are:</para>
            <list type="table">
            <listheader>
            <term>PRENOTE</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>N</term>
            <description>Default. AMT needs to be passed.</description>
            </item>
            <item>
            <term>Y</term>
            <description>Default. AMT does not need to be passed.</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>PRENOTE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ACHTender.TermCity">
            <summary>
            Gets, Sets the Termcity.
            </summary>
            <remarks>
            <para>City where the merchant's terminal is located. 
            Used only for POP.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>TERMCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ACHTender.TermState">
            <summary>
            Gets, Sets the Termstate.
            </summary>
            <remarks>
            <para>State where the merchant's terminal is located. 
            Used only for POP.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>TERMSTATE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ACHTender.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Address">
            <summary>
            Abstract class to hold the
            Address information.
            </summary>
            <remarks>This class can be extended to create a new address type.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mStreet">
            <summary>
            Holds Street
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mStreet2">
            <summary>
            Holds Street2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mCity">
            <summary>
            Holds City
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mState">
            <summary>
            Holds State
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mZip">
            <summary>
            Holds Zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mCountry">
            <summary>
            Holds Country
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mPhone">
            <summary>
            Holds Phonenum
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mPhone2">
            <summary>
            Holds Phone2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mEmail">
            <summary>
            Holds Email
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mFax">
            <summary>
            Holds Fax
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mFirstName">
            <summary>
            Holds First Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mMiddleName">
            <summary>
            Holds Middle Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Address.mLastName">
            <summary>
            Holds Last Name
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressStreet">
            <summary>
            Gets, Sets Street
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressStreet2">
            <summary>
            Gets, Sets Street2
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressCity">
            <summary>
            Gets, Sets City
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressState">
            <summary>
            Gets, Sets State
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressZip">
            <summary>
            Gets, Sets Zip
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressCountry">
            <summary>
            Gets, Sets Country
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressPhone">
            <summary>
            Gets, Sets Phonenum
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressPhone2">
            <summary>
            Gets, Sets Phone2
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressEmail">
            <summary>
            Gets, Sets Email
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressFax">
            <summary>
            Gets, Sets Fax
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressFirstName">
            <summary>
            Gets, Sets Firstname
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressMiddleName">
            <summary>
            Gets, Sets Middlename
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Address.AddressLastName">
            <summary>
            Gets, Sets Lastname
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Address.#ctor">
            <summary>
            Constructor for Address.
            </summary>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BankAcct">
            <summary>
            Used for BankAcct information.
            </summary>
            <remarks>
            BankAcct is associated with ACHTender.
            <seealso cref="T:PayPal.Payments.DataObjects.ACHTender"/>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BankAcct.mAba">
            <summary>
            Holds Aba
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BankAcct.mAcctType">
            <summary>
            Holds Bank Acct type
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BankAcct.#ctor(System.String,System.String)">
            <summary>
            Constructor for BankAcct
            </summary>
            <param name="Acct">Bank Account number</param>
            <param name="Aba">Aba number</param>
            <remarks>
            BankAcct should be used to perform the transactions 
            in which the user provides his bank account details for
            the online payment processing.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the BankAcct object
            	BankAcct Account = new BankAcct("XXXXXXXXXXX","XXXXXXXXXXX");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the BankAcct object
            	Dim Account As BankAcct = new BankAcct("XXXXXXXXXXX","XXXXXXXXXXX")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BankAcct.Acct">
            <summary>
            Gets Acct.
            </summary>
            <remarks>
            <para>Customer’s bank account number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ACCT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BankAcct.Aba">
            <summary>
            Gets, Sets Aba.
            </summary>
            <remarks>
            <para>Target Bank's transit ABA routing number.</para>
            <para>Appies only to ACH transactions.(8-digit number)</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ABA</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BankAcct.AcctType">
            <summary>
            Gets, Sets Acct type
            </summary>
            <remarks>
            <para>Customer's bank account type</para>
            <para>Allowed AcctType values are:</para>
            <list type="table">
            <listheader>
            <term>ACCTTYPE</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>C</term>
            <description>Checking account</description>
            </item>
            <item>
            <term>S</term>
            <description>Savings account</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>ACCTTYPE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BankAcct.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BaseRequestDataObject">
            <summary>
            Abstract base Class of all request data objects.
            </summary>
            <remarks>This class can be used to create a new request data 
            object.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseRequestDataObject.mContext">
            <summary>
            Static context
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseRequestDataObject.mRequestBuffer">
            <summary>
            Static request buffer
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseRequestDataObject.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseRequestDataObject.Context">
            <summary>
            Gets, Sets context
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseRequestDataObject.RequestBuffer">
            <summary>
            Gets, Sets Requestbuffer
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseRequestDataObject.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseRequestDataObject.ResetContext">
            <summary>
            Resets the context
            </summary>
            <remarks>Not supported.</remarks>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BaseResponseDataObject">
            <summary>
            Abstract base Class of all response data objects.
            </summary>
            <remarks>This class can be used to create a new response data 
            object.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseResponseDataObject.SetParams(System.String)">
            <summary>
            Sets the Response params in
            response data objects.
            </summary>
            <param name="Response">Response String</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BaseTender">
            <summary>
            This abstract class serves as base class 
            of all tender objects.
            </summary>
            <remarks>
            <para>Each tender type is associated with a Payment Device.</para>
            <para>Following are the Payment Devices associated with 
            different tender types:</para>
            <list type="table">
            <listheader>
            <term>Tender type</term>
            <description>Payment Device Data Object</description>
            </listheader>
            <item>
            <term>ACHTender</term>
            <description><see cref="T:PayPal.Payments.DataObjects.BankAcct">BankAcct Class</see></description>
            </item>
            <item>
            <term>CardTender</term>
            <description>
            <para><see cref="T:PayPal.Payments.DataObjects.CreditCard">CreditCard Class</see></para>
            <para><see cref="T:PayPal.Payments.DataObjects.PurchaseCard">PurchaseCard Class</see></para>
            <para><see cref="T:PayPal.Payments.DataObjects.SwipeCard">SwipeCard Class</see></para>
            </description>
            </item>
            <item>
            <term>CheckTender</term>
            <description><see cref="T:PayPal.Payments.DataObjects.CheckPayment">CheckPayment Class</see></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mTender">
            <summary>
            Holds the tender type.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mPaymentDevice">
            <summary>
            Holds the associated 
            payment device.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mChkNum">
            <summary>
            Holds Check number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mChkType">
            <summary>
            Holds Check type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mDL">
            <summary>
            Holds DL
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mSS">
            <summary>
            Holds SS
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BaseTender.mAuthType">
            <summary>
            Holds AuthType
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseTender.#ctor(System.String,PayPal.Payments.DataObjects.PaymentDevice)">
            <summary>
            Constructor for BaseTender.
            </summary>
            <param name="Tender">Tender Type ("C"/"A"/"K")</param>
            <param name="PayDevice">Payment Device</param>
            Abstract class. Instance cannot be created directly.
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.Tender">
            <summary>
            Gets, Sets Tender Type.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>TENDER</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.ChkNum">
            <summary>
            Gets, Sets Check number.
            </summary>
            <remarks>
            <para>For ACH - The check serial number. 
            Required for POP, ARC, and RCK.
            </para>
            <para>For TeleCheck - Account holder’s next unused 
            (available) check number.
            </para>
            <para>Maps to Payflow Parameter:</para>
            <code>CHKNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.ChkType">
            <summary>
            Gets, Sets Check type.
            </summary>
            <remarks>
            <para>Check type.</para>
            <para>Allowed CheckTypes are:</para>
            <list type="table">
            <listheader>
            <term>CHKTYPE</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>P</term>
            <description>Personal.</description>
            </item>
            <item>
            <term>C</term>
            <description>Company.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.DL">
            <summary>
            Gets, Sets DL  
            </summary>
            <remarks>
            <para> Driver’s license number.</para>
            <para>Format: XXnnnnnnnn</para>
            <para>XX = State Code, nnnnnnnn = DL Number</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.SS">
            <summary>
            Gets, Sets SS  
            </summary>
            <remarks>
            <para>Account holder’s social security number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>SS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BaseTender.AuthType">
            <summary>
            Sets,gets the AuthType.
            </summary>
            <remarks>
            <para>The type of authorization received from the payer. For both ACH and TeleCheck.</para>
            <para>Allowed AuthTypes for ACH are:</para>
            <list type="table">
            <listheader>
            <term>AUTHTYPE</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>CCD</term>
            <description>Default for B2B format accounts.</description>
            </item>
            <item>
            <term>PPD</term>
            <description>Standard customer authorization method for B2C format accounts.</description>
            </item>
            <item>
            <term>ARC</term>
            <description>Accounts Receivables check entry for a single entry debit.</description>
            </item>
            <item>
            <term>RCK</term>
            <description>Re-presented check entry for a single entry debit.</description>
            </item>
            <item>
            <term>WEB</term>
            <description>The customer authorized the payment over the Internet.</description>
            </item>
            <item>
            <term>TEL</term>
            <description>Debit authorization obtained by telephone.</description>
            </item>
            <item>
            <term>POP</term>
            <description>Point of Purchase check entry for a single entry debit.</description>
            </item>
            </list>
            <para>Allowed AuthTypes for TeleCheck are:</para>
            <list type="table">
            <listheader>
            <term>AUTHTYPE</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>I</term>
            <description>Internet Check Acceptance (ICA) provides the capability to authorize and electronically settle checks over the Internet.</description>
            </item>
            <item>
            <term>P</term>
            <description>Checks By Phone (CBP) provides the capability to authorize and electronically settle checks over the phone.</description>
            </item>
            <item>
            <term>D</term>
            <description>Prearranged Deposit Services (PPD) debits the customer's account provided the customer has previously accepted a written authorization.</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHTYPE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BaseTender.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BillTo">
            <summary>
            Used for Billing Address information
            </summary>
            <remarks>Billing address is Cardholder's address information.</remarks>
            <example>
            <para>Following example shows how to use BillTo.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
            //Set the Billing Address details.
            BillTo Bill = new BillTo();
            Bill.BillToStreet = "123 Main St.";
            Bill.BillToZip = "12345";
            Inv.BillTo = Bill;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
            'Set the Billing Address details.
            Dim Bill As BillTo = New BillTo
            Bill.BillToStreet = "123 Main St."
            Bill.BillToZip = "12345"
            Inv.BillTo = Bill
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BillTo.mBillToHomePhone">
            <summary>
            Home phone
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BillTo.mBillToCompanyName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToCity">
            <summary>
            Gets, Sets Billing City.
            </summary>
            <remarks>
            <para>Cardholder’s billing city.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToCountry">
            <summary>
            Gets, Sets Billing Country.
            </summary>
            <remarks>
            <para>Cardholder’s billing country code</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOCOUNTRY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToEmail">
            <summary>
            Gets, Sets Billing Email.
            </summary>
            <remarks>
            <para>Cardholder’s e-mail address</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOEMAIL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToFax">
            <summary>
            Gets, Sets Billing Fax
            </summary>
            <remarks>
            <para>Cardholder’s fax address.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOFAX</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToFirstName">
            <summary>
            Gets, Sets Billing Firstname.
            </summary>
            <remarks>
            <para>Cardholder’s first name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOFIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToLastName">
            <summary>
            Gets, Sets Billing Lastname.
            </summary>
            <remarks>
            <para>Cardholder’s last name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BillTOLASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToMiddleName">
            <summary>
            Gets, Sets Billing Middlename.
            </summary>
            <remarks>
            <para>Cardholder’s middle name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOMIDDLENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToPhone2">
            <summary>
            Gets, Sets Billing Phone2.
            </summary>
            <remarks>
            <para>Cardholder’s 2nd telephone number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOPHONE2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToPhone">
            <summary>
            Gets, Sets Billing Phonenum
            </summary>
            <remarks>
            <para>Cardholder’s telephone number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOPHONENUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToState">
            <summary>
            Gets, Sets Billing State.
            </summary>
            <remarks>
            <para>Cardholder’s billing state code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToStreet">
            <summary>
            Gets, Sets Billing Street.
            </summary>
            <remarks>
            <para>Cardholder’s billing street address 
            (used for AVS and reporting).</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOSTREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToStreet2">
            <summary>
            Gets, Sets Billing Street2
            </summary>
            <remarks>
            <para>Cardholder’s billing street 2 address 
            (used for AVS and reporting).</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOSTREET2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToZip">
            <summary>
            Gets, Sets Billing Zip.
            </summary>
            <remarks>
            <para>Account holder’s 5- to 9-digit postal code
             (called ZIP code in the USA). 
             Do not use spaces, dashes, 
             or non-numeric characters.
             The postal code is verified by the 
             AVS service.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BILLTOZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToHomePhone">
            <summary>
            Gets, Sets Billing HomePhone.
            </summary>
            <remarks>
            <para>Cardholder’s home telephone number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>HOMEPHONE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BillTo.BillToCompanyName">
            <summary>
            Gets, Sets  CompanyName.
            </summary>
            <remarks>
            <para>Company Name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>COMPANYNAME</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BillTo.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Billing address is Cardholder's address information.</remarks>
            <example>
            <para>Following example shows how to use BillTo.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
            //Set the Billing Address details.
            BillTo Bill = new BillTo();
            Bill.BillToStreet = "123 Main St.";
            Bill.BillToZip = "12345";
            Inv.BillTo = Bill;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
            'Set the Billing Address details.
            Dim Bill As BillTo = New BillTo
            Bill.BillToStreet = "123 Main St."
            Bill.BillToZip = "12345"
            Inv.BillTo = Bill
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BillTo.Copy">
            <summary>
            This method copies the common contents
            from billing to shipping address.
            </summary>
            <returns>ShipTo object</returns>
            <remarks>This method can be used to 
            populate the shipping addresses directly 
            from the billing addresses when 
            both are the same.</remarks>
            <example>
            <code lang="C#" escaped="false">
            
            	................
            	//Bill is the object of
            	//BillTo populated with 
            	//the billing addresses.
            	................
            	
            	
            	ShipTo Ship;
            	
            	//Populate shipping addresses
            	//from billing addresses.
            	Ship = Bill.Copy();
            	
            	................
            
            </code>
            <code lang="Visual Basic" escaped="false">
            
            	................
            	'Bill is the object of
            	'BillTo populated with 
            	'the billing addresses.
            	................
            	
            	
            	Dim Ship As ShipTo
            	
            	'Populate shipping addresses
            	'from billing addresses.
            	Ship = Bill.Copy()
            	
            	................
            
            </code>
            </example>
            <seealso cref="T:PayPal.Payments.DataObjects.ShipTo"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BillTo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BrowserInfo">
            <summary>
            Used for Browser related information.
            </summary>
            <remarks>Use the BrowserInfo object for the user
            browser related information.</remarks>
            <example>
            <para>Following example shows how to use a 
            Browser Info object.</para>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Browser Info details.
            BrowserInfo Browser = New BrowserInfo();
            Browser.BrowserCountryCode = "USA";
            Browser.BrowserUserAgent = "IE 6.0";
            Inv.BrowserInfo = Browser;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Browser Info details.
            Dim Browser As BrowserInfo = New BrowserInfo
            Browser.BrowserCountryCode  = "USA"
            Browser.BrowserUserAgent = "IE 6.0"
            Inv.BrowserInfo = Browser
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mBrowserTime">
            <summary>
            Holds Browser time.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mBrowserCountryCode">
            <summary>
            Holds Browser Country code.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mBrowserUserAgent">
            <summary>
            Holds Browser User Agent
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mButtonSource">
            <summary>
            Holds Buttonsource
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mNotifyURL">
            <summary>
            Holds notify url
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mCustom">
            <summary>
            Holds custom
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BrowserInfo.mMerchantSessionId">
            <summary>
            Holds merchant session id
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BrowserInfo.#ctor">
            <summary>
            Constructor for BrowserInfo
            </summary>
            <remarks>Use the BrowserInfo object for the user
            browser related information.</remarks>
            <example>
            <para>Following example shows how to use a 
            Browser Info object.</para>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Browser Info details.
            BrowserInfo Browser = New BrowserInfo();
            Browser.BrowserCountryCode = "USA";
            Browser.BrowserUserAgent = "IE 6.0";
            Inv.BrowserInfo = Browser;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Browser Info details.
            Dim Browser As BrowserInfo = New BrowserInfo
            Browser.BrowserCountryCode  = "USA"
            Browser.BrowserUserAgent = "IE 6.0"
            Inv.BrowserInfo = Browser
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.BrowserTime">
            <summary>
            Gets, Sets Browser time.
            </summary>
            <remarks>
            <para>Browser's local time.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BROWSERTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.BrowserCountryCode">
            <summary>
            Gets, Sets Browser Country code.
            </summary>
            <remarks>
            <para>Browser's local Country Code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BROWSERCOUNTRYCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.BrowserUserAgent">
            <summary>
            Gets, Sets Browser user agent.
            </summary>
            <remarks>
            <para>Browser's user agent.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>BROWSERUSERAGENT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.Custom">
            <summary>
            Gets or Sets the custom parameter for Direct Payment and Express checkout.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTOM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.ButtonSource">
            <summary>
            Gets or Sets the buttonsource parameter for Direct Payment and Express checkout.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BUTTONSOURCE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.NotifyURL">
            <summary>
            Gets or Sets the NotifyUrl parameter for Direct Payment and Express checkout.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>NOTIFYURL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BrowserInfo.MerchantSessionId">
            <summary>
            Gets or Sets the MerchantSessionId parameter for Direct Payment.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTSESSIONID</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BrowserInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BuyerAuthResponse">
            <summary>
            Used for the Buyer Authorization operation
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mAcsUrl">
            <summary>
            Holds Acs Url
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mAuthenticationId">
            <summary>
            Holds Authentication Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mAuthenticationStatus">
            <summary>
            Holds Authentication status
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mCavv">
            <summary>
            Holds CAVV
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mEci">
            <summary>
            Holds ECI
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mPaReq">
            <summary>
            Holds PAREQ
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mXid">
            <summary>
            Holds XID
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthResponse.mMd">
            <summary>
            Holds MD
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.AcsUrl">
            <summary>
            Gets the AcsUrl parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ACSURL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.Authentication_Id">
            <summary>
            Gets the authentication_id parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHENTICATION_ID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.Authentication_Status">
            <summary>
            Gets the authentication_status parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHENTICATION_STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.CAVV">
            <summary>
            Gets the CAVV parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CAVV</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.ECI">
            <summary>
            Gets the ECI parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ECI</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.PaReq">
            <summary>
            Gets the PaReq parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAREQ</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.XID">
            <summary>
            Gets the XID parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>XID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthResponse.MD">
            <summary>
            Gets the MD parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MD</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BuyerAuthResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets the Response parameters in Response data objects.
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.BuyerAuthStatus">
            <summary>
            Used for BuyerAuth Status information.
            </summary>
            <remarks>Use this class to set the BuyerAuth Status related 
            information.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mAuthenticationId">
            <summary>
            Holds AuthenticationId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mAuthenticationStatus">
            <summary>
            Holds Authentication Status
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mECI">
            <summary>
            Holds ECI value
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mCAVV">
            <summary>
            Holds CAVV
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mXID">
            <summary>
            Holds XID
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mDSTransactionId">
            <summary>
            Holds Directory Server Transaction Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.BuyerAuthStatus.mThreeDSVersion">
            <summary>
            Holds 3D-Secure version
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BuyerAuthStatus.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Use this class to set the BuyerAuth Status
            information.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.AuthenticationId">
            <summary>
            Gets, Sets AuthenticationId.
            </summary>
            <remarks>
            <para>AuthenticationId.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHENTICATION_ID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.AuthenticationStatus">
            <summary>
            Gets, Sets  AuthenticationStatus.
            </summary>
            <remarks>
            <para>Authentication Status</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHENTICATION_STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.ECI">
            <summary>
            Gets, Sets  ECI.
            </summary>
            <remarks>
            <para>ECI</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ECI</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.CAVV">
            <summary>
            Gets, Sets  CAVV.
            </summary>
            <remarks>
            <para>CAVV</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CAVV</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.XID">
            <summary>
            Gets, Sets  XID.
            </summary>
            <remarks>
            <para>XID</para>
            <para>Maps to Payflow Parameter:</para>
            <code>XID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.DSTransactionId">
            <summary>
            Gets, Sets  Directory Server Transaction Id.
            </summary>
            <remarks>
            <para>Directory Server Transaction Id</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DSTRANSACTIONID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.BuyerAuthStatus.ThreeDSVersion">
            <summary>
            Gets, Sets 3D-Secure Version.
            </summary>
            <remarks>
            <para>3D-Secure Version</para>
            <para>Maps to Payflow Parameter:</para>
            <code>THREEDSVERSION</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.BuyerAuthStatus.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.CardTender">
            <summary>
            Used for Card tender related information
            </summary>
            <remarks>CreditCard, PurchaseCard and SwipeCard are
            the Payment devices associated with this tender type.
            <seealso cref="T:PayPal.Payments.DataObjects.CreditCard"/>
            <seealso cref="T:PayPal.Payments.DataObjects.PurchaseCard"/>
            <seealso cref="T:PayPal.Payments.DataObjects.SwipeCard"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CardTender.#ctor(PayPal.Payments.DataObjects.CreditCard)">
            <summary>
            Constructor
            </summary>
            <param name="CredCard">Credit Card object</param>
            <remarks>This constructor is used to create a CardTender
             with CreditCard as the payment device</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//CredCard is the CreditCard object.
            	.............
            	
            	CardTender Tender = new CardTender(CredCard);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'CredCard is the CreditCard object.
            	.............
            	
            	Dim Tender As CardTender = new CardTender(CredCard)
            	
            	..............
             </code>
             </example>
            <seealso cref="T:PayPal.Payments.DataObjects.CreditCard"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CardTender.#ctor(PayPal.Payments.DataObjects.PurchaseCard)">
            <summary>
            Constructor
            </summary>
            <param name="PurCard">Purchase Card object</param>
            <remarks>This constructor is used to create a CardTender
             with PurchaseCard as the payment device</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//PurCard is the PurchaseCard object.
            	.............
            	
            	CardTender Tender = new CardTender(PurCard);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'PurCard is the PurchaseCard object.
            	.............
            	
            	Dim Tender As CardTender = new CardTender(PurCard)
            	
            	..............
             </code>
             </example>
            <seealso cref="T:PayPal.Payments.DataObjects.PurchaseCard"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CardTender.#ctor(PayPal.Payments.DataObjects.SwipeCard)">
            <summary>
            Constructor
            </summary>
            <param name="SwpCard">Swipe Card object</param>
            <remarks>This constructor is used to create a CardTender
             with SwipeCard as the payment device</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//SwpCard is the SwipeCard object.
            	.............
            	
            	CardTender Tender = new CardTender(SwpCard);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'SwpCard is the SwipeCard object.
            	.............
            	
            	Dim Tender As CardTender = new CardTender(SwpCard)
            	
            	..............
             </code>
             </example>
            <seealso cref="T:PayPal.Payments.DataObjects.SwipeCard"/>
        </member>
        <member name="T:PayPal.Payments.DataObjects.CheckPayment">
            <summary>
            Used for Check Payment related information
            </summary>
            <remarks>
            CheckPayment is associated with CheckTender.
            <seealso cref="T:PayPal.Payments.DataObjects.CheckTender"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CheckPayment.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>This is used as Payment Device for the CheckTender.
            <para>Maps to Payflow Parameter:</para>
            <code>Micr --> MICR</code>
            </remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	
            	CheckPayment PayDevice = new CheckPayment("XXXXXXXXXX");
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	
            	Dim PayDevice As CheckPayment = new CheckPayment("XXXXXXXXXX")
            	
            	..............
             </code>
             </example>
             <seealso cref="T:PayPal.Payments.DataObjects.CheckTender"/>
            <param name="Micr">MICR value</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CheckPayment.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.CheckTender">
            <summary>
            Used for Check tender related information.
            </summary>
            <remarks>CheckPayment is the Payment device associated with
            this tender type.
            <seealso cref="T:PayPal.Payments.DataObjects.CheckPayment"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CheckTender.#ctor(PayPal.Payments.DataObjects.CheckPayment)">
            <summary>
            Constructor for CheckTender
            </summary>
            <param name="Check">Check Payment object.</param>
            <remarks>This constructor is used to create a CheckTender
             with CheckPayment as the payment device</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//Check is the CheckPayment object.
            	.............
            	
            	CheckTender Tender = new CheckTender(Check);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'Check is the CheckPayment object.
            	.............
            	
            	Dim Tender As CheckTender = new CheckTender(Check)
            	
            	..............
             </code>
             </example>
            <seealso cref="T:PayPal.Payments.DataObjects.CheckPayment"/>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ClientInfo">
            <summary>
            This class is used to store the 
            Payflow Client related properties
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.ClientInfoHash">
            <summary>
            Gets the client info hash table
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.ClientVersion">
            <summary>
            Gets client version
            </summary>
            <remarks>
            <para>Client version.</para>
            <para>Maps to HTTP Header:</para>
            <code>PAYFLOW-CLIENT-VERSION</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.OsArchitecture">
            <summary>
            Gets, sets OS architecture
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.OsVersion">
            <summary>
            Gets, sets OS version
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.OsName">
            <summary>
            Gets, sets OS Name
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.Proxy">
            <summary>
            Gets, sets Proxy
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.RunTimeVersion">
            <summary>
            Gets, sets runtime version
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.IntegrationProduct">
            <summary>
            Sets integration product
            </summary>
            <remarks>
            <para>Integration product.</para>
            <para>Maps to HTTP Header:</para>
            <code>PAYFLOW-INTEGRATION-PRODUCT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.IntegrationVersion">
            <summary>
            Sets integration version
            </summary>
            <remarks>
            <para>Integration product.</para>
            <para>Maps to HTTP Header:</para>
            <code>PAYFLOW-INTEGRATION-VERSION</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.ClientType">
            <summary>
            Gets Client Type
            </summary>
            <remarks>
            <para>Client type.</para>
            <para>Maps to HTTP Header:</para>
            <code>PAYFLOW-CLIENT-TYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfo.RequestType">
            <summary>
            Sets Request Type
            </summary>
            <remarks>
            <para>Request type.</para>
            <para>Maps to HTTP Header:</para>
            <code>PAYFLOW-ASSEMBLY</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.SetClientVersion(System.String)">
            <summary>
            Sets client version
            </summary>
            <param name="Version">String value of client version</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.GetIntegrationProduct">
            <summary>
            Gets integration product
            </summary>
            <returns>String value of integration product</returns>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.GetIntegrationVersion">
            <summary>
            Gets integration version
            </summary>
            <returns>String value of integration version</returns>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.SetClientType(System.String)">
            <summary>
            Sets client type
            </summary>
            <param name="ClientType">String value of Client Type</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.AddHeaderToHash(System.String,System.Object)">
            <summary>
            Adds a header to the header hash table
            </summary>
            <param name="HeaderName">Header name</param>
            <param name="HeaderValue">Header value</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfo.GetHeaderFromHash(System.String)">
            <summary>
            Gets a header value from hash
            </summary>
            <param name="HeaderName">Header name</param>
            <returns>Header value object</returns>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ClientInfoHeader">
            <summary>
            This class is used to store the complete information 
            about a client information header.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ClientInfoHeader.mHeaderName">
            <summary>
            Stores Header name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ClientInfoHeader.mHeaderValue">
            <summary>
            Stores Header value
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ClientInfoHeader.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="HeaderName">Header name</param>
            <param name="HeaderValue">Header value</param>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfoHeader.HeaderName">
            <summary>
            Gets header name
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ClientInfoHeader.HeaderValue">
            <summary>
            Gets header value
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.CreditCard">
            <summary>
            Used for Credit Card related information
            </summary>
            <remarks>
            CreditCard is associated with CardTender.
            <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CreditCard.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="Acct">Credit card number</param>
            <param name="ExpDate">Card expiry date</param>
            <remarks>This is used as Payment Device for the CardTender.
            <para>Maps to Payflow Parameter:</para>
            <code>Acct --> ACCT, ExpDate --> EXPDATE</code>
            </remarks>
            <example>
             <code lang="C#" escaped="false">
            	.............
            	
            	CreditCard PayDevice = new CreditCard("XXXXXXXXXX","XXXX");
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	
            	Dim PayDevice As CreditCard = new CreditCard("XXXXXXXXXX","XXXX")
            	
            	..............
             </code>
             </example>
             <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Currency">
            <summary>
            This class is used as the currency data type 
            by all data and transaction objects.
            </summary>
            <remarks>This class should be used to denote any 
            currency parameter. By default, the currency code is
            USD (US Dollars).
            </remarks>
            <example>
            Following example shows how to use this class.
            <code lang="C#" escaped="false">
            	.............
            	//Inv is the Invoice object
            	.............
            	
                // Set the amount object.
                // Currency Code USD is US ISO currency code.  If no code passed, USD is default.
                // See the Developer's Guide regarding the CURRENCY parameter for the list of
                // three-character currency codes available.
                Currency Amt = new Currency(new decimal(25.25), "USD");  
            	
                // A valid amount has either no decimal value or only a two decimal value. 
                // An invalid amount will generate a result code 4.
                //
                // For values which have more than two decimal places such as:
                // Currency Amt = new Currency(new Decimal(25.2575));
                // You will either need to truncate or round as needed using the following properties:
                //
                // If the NoOfDecimalDigits property is used then it is mandatory to set one of the following
                // properties to true.
                //
                //Amt.Round = true;
                //Amt.Truncate = true;
                //
                // For Currencies without a decimal, you'll need to set the NoOfDecimalDigits = 0.
                //Amt.NoOfDecimalDigits = 0;
            	
            	//Set the amount in the invoice object
            	Inv.Amt = Amt;
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	'Inv is the Invoice object
            	.............
            	
            	' Set the amount object.
                ' Currency Code USD is US ISO currency code.  If no code passed, USD is default.
                ' See the Developer's Guide for the list of three-character currency codes available.
                Dim Amt As New Currency(New Decimal(25.25), "USD")
                
            	' A valid amount has either no decimal value or only a two decimal value. 
            	' An invalid amount will generate a result code 4.
                '
                ' For values which have more than two decimal places such as:
                ' Dim Amt As New Currency(New Decimal(25.2575))
                ' You will either need to truncate or round as needed using the following property: Amt.NoOfDecimalDigits
                '
                ' If the NoOfDecimalDigits property is used then it is mandatory to set one of the following
                ' properties to true.
                '
                'Amt.Round = true
                'Amt.Truncate = true
                '
                ' For Currencies without a decimal, you'll need to set the NoOfDecimalDigits = 0.
                'Amt.NoOfDecimalDigits = 0
            	
            	'Set the amount in the invoice object
            	Inv.Amt = Amt;
            	.............
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Currency.mCurrencyValue">
            <summary>
            Currency Value
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Currency.mCurrencyCode">
            <summary>
            Currency code, default USD
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Currency.#ctor(System.Decimal)">
            <summary>
            Constructor
            </summary>
            <param name="CurrencyValue">Currency value</param>
            <remarks>Currency code is set as default USD.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	//Inv is the Invoice object
            	.............
            	
            	//Set the invoice amount.
            	Inv.Amt = new Currency(new Decimal(25.12));
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	'Inv is the Invoice object
            	.............
            	
            	'Set the invoice amount.
            	Inv.Amt = New Currency(New Decimal(25.12))
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Currency.#ctor(System.Decimal,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="CurrencyValue">Currency value</param>
            <param name="CurrencyCode">3 letter Currency code</param>
            <remarks>Currency code if not given is set as default USD.</remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	//Inv is the Invoice object
            	.............
            	
            	//Set the invoice amount.
            	Inv.Amt = new Currency(new Decimal(25.12),"USD");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	'Inv is the Invoice object
            	.............
            	
            	'Set the invoice amount.
            	Inv.Amt = New Currency(New Decimal(25.12),"USD")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Currency.Round">
            <summary>
            Sets Currency value rounding flag to true.
            Note that only one of round OR truncate can be set to true.
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Currency.Truncate">
            <summary>
            Sets Currency value truncation flag to true.
            Note that only one of round OR truncate can be set to true.
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Currency.NoOfDecimalDigits">
            <summary>
            Sets the number of decimal digits required after rounding or truncation.
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Currency.CurrencyCode">
            <summary>
            Gets the currency code..
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Currency.RoundCurrencyValue(System.String,System.Int32)">
            <summary>
            Rounds the currency String value
            </summary>
            <param name="CurrStringValue">Currency String Value</param>
            <param name="NoOfdecimalDigits">Number of decimal digits to round to</param>
            <returns>Rounded Currency String value</returns>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Currency.TruncateCurrencyValue(System.String,System.Int32)">
            <summary>
            Truncates the currency String value
            </summary>
            <param name="CurrStringValue">Currency String Value</param>
            <param name="NoOfdecimalDigits">Number of decimal digits to round to</param>
            <returns>Truncated Currency String value</returns>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Currency.ToString">
            <summary>
            Overrides ToString
            </summary>
            <returns>String value of currency</returns>
            <remarks>Formats string value of currency in format "$.CC"</remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	//Inv is the Invoice object
            	.............
            	
            	//Set the invoice amount.
            	Inv.Amt = new Currency(new Decimal(25.12),"USD");
            	String CurrValue = Inv.ToString();
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	'Inv is the Invoice object
            	.............
            	
            	'Set the invoice amount.
            	Inv.Amt = New Currency(New Decimal(25.12),"USD")
            	CurrValue As String = Inv.ToString
            	.............
            </code>
            </example>
        </member>
        <member name="T:PayPal.Payments.DataObjects.CustomerInfo">
            <summary>
            Used for Customer related information.
            </summary>
            <remarks>Use this class to set the customer related 
            information.</remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Customer Info details.
            CustomerInfo Cust = new CustomerInfo();
            Cust.CustCode = "CustXXXXX";
            Cust.CustIP = "255.255.255.255";
            Inv.CustomerInfo = Cust;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Customer Info details.
            Dim Cust As CustomerInfo = New CustomerInfo
            Cust.CustCode = "CustXXXXX"
            Cust.CustIP = "255.255.255.255"
            Inv.CustomerInfo = Cust
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustCode">
            <summary>
            Holds customer code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustHostName">
            <summary>
            Holds customer host name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustBrowser">
            <summary>
            Holds customer browser
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustIP">
            <summary>
            Holds customer IP
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustVatRegNum">
            <summary>
            Holds Customer Vat registration number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mDob">
            <summary>
            Holds Customer's date of birth
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustId">
            <summary>
            Holds customer id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mReqName">
            <summary>
            Holds ReqName
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustData">
            <summary>
            Holds Customer Data
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustomerId">
            <summary>
            Holds Customer Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustomerNumber">
            <summary>
            Holds Customer Number
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CustomerInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Use this class to set the customer related 
            information.</remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Customer Info details.
            CustomerInfo Cust = New CustomerInfo();
            Cust.CustCode = "CustXXXXX";
            Cust.CustIP = "255.255.255.255";
            Inv.CustomerInfo = Cust;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Customer Info details.
            Dim Cust As CustomerInfo = New CustomerInfo
            Cust.CustCode = "CustXXXXX"
            Cust.CustIP = "255.255.255.255"
            Inv.CustomerInfo = Cust
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.ReqName">
            <summary>
            Gets, Sets ReqName.
            </summary>
            <remarks>
            <para>Requester Name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>REQNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustCode">
            <summary>
            Gets, Sets  CustCode.
            </summary>
            <remarks>
            <para>Customer code/customer reference ID.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustIP">
            <summary>
            Gets, Sets  CustIP.
            </summary>
            <remarks>
            <para>Customer's IP address.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustHostName">
            <summary>
            Gets, Sets  CustHostName.
            </summary>
            <remarks>
            <para>Customer's name of server that the account holder is connected to.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTHOSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustBrowser">
            <summary>
            Gets, Sets  CustBrowser.
            </summary>
            <remarks>
            <para>Account holder’s HTTP browser type. Example:
            MOZILLA/4.0~(COMPATIBLE;~MSIE~5.0;~WINDOWS~95)</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTBROWSER</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustVatRegNum">
            <summary>
            Gets, Sets  CustVatRegNum.
            </summary>
            <remarks>
            <para>Customer's VAT registrations number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTVATREGNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.DOB">
            <summary>
            Gets, Sets  DOB.
            </summary>
            <remarks>
            <para>Account holder’s date of birth.</para>
            <para>Format: mmddyyyy.</para>
            <para>mm - Month, dd - Day, yy - Year.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DOB</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustId">
            <summary>
            Gets, Sets  CustId.
            </summary>
            <remarks>
            <para>Customer's Id.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustData">
            <summary>
            Gets, Sets Customer Data
            </summary>
            <remarks>
            <para>Requester Name.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTDATAE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustomerId">
            <summary>
            Gets, Sets Customer identification.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTOMERID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustomerNumber">
            <summary>
            Gets, Sets Customer Number.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTOMERNUMBER</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.CustomerInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Devices">
            <summary>
            Constructor
            </summary>
            <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>
            <example>
            <para>Following example shows how to use Devices.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
            // Create a new Devices object.
            Devices UsedDevices = new Devices();
            UsedDevices.CatType = "3";
            UsedDevices.Contactless = "RFD";
            Inv.Devices = UsedDevices;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            'Inv is the Invoice object.
            .................
            ' Set the device/card capabilities
            Dim UsedDevices As Devices = New Devices
            UsedDevices.CatType = "3"
            UsedDevices.Contactless = "RFD"
            Inv.Devices = UsedDevices
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Devices.mCatType">
            <summary>
            Type of Terminal
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Devices.mContactless">
            <summary>
            Card Input Capability
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Devices.CatType">
            <summary>
            Gets, Sets Terminal type
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CATTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Devices.Contactless">
            <summary>
            Gets, Sets Card Input Capability
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CONTACTLESS</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Devices.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>
            <example>
            <para>Following example shows how to use Devices.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
            // Create a new Devices object.
            Devices UsedDevices = new Devices();
            UsedDevices.CatType = "3";
            UsedDevices.Contactless = "RFD";
            Inv.Devices = UsedDevices;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            'Inv is the Invoice object.
            .................
            ' Set the device/card capabilities
            Dim UsedDevices As Devices = New Devices
            UsedDevices.CatType = "3"
            UsedDevices.Contactless = "RFD"
            Inv.Devices = UsedDevices
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Devices.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECDoBARequest">
            <summary>
            Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase DO operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetBARequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetBARequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECDoBARequest.#ctor(System.String,System.String)">
            <summary>
            Constructor for ECDoBARequest
            </summary>
            <param name="Token">String</param>
            <param name="PayerId">String</param>
            <remarks>
            ECDoBARequest is used to set the data required for a Express Checkout DO operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECDoBARequest object
            	ECDoBARequest DoEC = new ECDoBARequest("[tokenid]","[payerid]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECDoBARequest object
            	Dim DoEC As ECDoBARequest = new ECDoBARequest("[tokenid]","[payerid]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECDoRequest">
            <summary>
            Used for ExpressCheckout DO operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetRequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECDoRequest.#ctor(System.String,System.String)">
            <summary>
            Constructor for ECDoRequest
            </summary>
            <param name="Token">String</param>
            <param name="PayerId">String</param>
            <remarks>
            ECDoRequest is used to set the data required for a Express Checkout DO operation.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECDoRequest object
            	ECDoRequest DoEC = new ECDoRequest("[tokenid]","[payerid]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECDoRequest object
            	Dim DoEC As ECDoRequest = new ECDoRequest("[tokenid]","[payerid]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoRequest.PayerId">
            <summary>
            Gets or Sets the payerid parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYERID</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECDoRequest.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECDoResponse">
            <summary>
            Used for ExpressCheckout Do operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ExpressCheckoutResponse"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetResponse"/>
            </remarks>	
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECDoResponse.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.Amt">
            <summary>
            Gets the amt parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>AMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.SettleAmt">
            <summary>
            Gets the settleamt parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SETTLEAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.TaxAmt">
            <summary>
            Gets the taxamt parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>TAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.ExchangeRate">
            <summary>
            Gets the exchangerate parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>EXCHANGERATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.PaymentDate">
            <summary>
            Gets the PaymentDate parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.PaymentStatus">
            <summary>
            Gets the PaymentStatus parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTSTATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECDoResponse.BAId">
            <summary>
            Gets the BAID parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BAID</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECDoResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets Response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECGetBARequest">
            <summary>
            Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase GET operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetBARequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoBARequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECGetBARequest.#ctor(System.String)">
            <summary>
            Constructor for ECGetBARequest
            </summary>
            <remarks>
            ECGetBARequest is used to set the data required for a Express Checkout GET operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECGetBARequest object
            	ECGetBARequest GetEC = new ECGetRequest("[tokenid]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECGetBARequest object
            	Dim GetEC As ECGetBARequest = new ECGetBARequest("[tokenid]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECGetRequest">
            <summary>
            Used for ExpressCheckout GET operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoRequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECGetRequest.#ctor(System.String)">
            <summary>
            Constructor for ECGetRequest
            </summary>
            <param name="Token">String</param>
            <remarks>
            ECGetRequest is used to set the data required for a Express Checkout GET operation.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECGetRequest object
            	ECGetRequest GetEC = new ECGetRequest("[tokenid]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECGetRequest object
            	Dim GetEC As ECGetRequest = new ECGetRequest("[tokenid]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECGetResponse">
            <summary>
            Used for ExpressCheckout get operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ExpressCheckoutResponse"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoResponse"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECGetResponse.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.EMail">
            <summary>
            Gets the EMail parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>EMAIL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.PayerId">
            <summary>
            Gets the payerid parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYERID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.PayerStatus">
            <summary>
            Gets the payerstatus parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYERSTATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToFirstName">
            <summary>
            Gets the shiptofirstname parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOFIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToLastName">
            <summary>
            Gets the shiptolastname parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOLASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToCountry">
            <summary>
            Gets the ShipToCountry parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCOUNTRY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToBusiness">
            <summary>
            Gets the ShipToBusiness parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOBUSINESS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.AddressStatus">
            <summary>
            Gets the AddressStatus parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ADDRSTATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.FirstName">
            <summary>
            Gets the FirstName parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>FIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.LastName">
            <summary>
            Gets the LastName parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>LASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToStreet">
            <summary>
            Gets the ShipToStreet parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToStreet2">
            <summary>
            Gets the ShipToStreet2 parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTREET2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToCity">
            <summary>
            Gets the ShipToCity parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToState">
            <summary>
            Gets the ShipToState parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.ShipToZip">
            <summary>
            Gets the ShipToZip parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.CountryCode">
            <summary>
            Gets the CountryCode parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>COUNTRYCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.PhoneNum">
            <summary>
            Gets the PHONENUM parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PHONENUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECGetResponse.BA_Flag">
            <summary>
            Gets the BA_FLAG parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BA_FLAG</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECGetResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets Response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECSetBARequest">
            <summary>
            Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase SET operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetBARequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoBARequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECSetBARequest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for ECSetBARequest
            </summary>
            <param name="ReturnUrl">String</param>
            <param name="CancelUrl">String</param>
            <param name="BillingType">String</param>
            <param name="BA_Desc">String</param>
            <param name="PaymentType">String</param>
            <param name="BA_Custom">String</param>
            <remarks>
            ECSetBARequest is used to set the data required for a Express Checkout Billing Agreement SET operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECSetBARequest object
            	ECSetBARequest SetEC = new ECSetBARequest(ReturnUrl, CancelUrl, BillingType, BA_Desc, PaymentType, BA_Custom);
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECSetBARequest object
            	Dim SetEC As ECSetBARequest = new ECSetBARequest(ReturnUrl, CancelUrl, BillingType, BA_Desc, PaymentType, BA_Custom)
            	
            	.............
            </code>
            </example>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECSetRequest">
            <summary>
            Used for ExpressCheckout SET operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoRequest"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECSetRequest.#ctor(System.String,System.String)">
            <summary>
            Constructor for ECSetRequest
            </summary>
            <param name="ReturnUrl">String</param>
            <param name="CancelUrl">String</param>
            <remarks>
            ECSetRequest is used to set the data required for a Express Checkout SET operation.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECSetrequest object
            	ECSetRequest SetEC = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECSetrequest object
            	Dim SetEC As ECSetRequest = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECSetRequest.#ctor(System.String,System.String,PayPal.Payments.DataObjects.PayLater)">
            <summary>
            Constructor for ECSetRequest
            </summary>
            <param name="ReturnUrl">String</param>
            <param name="CancelUrl">String</param>
            <param name="PayLater">String</param>
            <remarks>
            ECSetRequest is used to set the data required for a Express Checkout SET operation.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECSetrequest object
            	ECSetRequest SetEC = new ECSetRequest("http://www.yourwebsitereturnurl.com", "http://www.yourwebsitecancelurl.com", PayLater);
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECSetrequest object
            	Dim SetEC As ECSetRequest = new ECSetRequest("http://www.yourwebsitereturnurl.com", "http://www.yourwebsitecancelurl.com", PayLater)
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECSetRequest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for ECSetRequest
            </summary>
            <param name="ReturnUrl">String</param>
            <param name="CancelUrl">String</param>
            <param name="BillingType">String</param>
            <param name="BA_Desc">String</param>
            <param name="PaymentType">String</param>
            <param name="BA_Custom">String</param>
            <remarks>
            ECSetRequest is used to set the data required for a Express Checkout SET operation.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECSetRequest object.
            	ECSetRequest SetEC = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com",
            	"MerchantInitiatedBilling", "Test Transaction", "any", "Something");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECSetRequest object for Reference Transaction with Purchase.
            	Dim SetEC As ECSetRequest = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com"
            	"MerchantInitiatedBilling", "Test Transaction", "any", "Something")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.ReturnURL">
            <summary>
            Gets or Sets the returnurl.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>RETURNURL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.CancelURL">
            <summary>
            Gets or Sets the cancelurl.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CANCELURL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.ReqConfirmShipping">
            <summary>
            Gets or Sets the ReqConfirmShipping parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>REQCONFIRMSHIPPING</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.ReqBillingAddress">
            <summary>
            Gets or Sets the ReqBillingAddress parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>REQBILLINGADDRESS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.NoShipping">
            <summary>
            Gets or Sets the NoShipping parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>NOSHIPPING</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.AddrOverride">
            <summary>
            Gets or Sets the AddrOveride Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ADDROVERRIDE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.LocaleCode">
            <summary>
            Gets or Sets the LocaleCode Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>LOCALECODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.MaxAmt">
            <summary>
            Gets or Sets the MaxAmt Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.PageStyle">
            <summary>
            Gets or Sets the PageStyle Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAGESTYLE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.HeaderImage">
            <summary>
            Gets or Sets the HdrImg Parameter.
            </summary>
            <remarks>	
            <para>Maps to Payflow Parameter:</para>
            <code>cpp-header-image</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.HeaderBorderColor">
            <summary>
            Gets or Sets the HdrBorderColor Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>cpp-header-border-color</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.HeaderBackColor">
            <summary>
            Gets or Sets the HdrBackColor Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>cpp-header-back-color</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.PayFlowColor">
            <summary>
            Gets or Sets the PayFlowColor Parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>cpp-paflow-color</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.BillingType">
            <summary>
            Gets or Sets the Billing Type Parameter.
            </summary>
            <remarks>
            Sets up automated recurring billing for the customer.  The
            value is MerchantInitiatedBilling.
            <para>Maps to Payflow Parameter:</para>
            <code>BILLINGTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.BA_Desc">
            <summary>
            Gets or Sets the Description Parameter.
            </summary>
            <remarks>
            Description of goods or services associated with the
            billing agreement.
            <para>Maps to Payflow Parameter:</para>
            <code>BA_DESC</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.PaymentType">
            <summary>
            Gets or Sets the Payment Type Parameter.
            </summary>
            <remarks>
            Type of payment you require. 
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.BA_Custom">
            <summary>
            Gets or Sets the Custom field Parameter.
            </summary>
            <remarks>
            Custom annotation field for your exclusive use.
            <para>Maps to Payflow Parameter:</para>
            <code>BA_CUSTOM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.ShipToName">
            <summary>
            Gets or Sets the Ship to Name Parameter.
            </summary>
            <remarks>
            Custom annotation field for your exclusive use.
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTONAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECSetRequest.AllowNote">
            <summary>
            Gets or Sets the Allow Note Parameter.
            </summary>
            <remarks>
            Custom annotation field for your exclusive use.
            <para>Maps to Payflow Parameter:</para>
            <code>ALLOWNOTE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECSetRequest.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECUpdateBARequest">
            <summary>
            Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase DO operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetBARequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetBARequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoBARequest"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECUpdateBARequest.BA_Status">
            <summary>
            Gets or Sets the ba_status parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BA_STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECUpdateBARequest.BAId">
            <summary>
            Gets or Sets the baid parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BAID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECUpdateBARequest.BA_Desc">
            <summary>
            Gets or Sets the ba_desc parameter.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BA_DESC</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateBARequest.#ctor(System.String)">
            <summary>
            Constructor for ECDoBARequest
            </summary>
            <param name="BAId">String</param>
            <remarks>
            ECDoBARequest is used to set the data required for a Express Checkout UPDATE operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	ECUpdateBARequest UpdateEC = new ECUpdateBARequest("[baid]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	Dim UpdateEC As ECUpdateBARequest = new ECUpdateBARequest("[baid]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateBARequest.#ctor(System.String,System.String)">
            <summary>
            Constructor for ECDoBARequest
            </summary>
            <param name="BAId">String</param>
            <param name="BA_Status">String</param>
            <remarks>
            ECDoBARequest is used to set the data required for a Express Checkout UPDATE operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	ECUpdateBARequest UpdateEC = new ECUpdateBARequest("[baid]", "[ba_status]");
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	Dim UpdateEC As ECUpdateBARequest = new ECUpdateBARequest("[baid]", "[ba_status]")
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateBARequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for ECDoBARequest
            </summary>
            <param name="BAId">String</param>
            <param name="BA_Status">String</param>
            <param name="BA_Desc">String</param>
            <remarks>
            ECDoBARequest is used to set the data required for a Express Checkout UPDATE operation
            with Billing Agreement (Reference Transaction) without Purchase.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	ECUpdateBARequest UpdateEC = new ECUpdateBARequest("[baid]", "[ba_status]", ["ba_desc"]);
            	
            	.............
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	
            	//Create the ECUpdateBARequest object
            	Dim UpdateEC As ECUpdateBARequest = new ECUpdateBARequest("[baid]", "[ba_status]", ["ba_desc"])
            	
            	.............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateBARequest.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ECUpdateResponse">
            <summary>
            Used for ExpressCheckout Update operation.
            </summary>
            <remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ExpressCheckoutResponse"/>
            </remarks>	
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateResponse.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECUpdateResponse.BA_Status">
            <summary>
            Gets the BA_STATUS parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BA_STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ECUpdateResponse.BA_Desc">
            <summary>
            Gets the BA_DESC parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>BA_DESC</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ECUpdateResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets Response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.MagTEncSwipeCard">
            <summary>
            Used for swipe card information
            </summary>
            <remarks>
            Used to pass the Track 1 or Track 2 data (the card’s
            magnetic stripe information) for card-present
            transactions. Include either Track 1 or Track 2
            data—not both. If Track 1 is physically damaged, the
            POS application can send Track 2 data instead.
            <para>SwipeCard is associated with CardTender.</para>
            <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MagTEncSwipeCard.#ctor(System.String)">
            <summary>
            Constructor for SwipeCard
            </summary>
            <param name="MagTEncSwipe">Card Swipe value</param>
            <remarks>This is used as Payment Device for the CardTender.
            <para>Maps to Payflow Parameter:</para>
            <code>Swipe --> SWIPE</code>
            </remarks>
            <example>
             <code lang="C#" escaped="false">
            	.............
            	
            	MagTEncSwipeCard PayDevice = new MagTEncSwipeCard("");
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	
            	Dim PayDevice As MagTEncSwipeCard = New MagTEncSwipeCard("")
            	
            	..............
             </code>
             </example>
             <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MagTEncSwipeCard.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ExpressCheckoutRequest">
            <summary>
            This  class serves as base class of all ExpressCheckout request classes.
            </summary>
            <remarks>
            <para>Each request object is associated with a particular type of expressChecout operation.</para>
            <para>Following are the request objects associated with 
            different operations of ExpressChecout:</para>
            <list type="table">
            <listheader>
            <term>ExpressCheckout operation.</term>
            <description>Request data object</description>
            </listheader>
            <item>
            <term>SET operation for ExpressCheckout.</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ECSetRequest">ECSetRequest</see></description>
            </item>
            <item>
            <term>GET operation for ExpressCheckout.</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ECGetRequest">ECGetRequest</see></description>
            </item>
            <item>
            <term>DO operation for ExpressCheckout.</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ECDoRequest">ECDoRequest</see></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.Token">
            <summary>
            Gets and sets the value of the token.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>TOKEN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.CountryCode">
            <summary>
            Gets and sets the country Code.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>COUNTRYCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.PostalCode">
            <summary>
            Gets and sets the postal code.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>POSTALCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.DoReauthorization">
            <summary>
            Gets and sets the do reauthorization flag.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>DOREAUTHORIZATION</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExpressCheckoutRequest.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExpressCheckoutRequest.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExpressCheckoutRequest.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ExpressCheckoutResponse">
            <summary>
            This  class serves as base class of all ExpressCheckout response classes.
            </summary>
            <remarks>
            <para>Each response object is associated with a particular type of expressCheckout operation.</para>
            <para>Following are the reponse objects associated with 
            different operations of ExpressChecout:</para>
            <list type="table">
            <listheader>
            <term>ExpressCheckout operation.</term>
            <description>Request data object</description>
            </listheader>
            <item>
            <term>SET operation for ExpressCheckout.</term>
            <description>ExpressCheckoutResponse</description>
            </item>
            <item>
            <term>GET operation for ExpressCheckout.</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ECGetResponse">ECGetResponse</see></description>
            </item>
            <item>
            <term>DO operation for ExpressCheckout.</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ECDoResponse">ECDoResponse</see></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExpressCheckoutResponse.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExpressCheckoutResponse.Token">
            <summary>
            Retuns the token for the transaction.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>TOKEN</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExpressCheckoutResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets Response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ExtendData">
            <summary>
            Used for Extended param information
            </summary>
            <remarks>Extended data are the Payflow parameters which are 
            not mapped through the data objects. 
            This class can be used to send such extended parameter information 
            in the transaction request.</remarks>
            <example>
            Following example shows how to use this class.
            <code lang="C#" escaped="false">
            	.............
            	// Trans is the transaction object.
            	.............
            	
            	// Set the extended data value.
            	ExtendData ExtData = new ExtendData("PAYFLOW_PARAM_NAME","Param Value");
            	
            	// Add extended data to transaction.
            	Trans.AddToExtendData(ExtData);
            	
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	' Trans is the transaction object.
            	.............
            	
            	' Set the extended data value.
            	Dim ExtData As ExtendData  = new ExtendData("PAYFLOW_PARAM_NAME","Param Value")
            	
            	' Add extended data to transaction.
            	Trans.AddToExtendData(ExtData)
            	
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ExtendData.mParamName">
            <summary>
            Payflow Param name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ExtendData.mParamValue">
            <summary>
            Param value
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExtendData.ParamName">
            <summary>
            ParamName
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ExtendData.ParamValue">
            <summary>
            ParamValue
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExtendData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ParamName">Payflow pram name</param>
            <param name="ParamValue">param value</param>
            <remarks>Extended data are the Payflow parameters which are 
            not mapped through the data objects. 
            This class can be used to send such extended parameter information 
            in the transaction request.</remarks>
            <example>
            Following example shows how to use this class.
            <code lang="C#" escaped="false">
            	.............
            	// Trans is the transaction object.
            	.............
            	
            	// Set the extended data value.
            	ExtendData ExtData = new ExtendData("PFPRO_PARAM_NAME","Param Value");
            	
            	// Add extended data to transaction.
            	Trans.AddToExtendData(ExtData);
            	
            </code>
            <code lang="Visual Basic" escaped="false">
            	.............
            	' Trans is the transaction object.
            	.............
            	
            	' Set the extended data value.
            	Dim ExtData As ExtendData  = new ExtendData("PFPRO_PARAM_NAME","Param Value")
            	
            	' Add extended data to transaction.
            	Trans.AddToExtendData(ExtData)
            	
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ExtendData.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.FpsXmlData">
            <summary>
            Used for storing Fraud Protection Services
            XML response message after parsing them.
            </summary>
            <remarks>If the VERBOSITY set for the transaction is HIGH, 
            Fraud Protection Services return FPS_PREXMLDATA and/or 
            FPS_POSTXMLDATA response messages. This are xml messages.
            <para>While parsing the response, these xml messages are parsed 
            and populated into Rule data objects. These Rule objects are rules applied 
            by the Fraud Protection Services.. FpsXmlData is the container class 
            for all such rules.</para>
            <para>FpsXmlData data objects instances are contained in 
            FraduResponse and populated if obtained.</para>
            <seealso cref="T:PayPal.Payments.DataObjects.FraudResponse"/>
            <seealso cref="T:PayPal.Payments.DataObjects.Rule"/>
            <seealso cref="T:PayPal.Payments.DataObjects.RuleParameter"/>
            </remarks>
            <example>
            Following example shows how to obtained and use FpsXmlData.
            <code lang="C#" escaped="false">
                ..............................
                 // Resp is the Response object 
                // obtained after submitting the transaction.
                ..............................
                
                FpsXmlData mFpsXmlData;
                ArrayList mRules = new ArrayList();
                Rule mRuleType;
                RuleParameter mRuleVendorParamType;
                ArrayList mRuleVendorParams = new ArrayList();
                int i;
                
                if(Resp != null)
                {
            		// Get the Fraud Response
                	FraudResponse FraudResp = Resp.FraudResult;
            	
                	if(FraudResp == null)
                	{
                		return;
                	}
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("Name_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("Num_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("Type_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("Value_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	   i++;
                	}
                }
                
                FpsPreXmlData = mFraudResp.Fps_PostXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("RuleId"+ mRuleType.RuleId);
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("NAME_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("NUM "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("TYPE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("VALUE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	    i++;
                	}
                }
            </code>
            <code lang="Visual Basic" escaped="false">
                ..............................
                ' Resp is the Response object 
                ' obtained after submitting the transaction.
                ..............................
                
                Dim FpsXmlData As FpsXmlData
                Dim Rules As New ArrayList
                Dim RuleType As Rule
                Dim RuleVendorParamType As RuleParameter
                Dim RuleVendorParams As New ArrayList
                
                if(Resp != null)
                {
            	' Get the Fraud Response
                	Dim FraudResp As FraudResponse = Resp.FraudResult
            	
                	If Object.Equals(FraudResp, Nothing) Then
                		return
                	EndIf
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData
                Rules = FpsPreXmlData.Rules()
                Dim iCount As Integer
                iCount = 0
                For Each RuleType In Rules
                
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
                
                FpsPostXmlData = FraudResp.Fps_PostXmlData
                Rules = FpsPostXmlData.Rules()
                For Each RuleType In Rules
                
                    Console.WriteLine("RuleId" + RuleType.RuleId)
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                
                    iCount = 0
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.FpsXmlData.mRules">
            <summary>
            Holds applied Rules.
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.FpsXmlData.Rules">
            <summary>
            Gets, Sets the Rule list
            </summary>
            <remarks>If the VERBOSITY set for the transaction is HIGH, 
            Fraud Protection Services return FPS_PREXMLDATA and/or 
            FPS_POSTXMLDATA response messages. This are xml messages.
            <para>While parsing the response, these xml messages are parsed 
            and populated into Rule data objects. These Rule objects are rules applied 
            by the Fraud Protection Services.. FpsXmlData is the container class 
            for all such rules.</para>
            <para>FpsXmlData data objects instances are contained in 
            FraduResponse and populated if obtained.</para>
            <seealso cref="T:PayPal.Payments.DataObjects.FraudResponse"/>
            <seealso cref="T:PayPal.Payments.DataObjects.Rule"/>
            <seealso cref="T:PayPal.Payments.DataObjects.RuleParameter"/>
            </remarks>
            <example>
            Following example shows how to obtained and use FpsXmlData.
            <code lang="C#" escaped="false">
                ..............................
                 // Resp is the Response object 
                // obtained after submitting the transaction.
                ..............................
                
                FpsXmlData mFpsXmlData;
                ArrayList mRules = new ArrayList();
                Rule mRuleType;
                RuleParameter mRuleVendorParamType;
                ArrayList mRuleVendorParams = new ArrayList();
                int i;
                
                if(Resp != null)
                {
            		// Get the Fraud Response
                	FraudResponse FraudResp = Resp.FraudResult;
            	
                	if(FraudResp == null)
                	{
                		return;
                	}
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("Name_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("Num_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("Type_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("Value_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	   i++;
                	}
                }
                
                FpsPreXmlData = mFraudResp.Fps_PostXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("RuleId"+ mRuleType.RuleId);
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("NAME_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("NUM "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("TYPE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("VALUE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	    i++;
                	}
                }
            </code>
            <code lang="Visual Basic" escaped="false">
                ..............................
                ' Resp is the Response object 
                ' obtained after submitting the transaction.
                ..............................
                
                Dim FpsXmlData As FpsXmlData
                Dim Rules As New ArrayList
                Dim RuleType As Rule
                Dim RuleVendorParamType As RuleParameter
                Dim RuleVendorParams As New ArrayList
                
                if(Resp != null)
                {
            	' Get the Fraud Response
                	Dim FraudResp As FraudResponse = Resp.FraudResult
            	
                	If Object.Equals(FraudResp, Nothing) Then
                		return
                	EndIf
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData
                Rules = FpsPreXmlData.Rules()
                Dim iCount As Integer
                iCount = 0
                For Each RuleType In Rules
                
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
                
                FpsPostXmlData = FraudResp.Fps_PostXmlData
                Rules = FpsPostXmlData.Rules()
                For Each RuleType In Rules
                
                    Console.WriteLine("RuleId" + RuleType.RuleId)
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                
                    iCount = 0
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FpsXmlData.#ctor">
            <summary>
            Constructor for FpsXmlData
            </summary>
            <remarks>If the VERBOSITY set for the transaction is HIGH, 
            Fraud Protection Services return FPS_PREXMLDATA and/or 
            FPS_POSTXMLDATA response messages. This are xml messages.
            <para>While parsing the response, these xml messages are parsed 
            and populated into Rule data objects. These Rule objects are rules applied 
            by the Fraud Protection Services.. FpsXmlData is the container class 
            for all such rules.</para>
            <para>FpsXmlData data objects instances are contained in 
            FraduResponse and populated if obtained.</para>
            <seealso cref="T:PayPal.Payments.DataObjects.FraudResponse"/>
            <seealso cref="T:PayPal.Payments.DataObjects.Rule"/>
            <seealso cref="T:PayPal.Payments.DataObjects.RuleParameter"/>
            </remarks>
            <example>
            Following example shows how to obtained and use FpsXmlData.
            <code lang="C#" escaped="false">
                ..............................
                 // Resp is the Response object 
                // obtained after submitting the transaction.
                ..............................
                
                FpsXmlData mFpsXmlData;
                ArrayList mRules = new ArrayList();
                Rule mRuleType;
                RuleParameter mRuleVendorParamType;
                ArrayList mRuleVendorParams = new ArrayList();
                int i;
                
                if(Resp != null)
                {
            		// Get the Fraud Response
                	FraudResponse FraudResp = Resp.FraudResult;
            	
                	if(FraudResp == null)
                	{
                		return;
                	}
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("Name_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("Num_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("Type_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("Value_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	   i++;
                	}
                }
                
                FpsPreXmlData = mFraudResp.Fps_PostXmlData;
                mRules = FpsPreXmlData.Rules;
                foreach (PayPal.Payments.DataObjects.Rule tempLoopVar_mRuleType in mRules)
                {
                	mRuleType = tempLoopVar_mRuleType;
                	
                	Console.WriteLine("RuleId"+ mRuleType.RuleId);
                	Console.WriteLine("ACTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Action);
                	Console.WriteLine("NUM FOR RULE ID - " + mRuleType.RuleId+ mRuleType.Num);
                	Console.WriteLine("RULEALIAS FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleAlias);
                	Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + mRuleType.RuleId+ mRuleType.RuleDescription);
                	Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + mRuleType.RuleId+ mRuleType.TriggeredMessage);
                	
                	mRuleVendorParams = mRuleType.RuleVendorParms;
                	i=0;
                	foreach (RuleParameter tempLoopVar_mRuleVendorParamType in mRuleVendorParams)
                	{
                		mRuleVendorParamType = tempLoopVar_mRuleVendorParamType;
                		Console.WriteLine("NAME_"+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Name);
                		Console.WriteLine("NUM "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Num);
                		Console.WriteLine("TYPE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Type);
                		Console.WriteLine("VALUE "+i.ToString()+" FOR RULE ID -"+mRuleType.RuleId+ mRuleVendorParamType.Value);
                	    i++;
                	}
                }
            </code>
            <code lang="Visual Basic" escaped="false">
                ..............................
                ' Resp is the Response object 
                ' obtained after submitting the transaction.
                ..............................
                
                Dim FpsXmlData As FpsXmlData
                Dim Rules As New ArrayList
                Dim RuleType As Rule
                Dim RuleVendorParamType As RuleParameter
                Dim RuleVendorParams As New ArrayList
                
                if(Resp != null)
                {
            	' Get the Fraud Response
                	Dim FraudResp As FraudResponse = Resp.FraudResult
            	
                	If Object.Equals(FraudResp, Nothing) Then
                		return
                	EndIf
                
                FpsPreXmlData = FraudResp.Fps_PreXmlData
                Rules = FpsPreXmlData.Rules()
                Dim iCount As Integer
                iCount = 0
                For Each RuleType In Rules
                
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
                
                FpsPostXmlData = FraudResp.Fps_PostXmlData
                Rules = FpsPostXmlData.Rules()
                For Each RuleType In Rules
                
                    Console.WriteLine("RuleId" + RuleType.RuleId)
                    Console.WriteLine("ACTION FOR RULE ID - " + RuleType.RuleId + RuleType.Action)
                    Console.WriteLine("NUM FOR RULE ID - " + RuleType.RuleId + RuleType.Num)
                    Console.WriteLine("RULEALIAS FOR RULE ID - " + RuleType.RuleId + RuleType.RuleAlias)
                    Console.WriteLine("RULEDESCRIPTION FOR RULE ID - " + RuleType.RuleId + RuleType.RuleDescription)
                    Console.WriteLine("TRIGGEREDMESSAGE FOR RULE ID - " + RuleType.RuleId + RuleType.TriggeredMessage)
                
                    RuleVendorParams = RuleType.RuleVendorParms
                
                    iCount = 0
                    For Each RuleVendorParamType In RuleVendorParams
                        Console.WriteLine("NAME_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Name)
                        Console.WriteLine("NUM_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Num)
                        Console.WriteLine("TYPE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Type)
                        Console.WriteLine("VALUE_" + iCount.ToString + " FOR RULE ID - " + RuleType.RuleId + RuleVendorParamType.Value)
                        iCount = iCount + 1
                    Next
                Next
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FpsXmlData.SetRuleList(System.Collections.ArrayList)">
            <summary>
            Sets the rule list with another
            rule list
            </summary>
            <param name="RuleList">Rulelist</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.FraudResponse">
            <summary>
            Container class for response messages 
            specific Fraud Protections Services
            </summary>
            <remarks>This class contains the fraud protection 
            services related response messages and data objects parsed 
            from the xml data in the fraud response.
            <seealso cref="T:PayPal.Payments.DataObjects.FpsXmlData"/>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.FraudResponse.mPreFpsMsg">
            <summary>
            Holds PreFpsMsg
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.FraudResponse.mPostFpsMsg">
            <summary>
            Holds PostFpsMsg
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.FraudResponse.mFpsPreXmlData">
            <summary>
            Holds Fps Pre Xml Data
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.FraudResponse.mFpsPostXmlData">
            <summary>
            Holds Fps Post Xml Data
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FraudResponse.#ctor">
            <summary>
            Constructor for Fraud response.
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.FraudResponse.PreFpsMsg">
            <summary>
            Gets, Sets  PreFpsMsg
            </summary>
            <remarks>
            Gets the FPS Pre FPS message.
            <para>Maps to Payflow Parameter:</para>
            <code>PREFPSMSG</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.FraudResponse.PostFpsMsg">
            <summary>
            Gets, Sets  PostFpsMsg
            </summary>
            <remarks>
            Gets the FPS Post FPS message.
            <para>Maps to Payflow Parameter:</para>
            <code>POSTFPSMSG</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.FraudResponse.Fps_PreXmlData">
            <summary>
            Gets, Sets  Fps_PreXmlData
            </summary>
            <remarks>
            Gets the FPS Pre Xml data message populated in
            FpsXmlData object.
            Its an itemized list of responses for trigerred filters
            <para>Maps to Payflow Parameter:</para>
            <code>FPS_PREXMLDATA</code>
            <seealso cref="T:PayPal.Payments.DataObjects.FpsXmlData"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.FraudResponse.Fps_PostXmlData">
            <summary>
            Gets, Sets  Fps_PostXmlData
            </summary>
            <remarks>
            Gets the FPS Post Xml data message populated in
            FpsXmlData object.
            <para>Maps to Payflow Parameter:</para>
            <code>FPS_POSTXMLDATA</code>
            <seealso cref="T:PayPal.Payments.DataObjects.FpsXmlData"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FraudResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets the Response params in
             response data objects.
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FraudResponse.SetFpsXmlData(System.Collections.Hashtable@)">
             <summary>
             Sets the Fps Xml data
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FraudResponse.SetRules(System.String)">
            <summary>
            Sets the FPS rules applied.
            </summary>
            <param name="XmlData">Xml String</param>
            <returns>FPS Xml Data object</returns>
        </member>
        <member name="M:PayPal.Payments.DataObjects.FraudResponse.ParseXmlData(System.String)">
            <summary>
            Parses FPS Xml String Data
            </summary>
            <param name="XmlData">Xml String Data</param>
            <returns>Rulelist</returns>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Invoice">
            <summary>
            Used as the Purchase Invoice class. All the purchase 
            related information can be stored in this class.
            </summary>
            <remarks>
            <para>Following transactions do require invoice object:</para>
            <list type="bullet">
            <item>Sale Transaction</item>
            <item>Authorization Transaction</item>
            <item>Voice Authorization Transaction</item>
            <item>Primary Credit Transaction</item>
            <item>Recurring Transaction : Action --> Add, Payment</item>
            </list>
            <para>However, Invoice information can also be passed 
            in the following transactions:</para>
            <list type="bullet">
            <item>Delayed Capture Transaction</item>
            <item>Credit Transaction</item>
            <item>Void Authorization Transaction</item>
            <item>Reference Credit Transaction</item>
            </list>
            <para>By default, the following fields are copied from the 
            primary transaction (if they exist) into the reference 
            transaction:</para>
            <list type="bullet">
            <item>Account number  	Amount  	City  	</item>
            <item>Comment1  	Comment2  	Company Name  	</item>
            <item>Country Cust_Code  	CustIP  	DL  	</item>
            <item>Num  	DOB  	Duty amount  	</item>
            <item>EMail  	Expiration date  	First name  	</item>
            <item>Freight amount  	Invoice number  	Last name  	</item>
            <item>Middle Name  	Purchase order number  	Ship To City  	</item>
            <item>Ship To Country  	Ship To First Name  	Ship To Last Name  	</item>
            <item>Ship To Middle Name  	Ship To State  	Ship To Street  	</item>
            <item>Ship To ZIP  	SS Num  	State  	</item>
            <item>Street  	Suffix  	Swipe data  	</item>
            <item>Tax amount  	Tax exempt  	Telephone  	</item>
            <item>Title		ZIP  	</item>
            </list>
            <para>If the invoice is passed in the reference transaction, then the 
            new values (if they exist in invoice) are used (except Account number,
            Expiration date, or Swipe data).</para>
            </remarks>
            <example>
            <para>Following example shows how to use invoice.</para>
            <code lang="C#" escaped="false">
             .................
            // Create a new Invoice data object with the Amount, Billing Address etc. details.
            Invoice Inv = new Invoice();
            // Set Amount.
            Currency Amt = new Currency(new decimal(25.12));
            Inv.Amt = Amt;
            Inv.PoNum = "PO12345";
            Inv.InvNum = "INV12345";
            Inv.AltTaxAmt = new Currency(new decimal(25.14));
            // Set the Billing Address details.
            BillTo Bill = new BillTo();
            Bill.BillToStreet = "123 Main St.";
            Bill.BillToZip = "12345";
            Inv.BillTo = Bill;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Create a new Invoice data object with the Amount, Billing Address etc. details.
            Dim Inv As Invoice = New Invoice
            ' Set Amount.
            Dim Amt As Currency = New Currency(New Decimal(25.12))
            Inv.Amt = Amt
            Inv.PoNum = "PO12345"
            Inv.InvNum = "INV12345"
            ' Set the Billing Address details.
            Dim Bill As BillTo = New BillTo
            Bill.BillToStreet = "123 Main St."
            Bill.BillToZip = "12345"
            Inv.BillTo = Bill
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mBillTo">
            <summary>
            Billing Addresses
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mShipTo">
            <summary>
            Shipping Addresses
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mItemList">
            <summary>
            List of line items
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mInvNum">
            <summary>
            Invoice number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mAmt">
            <summary>
            Amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mTaxAmt">
            <summary>
            Tax Amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDutyAmt">
            <summary>
            Duty amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mFreightAmt">
            <summary>
            Freight amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mHandlingAmt">
            <summary>
            Handling amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDiscount">
             <summary>
             Shipping amount
             </summary>
            private Currency mShippingAmt;
            <summary>
            Discount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDesc">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mComment1">
            <summary>
            Comment1
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mComment2">
            <summary>
            Comment2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDesc1">
            <summary>
            Description 1
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDesc2">
            <summary>
            Description 2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDesc3">
            <summary>
            Description 3
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDesc4">
            <summary>
            Description 3
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mCustRef">
            <summary>
            Customer Reference
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mInvoiceDate">
            <summary>
            Invoice date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mStartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mEndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mPoNum">
            <summary>
            Purchase order number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatRegNum">
            <summary>
            Vat reg number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatTaxAmt">
            <summary>
            Vat tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mLocalTaxAmt">
            <summary>
            Local tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mNationalTaxAmt">
            <summary>
            National tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mAltTaxAmt">
            <summary>
            Alt tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mTaxExempt">
            <summary>
            Is Tax Exempt
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mBrowserInfo">
            <summary>
            Browser information object
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mCustomerInfo">
            <summary>
            Customer information object
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mMerchantInfo">
            <summary>
            Merchant information object
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mUserItem">
            <summary>
            User information object
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderDate">
            <summary>
            Order Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderTime">
            <summary>
            Order Time
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mCommCode">
            <summary>
            Comm Code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatTaxPercent">
            <summary>
            VatTax Percent
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mRecurring">
            <summary>
            Recurring
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mItemAmt">
            <summary>
            line item amount 
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderDesc">
            <summary>
            OrderDesc
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mRecurringType">
            <summary>
            RecurringType
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderId">
            <summary>
            Order Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mEchoData">
            <summary>
            Echo data
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatInvNum">
            <summary>
            VAT Invoice Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatTaxRate">
            <summary>
            VAT Tax Rate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mReportGroup">
            <summary>
            Report Group
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mAdviceDetailList">
            <summary>
            AdviceDetailList
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mDevices">
            <summary>
            Devices
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mMiscData">
            <summary>
            Miscellaneous Data
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mSecureToken">
            <summary>
            Secure Token, used for Inquiry transaction
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mSCAExemption">
            <summary>
            SCA Exemption
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mCitDate">
            <summary>
            CitiDate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Invoice.mVMaid">
            <summary>a
             MVaid
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para>Following transactions do require invoice object:</para>
            <list type="bullet">
            <item>Sale Transaction</item>
            <item>Authorization Transaction</item>
            <item>Voice Authorization Transaction</item>
            <item>Primary Credit Transaction</item>
            <item>Recurring Transaction : Action --> Add, Payment</item>
            </list>
            <para>However, Invoice information can also be passed 
            in the following transactions:</para>
            <list type="bullet">
            <item>Delayed Capture Transaction</item>
            <item>Credit Transaction</item>
            <item>Void Authorization Transaction</item>
            <item>Reference Credit Transaction</item>
            </list>
            <para>By default, the following fields are copied from the 
            primary transaction (if they exist) into the reference 
            transaction:</para>
            <list type="bullet">
            <item>Account number  	Amount  	City  	</item>
            <item>Comment1  	Comment2  	Company Name  	</item>
            <item>Country Cust_Code  	CustIP  	DL  	</item>
            <item>Num  	DOB  	Duty amount  	</item>
            <item>EMail  	Expiration date  	First name  	</item>
            <item>Freight amount  	Invoice number  	Last name  	</item>
            <item>Middle Name  	Purchase order number  	Ship To City  	</item>
            <item>Ship To Country  	Ship To First Name  	Ship To Last Name  	</item>
            <item>Ship To Middle Name  	Ship To State  	Ship To Street  	</item>
            <item>Ship To ZIP  	SS Num  	State  	</item>
            <item>Street  	Suffix  	Swipe data  	</item>
            <item>Tax amount  	Tax exempt  	Telephone  	</item>
            <item>Title		ZIP  	</item>
            <item>UK: Capture Complete Recurring Type  	</item>
            </list>
            <para>If the invoice is passed in the reference transaction, then the 
            new values (if they exist in invoice) are used (except Account number,
            Expiration date, or Swipe data).</para>
            </remarks>
            <example>
            <para>Following example shows how to use invoice.</para>
            <code lang="C#" escaped="false">
             .................
            // Create a new Invoice data object with the Amount, Billing Address etc. details.
            Invoice Inv = new Invoice();
            // Set Amount.
            Currency Amt = new Currency(new decimal(25.12));
            Inv.Amt = Amt;
            Inv.PoNum = "PO12345";
            Inv.InvNum = "INV12345";
            Inv.AltTaxAmt = new Currency(new decimal(25.14));
            // Set the Billing Address details.
            BillTo Bill = new BillTo();
            Bill.BillToStreet = "123 Main St.";
            Bill.BillToZip = "12345";
            Inv.BillTo = Bill;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Create a new Invoice data object with the Amount, Billing Address etc. details.
            Dim Inv As Invoice = New Invoice
            ' Set Amount.
            Dim Amt As Currency = New Currency(New Decimal(25.12))
            Inv.Amt = Amt
            Inv.PoNum = "PO12345"
            Inv.InvNum = "INV12345"
            ' Set the Billing Address details.
            Dim Bill As BillTo = New BillTo
            Bill.BillToStreet = "123 Main St."
            Bill.BillToZip = "12345"
            Inv.BillTo = Bill
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.BillTo">
            <summary>
            Gets, Sets  BillTo.
            </summary>
            <remarks>
            <para>Use this property to set the billing
            addresses of the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Billing Address details.
            BillTo Bill = New BillTo();
            Bill.BillToStreet = "123 Main St.";
            Bill.BillToZip = "12345";
            Inv.BillTo = Bill;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Billing Address details.
            Dim Bill As BillTo = New BillTo
            Bill.BillToStreet = "123 Main St."
            Bill.BillToZip = "12345"
            Inv.BillTo = Bill
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.ShipTo">
            <summary>
            Gets, Sets  ShipTo.
            </summary>
            <remarks>
            <para>Use this property to set the shipping
            addresses of the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Shipping Address details.
            ShipTo Ship = New ShipTo();
            Ship.ShipToStreet = "685A E. Middlefield Rd.";
            Ship.ShipToZip = "94043";
            Inv.ShipTo = Ship;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Shipping Address details.
            Dim Ship As ShipTo = New ShipTo
            Ship.ShipToStreet = "685A E. Middlefield Rd."
            Ship.ShipToZip = "94043"
            Inv.ShipTo = Ship
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.TaxExempt">
            <summary>
            Gets, Sets  TaxExempt.
            </summary>
            <remarks>
            <para>Is the customer tax exempt? Y or N</para>
            <para>Maps to Payflow Parameter:</para>
            <code>TAXEXEMPT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.InvNum">
            <summary>
            Gets, Sets  InvNum
            </summary>
            <remarks>
            <para>Merchant invoice number. This reference number 
            (PNREF—generated by PayPal) is used for authorizations 
            and settlements.</para>
            <para>The Acquire decides if this information will 
            appear on the merchant’s bank reconciliation statement.
            </para>
            <para>Maps to Payflow Parameter:</para>
            <code>INVNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Amt">
            <summary>
            Gets, Sets  Amt.
            </summary>
            <remarks>
            <para>Amount (US Dollars) U.S. based currency. 
            Specify the exact amount to the cent using a decimal 
            point—use 34.00, not 34. Do not include comma 
            separators—use 1199.95 not 1,199.95.</para>
            <para>Your processor and/or Internet merchant account 
            provider may stipulate a maximum amount.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AMT</code>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Amount for the invoice.
            // A valid amount is a two decimal value.
            Currency Amt = new Currency(new decimal(25.12))
            //For values which have more than two decimal places 
            Currency Amt = new Currency(new decimal(25.1214));
            Amt.NoOfDecimalDigits = 2;
            //If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.
            Amt.Round = true;
            Amt.Truncate = true;
            Inv.Amt = Amt;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            'Set the Amount for the invoice.
            'A valid amount is a two decimal value.
            Dim Amt as new Currency(new decimal(25.12))
            'For values which have more than two decimal places 
            Dim Amt as new Currency(new decimal(25.1214))
            Amt.NoOfDecimalDigits = 2
            'If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.
            Amt.Round = true
            Amt.Truncate = true
            Inv.Amt = Amt;
            ................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.TaxAmt">
            <summary>
            Gets, Sets  TaxAmt.
            </summary>
            <remarks>
            <para>Tax Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>TAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.DutyAmt">
            <summary>
            Gets, Sets  DutyAmt.
            </summary>
            <remarks>
            <para>Sometimes called import tax.
             Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DUTYAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.FreightAmt">
            <summary>
            Gets, Sets  FreightAmt.
            </summary>
            <remarks>
            <para>Freight Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>FREIGHTAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.HandlingAmt">
            <summary>
            Gets, Sets  HandlingAmt
            </summary>
            <remarks>
            <para>Handling Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>HANDLINGAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Discount">
             <summary>
             Gets, Sets  ShippingAmt
             </summary>
             <remarks>
             <para>Shipping Amount. Amount should always be a decimal.
              Exact amount to the cent (34.00, not 34). 
              Do not include comma separators. Use 1199.95 
              instead of 1,199.95.</para>
             <para>Maps to Payflow Parameter:</para>
             <code>SHIPPINGAMT</code>
             </remarks>
            public Currency ShippingAmt
            {
             get { return mShippingAmt; }
            	set { mShippingAmt = value; }
            }
            <summary>
            Gets, Sets  Discount.
            </summary>
            <remarks>
            <para>Discount amount on total sale. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DISCOUNT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Desc">
            <summary>
            Gets, Sets  Desc.
            </summary>
            <remarks>
            <para>General description of the transaction.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DESC</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Comment1">
            <summary>
            Gets, Sets  Comment1
            </summary>
            <remarks>
            <para>Merchant-defined value for reporting and auditing
            purposes.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>COMMENT1</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Comment2">
            <summary>
            Gets, Sets  Comment2
            </summary>
            <remarks>
            <para>Merchant-defined value for reporting and auditing
            purposes.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>COMMENT2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Desc1">
            <summary>
            Gets, Sets  Desc1.
            </summary>
            <remarks>
            <para>Up to 4 lines of additional description of
            the charge.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DESC1</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Desc2">
            <summary>
            Gets, Sets  Desc2.
            </summary>
            <remarks>
            <para>Up to 4 lines of additional description of
            the charge.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DESC2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Desc3">
            <summary>
            Gets, Sets  Desc3.
            </summary>
            <remarks>
            <para>Up to 4 lines of additional description of
            the charge.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DESC3</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Desc4">
            <summary>
            Gets, Sets  Desc4.
            </summary>
            <remarks>
            <para>Up to 4 lines of additional description of
            the charge.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DESC4</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.CustRef">
            <summary>
            Gets, Sets  CustRef.
            </summary>
            <remarks>
            <para> Merchant-defined identifier for reporting and auditing
            purposes. For example, you can set CUSTREF to the
            invoice number.</para>
            <para>You can use CUSTREF when performing Inquiry
            transactions. To ensure that you can always access
            the correct transaction when performing an Inquiry,
            you must provide a unique CUSTREF when
            submitting any transaction, including retries.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.InvoiceDate">
            <summary>
            Gets, Sets  InvoiceDate.
            </summary>
            <remarks>
            <para>Transaction Date.</para>
            <para>Format: yyyymmdd.</para>
            <para>yyyy - Year, mm - Month, dd - Day.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>INVOICEDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.StartTime">
            <summary>
            Gets, Sets  StartTime
            </summary>
            <remarks>
            <para>STARTTIME specifies the beginning of the time
            period during which the transaction specified by the
            CUSTREF occurred. </para>
            <para>If you set STARTTIME, and not ENDTIME, then
            ENDTIME is defaulted to 30 days after STARTTIME.
            If neither STARTTIME nor ENDTIME is specified, then
            the system searches the last 30 days.</para>
            <para>Format: yyyymmddhhmmss</para>
            <para>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>STARTTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.EndTime">
             <summary>
             Gets, Sets  EndTime.
             </summary>
             <remarks>
            <para>	ENDTIME specifies the end of the time period during 
             which the transaction specified by the CUSTREF occurred.</para>
            <para>	ENDTIME must be less than 30 days after STARTTIME.
             An inquiry cannot be performed across a date range 
             greater than 30 days.</para>
            <para>	If you set ENDTIME, and not STARTTIME, then STARTTIME is 
             defaulted to 30 days before ENDTIME. If neither 
             STARTTIME nor ENDTIME is specified, then the
             system searches the last 30 days.</para>
            <para>	Format: yyyymmddhhmmss</para>
            <para>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</para>
             <para>Maps to Payflow Parameter:</para>
             <code>ENDTIME</code>
             </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.PoNum">
            <summary>
            Gets, Sets  PoNum.
            </summary>
            <remarks>
            <para>Purchase Order Number / Merchant related
            data.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PONUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.VatRegNum">
            <summary>
            Gets, Sets  VatRegNum
            </summary>
            <remarks>
            <para>VAT registration number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>VATREGNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.VatTaxAmt">
            <summary>
            Gets, Sets  VatTaxAmt.
            </summary>
            <remarks>
            <para>VAT Tax Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>VATTAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.LocalTaxAmt">
            <summary>
            Gets, Sets  LocalTaxAmt.
            </summary>
            <remarks>
            <para>Local Tax Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>LOCALTAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.NationalTaxAmt">
            <summary>
            Gets, Sets  NationalTaxAmt.
            </summary>
            <remarks>
            <para>National Tax Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>NATIONALTAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.AltTaxAmt">
            <summary>
            Gets, Sets  AltTaxAmt.
            </summary>
            <remarks>
            <para>Alternate Tax Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ALTTAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.BrowserInfo">
            <summary>
            Gets, Sets  BrowserInfo.
            </summary>
            <remarks>
            <para>Use this property to set the browser 
            related information of the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Browser Info details.
            BrowserInfo Browser = New BrowserInfo();
            Browser.BrowserCountryCode = "USA";
            Browser.BrowserUserAgent = "IE 6.0";
            Inv.BrowserInfo = Browser;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Browser Info details.
            Dim Browser As BrowserInfo = New BrowserInfo
            Browser.BrowserCountryCode  = "USA"
            Browser.BrowserUserAgent = "IE 6.0"
            Inv.BrowserInfo = Browser
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.CustomerInfo">
            <summary>
            Gets, Sets  CustomerInfo.
            </summary>
            <remarks>
            <para>Use this property to set the customer 
            related information of the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Customer Info details.
            CustomerInfo Cust = New CustomerInfo();
            Cust.CustCode = "CustXXXXX";
            Cust.CustIP = "255.255.255.255";
            Inv.CustomerInfo = Cust;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Customer Info details.
            Dim Cust As CustomerInfo = New CustomerInfo
            Cust.CustCode = "CustXXXXX"
            Cust.CustIP = "255.255.255.255"
            Inv.CustomerInfo = Cust
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.MerchantInfo">
            <summary>
            Used for Merchant related information.
            </summary>
            <remarks>Use this class to set the Merchant related 
            information.  Used for Soft Descriptors.  
            
            Refer to the Payflow Gateway Developer's Guide for your processor
            for more information related to this fields.</remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Merchant Info details.
            MerchantInfo Merchant = New MerchantInfo();
            Merchant.MerchantCode = "MerchantXXXXX";
            Merchant.MerchantCity = "Anywhere";
            Inv.MerchantInfo = Merchant;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Merchant Info details.
            Dim Merchant As MerchantInfo = New MerchantInfo
            Merchant.MerchantCode = "MerchantXXXXX"
            Merchant.MerchantCity = "Anywhere"
            Inv.MerchantInfo = Merchant
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.UserItem">
            <summary>
            Gets, Sets  UserItem.
            </summary>
            <remarks>
            <para>Use this property to set the user 
            related information that is echoed back in the response.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the User Item details.
            UserItem nUser = new UserItem();
            nUser.UserItem1 = "ABCDEF";
            nUser.UserItem2 = "GHIJKL";
            Inv.UserItem = nUser;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the User Item details.
            Dim nUser As New UserItem
            nUser.UserItem1 = "ABCDEF"
            nUser.UserItem2 = "GHIJKL"
            Inv.UserItem = nUser
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.OrderDate">
            <summary>
            Gets, Sets  OrderDate.
            </summary>
            <remarks>
            <para>Order date.</para>
            <para>Format: mmddyy</para>
            <para>mm - Month, dd - Day, yy - Year.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ORDERDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.OrderTime">
            <summary>
            Gets, Sets  OrderTime.
            </summary>
            <remarks>
            <para>Order Time.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ORDERTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.CommCode">
            <summary>
            Gets, Sets  CommCode.
            </summary>
            <remarks>
            <para>Commodity Code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>COMMCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.VatTaxPercent">
            <summary>
            Gets, Sets  VATTAXPERCENT.
            </summary>
            <remarks>
            <para>VAT Tax percentage.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>VATTAXPERCENT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Recurring">
            <summary>
            Gets, Sets  Recurring.
            </summary>
            <remarks>
            <para>Is a recurring transaction? Y or N.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>RECURRING</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.ItemAmt">
            <summary>
            Gets, Sets line item Amount.
            </summary>
            <remarks>
            <para>Item Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ITEMAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.OrderDesc">
            <summary>
            Gets, Sets  OrderDesc.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ORDERDESC</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.RecurringType">
            <summary>
            Gets, Sets  RecurringType.
            </summary>
            <remarks>
            <para>UK Only: The type of transaction occurrence.
            Values are: F = First occurrence, S = Subsequent
            occurrence (default).</para>
            <para>Maps to Payflow Parameter:</para>
            <code>RECURRINGTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.OrderId">
            <summary>
            Gets, Sets  OrderId
            </summary>
            <remarks>
            <para>Order ID is used to prevent duplicate "orders" from being processed.</para>
            <para>This is NOT the same as Request ID; which is used at the transaction level.</para>
            <para>Order ID (ORDERID) is used to check for a duplicate order in the future.</para>
            <para>For example, if you pass ORDERID=10101 and in two weeks another order is processed</para>
            <para>with the same ORDERID, a duplicate condition will occur.  The results you receive</para>
            <para>will be from the original order with DUPLICATE=2 to show that it was ORDERID that</para>
            <para>triggered the duplicate.  The order id is stored for 3 years.</para>
            <para></para>
            <para>Important Note: Order ID functionality to catch duplicate orders processed withing</para>
            <para>seconds of each other is limited.  Order ID should be used in conjunction with Request ID</para>
            <para>to prevent duplicates due to processing / communication errors. DO NOT use ORDERID</para>
            <para>as your only means to check for duplicate transactions.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ORDERID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.EchoData">
            <summary>
            Gets, Sets  EchoData
            </summary>
            <remarks>
            <para>Echo Data is used to "echo" back data sent for processing in the response.</para>
            <para>For example, if you send "ECHODATA=ADDRESS" then the Billing Address fields</para>
            <para>will be returned in the response.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ECHODATA</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.VatInvNum">
            <summary>
            Gets, Sets  VAT Invoice Number.
            </summary>
            <remarks>
            <para>Value added tax invoice number.</para>
            <para>Maps to Payflow Parameter: 
            <code>VATINVNUM</code></para>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.VatTaxRate">
            <summary>
            Gets, Sets  VAT Tax Rate.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>VATTAXRATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.ReportGroup">
            <summary>
            Gets, Sets  Report Group.
            </summary>
            <remarks>
            <para>Category that the transaction is in, for example: coffee mugs.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>REPORTGROUP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.Devices">
            <summary>
            Gets, Sets Devices.
            </summary>
            <remarks>
            <para>
            Items that reflect what type of device; either termainal or card is used or presented.
            </para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Create a new Devices object.
            Devices UsedDevices = new Devices();
            UsedDevices.CatType = "3";
            UsedDevices.Contactless = "RFD";
            Inv.Devices = UsedDevices;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the device/card capabilities
            Dim UsedDevices As Devices = New Devices
            UsedDevices.CatType = "3"
            UsedDevices.Contactless = "RFD"
            Inv.Devices = UsedDevices
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.MiscData">
            <summary>
            Gets, Sets  Miscellaneous Data.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MISCDATA</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.SecureToken">
            <summary>
            Gets, Sets  SecureToken.
            </summary>
            <remarks>
            <para> Merchant-defined identifier used in the Secure Token flow.
            </para>
            <para>You can use SECURETOKEN when performing Inquiry transactions. To ensure that you can always access
            the correct transaction when performing an Inquiry, you must use CREATESECURETOKEN when
            submitting any transaction.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>SECURETOKEN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Invoice.SCAExemption">
            <summary>
            Gets, Sets  SCAExemption.
            </summary>
            <remarks>
            <para> Value to flag exemption status.
            </para>
            <para> Only one of the following values can be sent: TM, SCP, TRA, LVP, MIT, RP, SD, TM</para>
            <para>Maps to Payflow Parameter:</para>
            <code>SCAEXEMPTION</code>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PayPal.Payments.DataObjects.Invoice.CitDate" -->
        <!-- Badly formed XML comment ignored for member "P:PayPal.Payments.DataObjects.Invoice.VMaid" -->
        <member name="M:PayPal.Payments.DataObjects.Invoice.AddAdviceDetailItem(PayPal.Payments.DataObjects.AdviceDetail)">
            <summary>
            Used for advice detail items.
            </summary>
            <remarks>
            This class holds the advice detail related information.
            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
            </remarks>
            <example>
            <para>Following example shows how to use AdviceDetail.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
            // Set the Advice Detail items.
            AdviceDetail AddDetail1 = new AdviceDetail();
            AddDetail1.AddLAmt = "1";
            AddDetail1.AddLAmtType = "1";
            Inv.AddAdviceDetailItem(AddDetail1);
            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             ' Set the Advice Detail items.
             Dim AddDetail1 As AdviceDetail = New AdviceDetail
             AddDetail1.AddLAmt = "1"
             AddDetail1.AddLAmtType = "1"
             Inv.AddAdviceDetailItem(AddDetail1)
             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveAdviceDetailItem(System.Int32)">
            <summary>
            Removes a advice detail item from line item list.
            </summary>
            <param name="Index">Index of line item to be removed.</param>
            <remarks>
            <para>Use this method to remove an advice detail item at a particular 
            index in the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Remove item at index 0
            Inv.RemoveAdviceDetailItem(0);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Remove item at index 0;
            Inv.RemoveAdviceDetailItem(0)
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveAllAdviceDetailItems">
            <summary>
            Clears the advice detail item list.
            </summary>
            <remarks>
            <para>Use this method to clear all the 
            advice detail items added to the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Remove all advice detail items.
            Inv.RemoveAllAdviceDetailItems();
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Remove all advice detail items.
            Inv.RemoveAllAdviceDetailItems()
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.AddLineItem(PayPal.Payments.DataObjects.LineItem)">
            <summary>
            Adds a line item to line item list.
            </summary>
            <param name="Item">Lineitem object</param>
            <remarks>
            <para>Use this method to add a line item in
            the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the line item details.
            LineItem Item = New LineItem();
            Item.PickupStreet = "685A E. Middlefield Rd.";
            Item.PickupState = "CA";
            Inv.AddLineItem(Item);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Customer Info details.
            Dim Item As LineItem = New LineItem
            Item.PickupStreet = "685A E. Middlefield Rd."
            Item.PickupState = "CA"
            Inv.AddLineItem(Item);
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveLineItem(System.Int32)">
            <summary>
            Removes a line item from line item list.
            </summary>
            <param name="Index">Index of lineitem to be removed.</param>
            <remarks>
            <para>Use this method to remove a line item at a particular 
            index in the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Remove item at index 0
            Inv.RemoveLineItem(0);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Remove item at index 0;
            Inv.RemoveLineItem(0)
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveAllLineItems">
            <summary>
            Clears the line item list.
            </summary>
            <remarks>
            <para>Use this method to clear all the 
            line items added to the purchase order.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Remove all line items.
            Inv.RemoveAllLineItems();
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Remove all line items.
            Inv.RemoveAllLineItems()
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.GenerateItemRequest">
            <summary>
            Generates transaction request for line items
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.GenerateAdviceDetailRequest">
            <summary>
            Generates transaction request for advice detail items
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Invoice.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.IRequestDataObject">
            <summary>
            Interface for all request data objects.
            </summary>
            <remarks>This interface can be used to create a new 
            request data object.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.IRequestDataObject.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
            <remarks>When implemented in the derived class, this method 
            should be preferred to be made as an internal method.</remarks>
        </member>
        <member name="T:PayPal.Payments.DataObjects.IResponseDataObject">
            <summary>
            Interface for all response data objects.
            </summary>
            <remarks>This interface can be used to create a new 
            response data object.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.IResponseDataObject.SetParams">
            <summary>
            Sets response params.
            </summary>
            <remarks>When implemented in the derived class, this method 
            should be preferred to be made as an internal method.</remarks>
        </member>
        <member name="T:PayPal.Payments.DataObjects.AdviceDetail">
            <summary>
            Used for advice detail items.
            </summary>
            <remarks>
            This class holds the advice detail related information.
            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
            </remarks>
            <example>
            <para>Following example shows how to use AdviceDetail.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
            // Set the Advice Detail items.
            AdviceDetail AddDetail1 = new AdviceDetail();
            AddDetail1.AddLAmt = "1";
            AddDetail1.AddLAmtType = "1";
            Inv.AddAdviceDetailItem(AddDetail1);
            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             ' Set the Advice Detail items.
             Dim AddDetail1 As AdviceDetail = New AdviceDetail
             AddDetail1.AddLAmt = "1"
             AddDetail1.AddLAmtType = "1"
             Inv.AddAdviceDetailItem(AddDetail1)
             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAdviceDetailNumber">
            <summary>
            Advice Detail Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAddLAmt">
            <summary>
            Advice Detail Amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAddLAmtType">
            <summary>
            Advice Detail Amount Type
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmt">
            <summary>
            Gets, Sets advice detail amount
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ADDLAMTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmtType">
            <summary>
            Gets, Sets advice detail amount type
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ADDLAMTTYPEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AdviceDetailNumber">
            ------------------------------------------------------
            <summary>
            Gets, Sets advice detail line item number.
            </summary>
            <remarks>
            <para></para>
            <para>Maps to Payflow Parameter:</para>
            <code>ADDLxxxxn</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.AdviceDetail.#ctor">
            <summary>
            Used for advice detail items.
            </summary>
            <remarks>
            This class holds the advice detail related information.
            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
            </remarks>
            <example>
            <para>Following example shows how to use AdviceDetail.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
            // Set the Advice Detail items.
            AdviceDetail AddDetail1 = new AdviceDetail();
            AddDetail1.AddLAmt = "1";
            AddDetail1.AddLAmtType = "1";
            Inv.AddAdviceDetailItem(AddDetail1);
            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             ' Set the Advice Detail items.
             Dim AddDetail1 As AdviceDetail = New AdviceDetail
             AddDetail1.AddLAmt = "1"
             AddDetail1.AddLAmtType = "1"
             Inv.AddAdviceDetailItem(AddDetail1)
             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.AdviceDetail.GenerateRequest(System.Int32)">
            <summary>
            Generates advice detail item request
            </summary>
            <param name="Index">index number of advice detail item</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.LineItem">
            <summary>
            This class holds the Invoice Line Item item related information.
            </summary>
            <remarks>
            <para>Line item data describes the details of the item purchased and can be can be passed 
             for each transaction. The convention for passing line item data in name/value pairs 
             is that each name/value starts with L_ and ends with n where n is the line item number.
             For example L_QTY0=1 is the quantity for line item 0 and is equal to 1, 
             with n starting at 0</para>
            </remarks>
            <example>
            <para>Following example shows how to use line item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a line item.
             LineItem Item = new LineItem();
             
             //Add info to line item.
             Item.Amt = new Currency(new Decimal(25.12));
             Item.PickupStreet = "685A E. Middlefield Rd.";
             
             //Add line item to invoice.
             Inv.AddLineItem(Item);
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a line item.
             Dim Item As LineItem  = New LineItem
             
             'Add info to line item.
             Item.Amt = New Currency(new Decimal(25.12))
             Item.PickupStreet = "685A E. Middlefield Rd."
             
             'Add line item to invoice.
             Inv.AddLineItem(Item)
             
             ..................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mAmt">
            <summary>
            line item amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mCost">
            <summary>
            line item cost
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mFreightAmt">
            <summary>
            line item freight amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mTaxAmt">
            <summary>
            line item tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mUom">
            <summary>
            line item uom
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mPickupStreet">
            <summary>
            line item pickup street
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mPickupState">
            <summary>
            line item pickup state
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mPickupCountry">
            <summary>
            line item pickup country
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mPickupCity">
            <summary>
            line item pickup city
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mPickupZip">
            <summary>
            line item pickup zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mDesc">
            <summary>
            line item desc
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mDiscount">
            <summary>
            line item discount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mManufacturer">
            <summary>
            line item manufacturer
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mProdCode">
            <summary>
            line item prodcode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mQty">
            <summary>
            line item qty
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mSku">
            <summary>
            line item sku
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mTaxRate">
            <summary>
            line item taxrate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mTaxType">
            <summary>
            line item tax type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mType">
            <summary>
            line item type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mCommCode">
            <summary>
            line item commcode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mTrackingNum">
            <summary>
            line item tracking number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mCostCenterNum">
            <summary>
            line item cost center number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mCatalogNum">
            <summary>
            line item catalog number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mUpc">
            <summary>
            line item upc
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mHandlingAmt">
            <summary>
            line item handlingamount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mUnspscCode">
            <summary>
            line item unspsc code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxAmt">
            <summary>
            line item alternate tax amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxId">
            <summary>
            line item alternate tax Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxRate">
            <summary>
            line item alternate tax rate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mCarrierServiceLevelCode">
            <summary>
            line item carrier service level code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mExtAmt">
            <summary>
            line item extra amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mName">
            --------------------------------------
            
            <summary>
            line item name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.LineItem.mItemNumber">
            <summary>
            line item number
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Amt">
            <summary>
            Gets, Sets line item Amt.
            </summary>
            <remarks>
            <para>Total line item amount including tax and 
             discount. + for debit, - for credits. 
             Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_AMTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Cost">
            <summary>
            Gets, Sets line item Cost.
            </summary>
            <remarks>
            <para>Cost per item, excluding tax. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_COSTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.FreightAmt">
            <summary>
            Gets, Sets line item FreightAmt.
            </summary>
            <remarks>
            <para>Freight Amount per item. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_FREIGHTAMTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.TaxAmt">
            <summary>
            Gets, Sets line item TaxAmt.
            </summary>
            <remarks>
            <para>Tax Amount per item. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_TAXAMTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.UOM">
            <summary>
            Gets, Sets line item UOM.
            </summary>
            <remarks>
            <para>Item unit of measure.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_UOMn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.PickupStreet">
            <summary>
            Gets, Sets line item PickupStreet.
            </summary>
            <remarks>
            <para>Item drop-off address1.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PICKUPSTREETn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.PickupState">
            <summary>
            Gets, Sets line item PickupState.
            </summary>
            <remarks>
            <para>Item drop-off state.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PICKUPSTATEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.PickupCountry">
            <summary>
            Gets, Sets line item PickupCountry.
            </summary>
            <remarks>
            <para>Item drop-off country.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PICKUPCOUNTRYn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.PickupCity">
            <summary>
            Gets, Sets line item PickupCity.
            </summary>
            <remarks>
            <para>Item drop-off city.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PICKUPCITYn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.PickupZip">
            <summary>
            Gets, Sets line item PickupZip.
            </summary>
            <remarks>
            <para>Item drop-off zip.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PICKUPZIPn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Desc">
            <summary>
            Gets, Sets line item Desc.
            </summary>
            <remarks>
            <para>Item description.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_DESCn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Discount">
            <summary>
            Gets, Sets line item Discount.
            </summary>
            <remarks>
            <para>Discount Amount per item. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_DISCOUNTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Manufacturer">
            <summary>
            Gets, Sets line item Manufacturer.
            </summary>
            <remarks>
            <para>Item manufacturer.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_MANUFACTURERn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.ProdCode">
            <summary>
            Gets, Sets line item ProdCode.
            </summary>
            <remarks>
            <para>Item product code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_PRODCODEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Qty">
            <summary>
            Gets, Sets line item Qty.
            </summary>
            <remarks>
            <para>Quantity per item.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_QTYn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.SKU">
            <summary>
            Gets, Sets line item SKU.
            </summary>
            <remarks>
            <para>Item SKU.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_SKUn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.TaxRate">
            <summary>
            Gets, Sets line item TaxRate.
            </summary>
            <remarks>
            <para>Tax Rate Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_TAXRATEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.TaxType">
            <summary>
            Gets, Sets line item TaxType.
            </summary>
            <remarks>
            <para>Item tax type.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_TAXTYPEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Type">
            <summary>
            Gets, Sets line item Type.
            </summary>
            <remarks>
            <para>Item type.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_TYPEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.CommCode">
            <summary>
            Gets, Sets line item CommCode.
            </summary>
            <remarks>
            <para>Item commodity code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_COMMCODEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.TrackingNum">
            <summary>
            Gets, Sets line item TrackingNum.
            </summary>
            <remarks>
            <para>Item tracking number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_TRACKINGNUMn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.CostCenterNum">
            <summary>
            Gets, Sets line item CostCenterNum.
            </summary>
            <remarks>
            <para>Item cost center number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_COSTCENTERNUMn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.CatalogNum">
            <summary>
            Gets, Sets line item CatalogNum.
            </summary>
            <remarks>
            <para>Item catalog number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_CATALOGNUMn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.UPC">
            <summary>
            Gets, Sets line item UPC.
            </summary>
            <remarks>
            <para>Item universal product code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_UPCn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.HandlingAmt">
            <summary>
            Gets, Sets line item HandlingAmt.
            </summary>
            <remarks>
            <para>Item Handling Amount. Amount should always be a decimal.
             Exact amount to the cent (34.00, not 34). 
             Do not include comma separators. Use 1199.95 
             instead of 1,199.95.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_HANDLINGAMTn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.UnspscCode">
            <summary>
            Gets, Sets line item unspsc code.
            </summary>
            <remarks>
            <para>Item UnspscCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_UNSPSCCODEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxAmt">
            <summary>
            Gets, Sets line item alternate tax code.
            </summary>
            <remarks>
            <para>Item AltTaxAmt.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_ALTTAXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxId">
            <summary>
            Gets, Sets line item alternate tax Id.
            </summary>
            <remarks>
            <para>Item AltTaxId.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_ALTTAXID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxRate">
            <summary>
            Gets, Sets line item alternate tax rate.
            </summary>
            <remarks>
            <para>Item AltTaxRate.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_ALTTAXRATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.CarrierServiceLevelCode">
            <summary>
            Gets, Sets line item carrier service level code
            </summary>
            <remarks>
            <para>Item CarrierServiceLevelCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_CARRIERSERVICELEVELCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.ExtAmt">
            <summary>
            Gets, Sets line item extended amount
            <remarks>
            <para>Item ExtAmt</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_EXTAMT</code>
            </remarks>
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.Name">
            ------------------------------------------------------
            <summary>
            Gets, Sets line item name.
            </summary>
            <remarks>
            <para>Item UnspscCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_NAMEn</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.LineItem.ItemNumber">
            <summary>
            Gets, Sets line item number.
            </summary>
            <remarks>
            <para></para>
            <para>Maps to Payflow Parameter:</para>
            <code>L_xxxxn</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.LineItem.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para>Line item data describes the details of the item purchased and can be can be passed 
             for each transaction. The convention for passing line item data in name/value pairs 
             is that each name/value starts with L_ and ends with n where n is the line item number.
             For example L_QTY0=1 is the quantity for line item 0 and is equal to 1, 
             with n starting at 0</para>
            </remarks>
            <example>
            <para>Following example shows how to use line item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a line item.
             LineItem Item = new LineItem();
             
             //Add info to line item.
             Item.Amt = new Currency(new Decimal(25.12));
             Item.PickupStreet = "685A E. Middlefield Rd.";
             
             //Add line item to invoice.
             Inv.AddLineItem(Item);
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a line item.
             Dim Item As LineItem  = New LineItem
             
             'Add info to line item.
             Item.Amt = New Currency(new Decimal(25.12))
             Item.PickupStreet = "685A E. Middlefield Rd."
             
             'Add line item to invoice.
             Inv.AddLineItem(Item)
             
             ..................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.LineItem.GenerateRequest(System.Int32)">
            <summary>
            Generates line item request
            </summary>
            <param name="Index">index number of line item</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.MagtekInfo">
            <summary>
            Used for Magtek related information.
            </summary>
            <remarks>Use the MagtekInfo object for the Magtek
            encrypted card reader related information.</remarks>
            <example>
            <para>Following example shows how to use the MagtekInfo object.</para>
            <code lang="C#" escaped="false">
            .................
            // Swipe is the SwipeCard object
            .................
            // Set the Magtek Info details.
            MagtekInfo MT = new MagtekInfo();
            MT.DeviceSN = "Device Serial Number from reader";
            MT.EncMP = "ENCMP from reader";
            MT.EncryptionBlockType = "1";
            MT.EncTrack1 = "Track 1 data from reader";
            MT.EncTrack2 = "Track 2 data from reader";
            MT.EncTrack3 = "";
            MT.KSN = "KSN from reader";
            MT.MagtekCardType = "1";
            MT.MPStatus = "MPStatus from reader";
            MT.RegisteredBy = "PayPal";
            MT.SwipedECRHost = "MAGT";
            // When using Encrypted Card Readers you do not populate the SwipeCard object as the data from the Magtek object
            // will be used instead.
            SwipeCard Swipe = new SwipeCard("");
            Swipe.MagtekInfo = MT;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Browser Info details.
            Dim Browser As BrowserInfo = New BrowserInfo
            Browser.BrowserCountryCode  = "USA"
            Browser.BrowserUserAgent = "IE 6.0"
            Inv.BrowserInfo = Browser
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mEncMP">
            <summary>
            Holds Encrypted MagnePrint Information
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mEncryptionBlockType">
            <summary>
            Holds Encryption Block
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mEncTrack1">
            <summary>
            Holds Encrypted Track 1 
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mEncTrack2">
            <summary>
            Holds Encrypted Track 2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mEncTrack3">
            <summary>
            Holds Encrypted Track 3
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mKSN">
            <summary>
            Holds KSN
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mMagtekCardType">
            <summary>
            Holds Card Type
            /// </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mMPStatus">
            <summary>
            Holds MP Status
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mRegisteredBy">
            <summary>
            Holds Registered By
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mSwipedECRHost">
            <summary>
            Holds Swiped ECR Host
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mDeviceSN">
            <summary>
            Holds Device Serial Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mMerchantId">
            <summary>
            Holds Merchant Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mPAN4">
            <summary>
            Holds 4-digit PAN
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mPCode">
            <summary>
            Holds Protection Code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mAuthValue1">
            <summary>
            Holds Authorization Value 1
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mAuthValue2">
            <summary>
            Holds Authorization Value 2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mAuthValue3">
            <summary>
            Holds Authorization Value 3
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mMagtekUserName">
            <summary>
            Holds Magtek User Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MagtekInfo.mMagtekPassword">
            <summary>
            Holds Magtek Password
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MagtekInfo.#ctor">
            <summary>
            Constructor for BrowserInfo
            </summary>
            <remarks>Use the MagtekInfo object for the Magtek
            encrypted card reader related information.</remarks>
            <example>
            <para>Following example shows how to use a 
            Magtek Info object.</para>
            <code lang="C#" escaped="false">
            .................
            // Swipe is the SwipeCard object
            .................
            // Set the MagtekInfo object.
            MagtekInfo MT = new MagtekInfo();
            MT.DeviceSN = "Device Serial Number from reader";
            MT.EncMP = "ENCMP from reader";
            MT.EncryptionBlockType = "1";
            MT.EncTrack1 = "Track 1 data from reader";
            // When using Encrypted Card Readers you do not populate the SwipeCard object as the data from the Magtek object
            // will be used instead.
            SwipeCard Swipe = new SwipeCard("");
            Swipe.MagtekInfo = MT;
            .................
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Browser Info details.
            Dim Browser As BrowserInfo = New BrowserInfo
            Browser.BrowserCountryCode  = "USA"
            Browser.BrowserUserAgent = "IE 6.0"
            Inv.BrowserInfo = Browser
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.EncMP">
            <summary>
            Gets, Sets Magtek Encrypted MagnePrint Information.
            </summary>
            <remarks>
            <para>Encrypted MagnePrint Information returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ENCMP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.EncryptionBlockType">
            <summary>
            Gets, Sets Magtek Encryption Block.
            </summary>
            <remarks>
            <para>The code which indicates what type of Encryption Block is used.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ENCRYPTIONBLOCKTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.EncTrack1">
            <summary>
            Gets, Sets Magtek Encrypted Track 1.
            </summary>
            <remarks>
            <para>Encrypted Track 1 information returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ENCTRACKE1</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.EncTrack2">
            <summary>
            Gets, Sets Magtek Encrypted Track 2.
            </summary>
            <remarks>
            <para>Encrypted Track 2 information returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ENCTRACKE2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.EncTrack3">
            <summary>
            Gets, Sets Magtek Encrypted Track 3.
            </summary>
            <remarks>
            <para>Encrypted Track 3 information returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>ENCTRACKE2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.KSN">
            <summary>
            Gets or Sets Magtek KSN
            </summary>
            <remarks>
            <para>20 character string returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>KSN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.MagtekCardType">
            <summary>
            Gets or Sets Magtek Card Data Format
            </summary>
            <remarks>
            <para>The code which indicates what type of Card Data Format is being submitted.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MAGTEKCARDTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.MPStatus">
            <summary>
            Gets or Sets Magtek MagnePrint Status
            </summary>
            <remarks>
            <para>MagnePrint Status of Card Swipe. This is an alpha numeric string, returned by a MagneSafe device when a card is swiped.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MPSTATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.RegisteredBy">
            <summary>
            Gets or Sets Magtek Registered By
            </summary>
            <remarks>
            <para>An alpha numeric entry between 1 and 20 characters long.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>REGISTEREDBY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.SwipedECRHost">
            <summary>
            Gets or Sets Magtek Swipe ECR Host
            </summary>
            <remarks>
            <para>MAGT is the only value that is accepted in the SWIPEDECRHOST parameter.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>SWIPEDECRHOST</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.DeviceSN">
            <summary>
            Gets or Sets Magtek device serial number
            </summary>
            <remarks>
            <para>The device serial number of the Magtek card reader.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>DEVICESN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.MerchantId">
            <summary>
            Gets or Sets Magtek Merchant Id
            </summary>
            <remarks>
            <para>Your Merchant ID or the Merchant ID of the merchant redeeming the Protection Code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.PAN4">
            <summary>
            Gets or Sets Magtek PAN4
            </summary>
            <remarks>
            <para>The last four digits of the PAN / account number encoded in the card.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PAN4</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.PCode">
            <summary>
            Gets or Sets Magtek Protection Code
            </summary>
            <remarks>
            <para>The generated Protection Code.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.AuthValue1">
            <summary>
            Gets or Sets Magtek Authentication Value 1
            </summary>
            <remarks>
            <para>Authentication Value 1 generated with the PCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHVALUE1</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.AuthValue2">
            <summary>
            Gets or Sets Magtek Authentication Value 2
            </summary>
            <remarks>
            <para>Authentication Value 2 generated with the PCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHVALUE2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.AuthValue3">
            <summary>
            Gets or Sets Magtek Authentication Value 3
            </summary>
            <remarks>
            <para>Authentication Value 3 generated with the PCode.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHVALUE3</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.MagtekUserName">
            <summary>
            Gets or Sets MagTek User Name
            </summary>
            <remarks>
            <para> MagTek user name.</para> 
            <para>Maps to Payflow Parameter:</para>
            <code>MAGTEKUSERNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MagtekInfo.MagtekPassword">
            <summary>
            Gets or Sets Magtek password
            </summary>
            <remarks>
            <para>Magtek password.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MAGTEKPWD</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MagtekInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.MerchantInfo">
            <summary>
            Used for Merchant related information.
            </summary>
            <remarks>Use this class to set the Merchant related 
            information.  Used for Soft Descriptors.  
            
            Refer to the Payflow Gateway Developer's Guide for your processor
            for more information related to this fields.</remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Merchant Info details.
            MerchantInfo Merchant = new MerchantInfo();
            Merchant.MerchantName = "MerchantXXXXX";
            Merchant.MerchantCity = "Anywhere";
            Inv.MerchantInfo = Merchant;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Merchant Info details.
            Dim Merchant As MerchantInfo = new MerchantInfo
            Merchant.MerchantName = "MerchantXXXXX"
            Merchant.MerchantCity = "Anywhere"
            Inv.MerchantInfo = Merchant
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchDescr">
            <summary>
            Merchant Description
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchSvc">
            <summary>
            Merchant Telephone
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantName">
            <summary>
            Holds Merchant Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantStreet">
            <summary>
            Holds Merchant Street
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantCity">
            <summary>
            Holds Merchant City
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantState">
            <summary>
            Holds Merchant State
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantCountryCode">
            <summary>
            Holds Merchant CountryCode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantZip">
            <summary>
            Holds Merchant Zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantUrl">
            <summary>
            Holds Merchant Url
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantVatNum">
            <summary>
            Holds Merchant VAT Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantInvNum">
            <summary>
            Holds Merchant Invoice Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantLocationId">
            <summary>
            MerrchantLocationId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantId">
            <summary>
            MerchantId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantContactInfo">
            <summary>
            MerchantContactInfo
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MerchantInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            Use this class to set the Soft merchant information which is detailed data about a merchant such
            as the merchant's name, business address, business location identifier, and contact information.
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // Inv is the Invoice object
            .................
            // Set the Merchant Info details.
            MerchantInfo Merchant = New MerchantInfo();
            Merchant.MerchantName = "MerchantXXXXX";
            Merchant.MerchantCity = "Somewhere";
            Inv.MerchantInfo = Merchant;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' Inv is the Invoice object
            .................
            ' Set the Merchant Info details.
            Dim Merchant As MerchantInfo = New MerchantInfo
            Merchant.MerchantName = "MerchantXXXXX"
            Merchant.MerchantCity = "Somewhere"
            Inv.MerchantInfo = Merchant
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantName">
            <summary>
            Gets, Sets  Merchant Name
            </summary>
            <remarks>
            <para>Name of Merchant</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantStreet">
            <summary>
            Gets, Sets  Merchant Street
            </summary>
            <remarks>
            <para>Merchant's Street Address (Number and Street Name)</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTSTREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantCity">
            <summary>
            Gets, Sets  Merchant City
            </summary>
            <remarks>
            <para>Merchant's City</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantState">
            <summary>
            Gets, Sets  Merchant State
            </summary>
            <remarks>
            <para>Merchant's State</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantCountryCode">
            <summary>
            Gets, Sets  Merchant Country Code
            </summary>
            <remarks>
            <para>Merchant's Numeric Country Code.  Example: USA = 840</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTCOUNTRYCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantZip">
            <summary>
            Gets, Sets  Merchant Zip
            </summary>
            <remarks>
            <para>Merchant's 5- to 9-digit ZIP (postal) code excluding
            spaces, dashes, and non-numeric characters.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantUrl">
            <summary>
            Gets, Sets  Merchant Url
            </summary>
            <remarks>
            <para>Merchant's website (URL)</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTURL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantVatNum">
            <summary>
            Gets, Sets  Merchant VAT Number
            </summary>
            <remarks>
            <para>Merchant's VAT Number</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTVATNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantInvNum">
            <summary>
            Gets, Sets  Merchant Invoice Number
            </summary>
            <remarks>
            <para>Merchant's Invoice Number</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTINVNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantLocationId">
            <summary>
            Gets, Sets the Merchant Location Id.
            </summary>
            Merchant assigned store or location number.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTLOCATIONID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantId">
            <summary>
            Gets, Sets the Merchant Id.
            </summary>
            Processor assigned number.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantContactInfo">
            <summary>
            Gets, Sets the Merchant Contact Information.
            </summary>
            Merchants telephone, URl or email.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHANTCONTACTINFO</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchDescr">
            <summary>
            Gets, Sets  MerchDescr
            </summary>
            <remarks>
            <para>Merchant's description.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHDESCR</code>
            </remarks>
            
        </member>
        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchSvc">
            <summary>
            Gets, Sets  MerchSvc
            </summary>
            <remarks>
            <para>Merchant's contact number.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>MERCHSVC</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.MerchantInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.NamespaceDoc">
            <summary>
            <para>This is the Payflow Parameter Mapping supported in current release.</para>
            <list type='table'><listheader><term>Payflow Param</term><description>Data Object</description><description>Property Reference</description><description>Data type</description></listheader>
            <item><term>ABA</term><description>BankAcct</description><description><see cref='P:PayPal.Payments.DataObjects.BankAcct.Aba'>Aba</see></description><description>String</description></item>
            <item><term>ACCT</term><description>BankAcct ,  CreditCard , PurchaseCard , SwipeCard , CheckPayment , RecurringResponse, TransactionResponse</description><description>Acct</description><description>String</description></item>
            <item><term>ACCTTYPE</term><description>BankAcct</description><description><see cref='P:PayPal.Payments.DataObjects.BankAcct.AcctType'>AcctType</see></description><description>String</description></item>
            <item><term>ACI</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Aci'>Aci</see></description><description>String</description></item>
            <item><term>ACSURL</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.AcsUrl'>AcsUrl</see></description><description>String</description></item>
            <item><term>ACTION</term><description>Value is set based on Transaction object used:RecurringAddTransaction, RecurringModifyTransaction, RecurringCancelTransaction, RecurringInquiryTransaction, RecurringReActivateTransaction, RecurringPaymentTransaction</description><description>NA</description><description>String</description></item>
            <item><term>ADDLAMTn</term><description>AdviceDetail</description><description><see cref='P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmt'>AddLAmt</see></description><description>String</description></item>
            <item><term>ADDLAMTTYPEn</term><description>AdviceDetail</description><description><see cref='P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmtType'>AddLAmtType</see></description><description>String</description></item>
            <item><term>ADDLMSGS</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AddlMsgs'>AddlMsgs</see></description><description>String</description></item>
            <item><term>ADDROVERRIDE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.AddrOverride'>AddrOverride</see></description><description>String</description></item>
            <item><term>ADDRSTATUS</term><description>ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECGetResponse.AddressStatus'>AddressStatus</see></description><description>String</description></item>
            <item><term>AGGREGATEAMT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.AggregateAmt'>AggregateAmt</see></description><description>String</description></item>
            <item><term>AGGREGATEOPTIONALAMT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.AggregateOptionalAmt'>AggregateOptionalAmt</see></description><description>String</description></item>
            <item><term>ALTTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.AltTaxAmt'>AltTaxAmt</see></description><description>Currency</description></item>
            <item><term>AMEXID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AmexID'>AmexID</see></description><description>String</description></item>
            <item><term>AMEXPOSID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AmexPosData'>AmexPosData</see></description><description>String</description></item>
            <item><term>AMT</term><description>Invoice, RecurringResponse ,BuyerAuthVETransaction ,ECDoResponse, TransactionResponse</description><description>Amt</description><description>Currency (Invoice) ,String(RecurringResponse),Currency</description></item>
            <item><term>AUTHCODE</term><description>VoiceAuthTransaction,  TransactionResponse</description><description>AuthCode</description><description>String</description></item>
            <item><term>AUTHENTICATION_ID</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.Authentication_Id'>Authentication_Id</see></description><description>String</description></item>
            <item><term>AUTHENTICATION_STATUS</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.Authentication_Status'>Authentication_Status</see></description><description>String</description></item>
            <item><term>AUTHTYPE</term><description>ACHTender</description><description><see cref='!:ACHTender.AuthType'>AuthType</see></description><description>String</description></item>
            <item><term>AVSADDR</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AVSAddr'>AVSAddr</see></description><description>String</description></item>
            <item><term>AVSZIP</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AVSZip'>AVSZip</see></description><description>String</description></item>
            <item><term>BA_CUSTOM</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.BA_Custom'>BA_Custom</see></description><description>String</description></item>
            <item><term>BA_DESC</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.BA_Desc'>BA_Desc</see></description><description>String</description></item>
            <item><term>BAID</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.BAId'>BAId</see></description><description>String</description></item>
            <item><term>BALAMT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.BalAmt'>BalAmt</see></description><description>String</description></item>
            <item><term>BILLINGTYPE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.BillingType'>BillingType</see></description><description>String</description></item>
            <item><term>BATCHID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.BatchId'>BatchId</see></description><description>String</description></item>
            <item><term>BILLINGTYPE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.BillingType'>BillingType</see></description><description>String</description></item>
            <item><term>BILLTOCITY</term><description>BillTo, RecurringResponse</description><description>BillToCity</description><description>String</description></item>
            <item><term>BILLTOCOUNTRY</term><description>BillTo, RecurringResponse</description><description>BillToCountry</description><description>String</description></item>
            <item><term>BILLTOEMAIL</term><description>BillTo,RecurringResponse,ECGetResponse</description><description>BillToEmail</description><description>String</description></item>
            <item><term>BILLTOFAX</term><description>BillTo</description><description><see cref='P:PayPal.Payments.DataObjects.BillTo.BillToFax'>BillToFax</see></description><description>String</description></item>
            <item><term>BILLTOFIRSTNAME</term><description>BillTo, RecurringResponse ,ECGetResponse, TransactionResponse</description><description>BillToFirstName</description><description>String</description></item>
            <item><term>BILLTOHOMEPHONE</term><description>BillTo</description><description><see cref='P:PayPal.Payments.DataObjects.BillTo.BillToHomePhone'>BillToHomePhone</see></description><description>String</description></item>
            <item><term>BILLTOLASTNAME</term><description>BillTo, RecurringResponse,ECGetResponse, TransactionResponse</description><description>BillToLastName</description><description>String</description></item>
            <item><term>BILLTOMIDDLENAME</term><description>BillTo, RecurringResponse</description><description>BillToMiddleName</description><description>String</description></item>
            <item><term>BillToPHONENUM</term><description>BillTo, RecurringResponse</description><description>BillToPhoneNum</description><description>String</description></item>
            <item><term>BILLTOPHONE2</term><description>BillTo</description><description><see cref='P:PayPal.Payments.DataObjects.BillTo.BillToPhone2'>BillToPhone2</see></description><description>String</description></item>
            <item><term>BILLTOSTATE</term><description>BillTo, RecurringResponse</description><description>BillToState</description><description>String</description></item>
            <item><term>BILLTOSTREET</term><description>BillTo, RecurringResponse</description><description>BillToStreet</description><description>String</description></item>
            <item><term>BILLTOSTREET2</term><description>BillTo</description><description><see cref='P:PayPal.Payments.DataObjects.BillTo.BillToStreet2'>BillToStreet2</see></description><description>String</description></item>
            <item><term>BILLTOZIP</term><description>BillTo, RecurringResponse</description><description>BillToZip</description><description>String</description></item>
            <item><term>BROWSERCOUNTRYCODE</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.BrowserCountryCode'>BrowserCountryCode</see></description><description>String</description></item>
            <item><term>BROWSERTIME</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.BrowserTime'>BrowserTime</see></description><description>String</description></item>
            <item><term>BROWSERUSERAGENT</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.BrowserUserAgent'>BrowserUserAgent</see></description><description>String</description></item>
            <item><term>BUTTONSOURCE</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.ButtonSource'>ButtonSource</see></description><description>String</description></item>
            <item><term>CANCELURL</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.CancelURL'>CancelURL</see></description><description>String</description></item>
            <item><term>CAPTURECOMPLETE</term><description>CaptureTransaction</description><description>String</description></item>
            <item><term>CARDISSUE</term><description>PurchaseCard, CreditCard</description><description>CardIssue</description><description>String</description></item>
            <item><term>CARDSECURE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CardSecure'>CardSecure</see></description><description>String</description></item>
            <item><term>CARDSTART</term><description>PurchaseCard, CreditCard</description><description>CardStart</description><description>String</description></item>
            <item><term>CARDTYPE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CardType'>CardType</see></description><description>String</description></item>
            <item><term>CATTYPE</term><description>Devices</description><description><see cref='P:PayPal.Payments.DataObjects.Devices.CatType'>CatType</see></description><description>String</description></item>
            <item><term>CAVV</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.CAVV'>CAVV</see></description><description>String</description></item>
            <item><term>CCTRANSID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CCTransId'>CCTransId</see></description><description>String</description></item>
            <item><term>CCTRANS_POSDATA</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CCTrans_POSData'>CCTrans_POSData</see></description><description>String</description></item>
            <item><term>CHKNUM</term><description>ACHTender, CheckTender, CardTender</description><description>ChkNum</description><description>String</description></item>
            <item><term>CHKTYPE</term><description>ACHTender, CheckTender, CardTender</description><description>ChkType</description><description>String</description></item>
            <item><term>CITDATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.CitDate'>CitDate</see></description><description>String</description></item>
            <item><term>COMMCARD</term><description>PurchaseCard</description><description></description><description>String</description></item>
            <item><term>COMMCODE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.CommCode'>CommCode</see></description><description>String</description></item>
            <item><term>COMMENT1</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Comment1'>Comment1</see></description><description>String</description></item>
            <item><term>COMMENT2</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Comment2'>Comment2</see></description><description>String</description></item>
            <item><term>COMPANYNAME</term><description>BillTo, RecurringResponse</description><description>CompanyName</description><description>String</description></item>
            <item><term>CONTACTLESS</term><description>Devices</description><description><see cref='P:PayPal.Payments.DataObjects.Devices.Contactless'>Contactless</see></description><description>String</description></item>
            <item><term>COUNTRYCODE</term><description>BillTo,ECGetResponse</description><description>CountryCode</description><description>String</description></item>
            <item><term>COUNTRYCODE</term><description>ExpressCheckoutRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.CountryCode'>CountryCode</see></description><description>String</description></item>
            <item><term>CURRENCY</term><description>BuyerAuthVETransaction</description><description></description><description>Currency</description></item>
            <item><term>CUSTCODE</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustCode'>CustCode</see></description><description>String</description></item>
            <item><term>CUSTDATA</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustData'>CustData</see></description><description>String</description></item>
            <item><term>CUSTID</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustId'>CustId</see></description><description>String</description></item>
            <item><term>CUSTIP</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustIP'>CustIP</see></description><description>String</description></item>
            <item><term>CUSTOM</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.Custom'>Custom</see></description><description>String</description></item>
            <item><term>CUSTOMERID</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustomerId'>CustomerId</see></description><description>String</description></item>
            <item><term>CUSTOMERNUMBER</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustomerNumber'>CustomerNumber</see></description><description>String</description></item>
            <item><term>CUSTREF</term><description>Invoice, TransactionResponse</description><description>CustRef</description><description>String</description></item>
            <item><term>CUSTVATREGNUM</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustVatRegNum'>CustVatRegNum</see></description><description>String</description></item>
            <item><term>CVV2</term><description>PurchaseCard, CreditCard</description><description>CVV2</description><description>String</description></item>
            <item><term>CVV2MATCH</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CVV2Match'>CVV2Match</see></description><description>String</description></item>
            <item><term>DATETOSETTLE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.DateToSettle'>DateToSettle</see></description><description>String</description></item>
            <item><term>DESC</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Desc'>Desc</see></description><description>String</description></item>
            <item><term>DESC1</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Desc1'>Desc1</see></description><description>String</description></item>
            <item><term>DESC2</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Desc2'>Desc2</see></description><description>String</description></item>
            <item><term>DESC3</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Desc3'>Desc3</see></description><description>String</description></item>
            <item><term>DESC4</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Desc4'>Desc4</see></description><description>String</description></item>
            <item><term>DISCOUNT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Discount'>Discount</see></description><description>Currency</description></item>
            <item><term>DL</term><description>BaseTender</description><description><see cref='P:PayPal.Payments.DataObjects.BaseTender.DL'>DL</see></description><description>String</description></item>
            <item><term>DOB</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.DOB'>DOB</see></description><description>String</description></item>
            <item><term>DUPLICATE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Duplicate'>Duplicate</see></description><description>String</description></item>
            <item><term>DUTYAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.DutyAmt'>DutyAmt</see></description><description>Currency</description></item>
            <item><term>ECI</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.ECI'>ECI</see></description><description>String</description></item>
            <item><term>EMAILMATCH</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.EmailMatch'>EmailMatch</see></description><description>String</description></item>
            <item><term>ENDTIME</term><description>Invoice, TransactionResponse</description><description>EndTime</description><description>DateTime</description></item>
            <item><term>EXCHANGERATE</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.ExchangeRate'>ExchangeRate</see></description><description>String</description></item>
            <item><term>EXPDATE</term><description>CreditCard, PurchaseCard, RecurringResponse, TransactionResponse</description><description>ExpDate</description><description>String</description></item>
            <item><term>EXTRSPMSG</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ExtRspMsg'>ExtRspMsg</see></description><description>String</description></item>
            <item><term>FEEAMT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.FeeAmt'>FeeAmt</see></description><description>String</description></item>
            <item><term>FPS_POSTXMLDATA</term><description>FraudResponse</description><description><see cref='P:PayPal.Payments.DataObjects.FraudResponse.Fps_PostXmlData'>Fps_PostXmlData</see></description><description>FpsXmlData object</description></item>
            <item><term>FPS_PREXMLDATA</term><description>FraudResponse</description><description><see cref='P:PayPal.Payments.DataObjects.FraudResponse.Fps_PreXmlData'>Fps_PreXmlData</see></description><description>FpsXmlData object</description></item>
            <item><term>FREIGHTAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.FreightAmt'>FreightAmt</see></description><description>Currency</description></item>
            <item><term>HANDLINGAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.HandlingAmt'>HandlingAmt</see></description><description>Currency</description></item>
            <item><term>HDRBACKCOLOR</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.HeaderBackColor'>HeaderBackColor</see></description><description>String</description></item>
            <item><term>HDRBORDERCOLOR</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.HeaderBorderColor'>HeaderBorderColor</see></description><description>String</description></item>
            <item><term>HDRIMG</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.HeaderImage'>HeaderImage</see></description><description>String</description></item>
            <item><term>HOSTADDRESS</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.HostAddress'>HostAddress</see></description><description>String</description></item>
            <item><term>HOSTCODE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.HostCode'>HostCode</see></description><description>String</description></item>
            <item><term>HOSTPORT</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.HostPort'>HostPort</see></description><description>int</description></item>
            <item><term>IAVS</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.IAVS'>IAVS</see></description><description>String</description></item>
            <item><term>INVNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.InvNum'>InvNum</see></description><description>String</description></item>
            <item><term>INVOICEDATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.InvoiceDate'>InvoiceDate</see></description><description>Date</description></item>
            <item><term>L_ALTTAXAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxAmt'>AltTaxAmt</see></description><description>Currency</description></item>
            <item><term>L_ALTTAXIDn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxId'>AltTaxId</see></description><description>Currency</description></item>
            <item><term>L_ALTTAXRATEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxRate'>AltTaxRate</see></description><description>Currency</description></item>
            <item><term>L_AMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Amt'>Amt</see></description><description>Currency</description></item>
            <item><term>L_CARRIERSERVICELEVELCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CarrierServiceLevelCode'>CarrierServiceLevelCode</see></description><description>Currency</description></item>
            <item><term>L_CATALOGNUMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CatalogNum'>CatalogNum</see></description><description>String</description></item>
            <item><term>L_COMMCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CommCode'>CommCode</see></description><description>String</description></item>
            <item><term>L_COSTCENTERNUMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CostCenterNum'>CostCenterNum</see></description><description>String</description></item>
            <item><term>L_COSTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Cost'>Cost</see></description><description>Currency</description></item>
            <item><term>L_DESCn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Desc'>Desc</see></description><description>String</description></item>
            <item><term>L_DISCOUNTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Discount'>Discount</see></description><description>Currency</description></item>
            <item><term>L_EXTAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.ExtAmt'>ExtAmt</see></description><description>Currency</description></item>
            <item><term>L_FREIGHTAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.FreightAmt'>FreightAmt</see></description><description>Currency</description></item>
            <item><term>L_HANDLINGAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.HandlingAmt'>HandlingAmt</see></description><description>Currency</description></item>
            <item><term>L_MANUFACTURERn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Manufacturer'>Manufacturer</see></description><description>String</description></item>
            <item><term>L_PICKUPCITYn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.PickupCity'>PickupCity</see></description><description>String</description></item>
            <item><term>L_PICKUPCOUNTRYn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.PickupCountry'>PickupCountry</see></description><description>String</description></item>
            <item><term>L_PICKUPSTATEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.PickupState'>PickupState</see></description><description>String</description></item>
            <item><term>L_PICKUPSTREETn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.PickupStreet'>PickupStreet</see></description><description>String</description></item>
            <item><term>L_PICKUPZIPn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.PickupZip'>PickupZip</see></description><description>String</description></item>
            <item><term>L_PRODCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.ProdCode'>ProdCode</see></description><description>String</description></item>
            <item><term>L_QTYn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Qty'>Qty</see></description><description>int</description></item>
            <item><term>L_SKUn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.SKU'>SKU</see></description><description>String</description></item>
            <item><term>L_TAXAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.TaxAmt'>TaxAmt</see></description><description>Currency</description></item>
            <item><term>L_TAXRATEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.TaxRate'>TaxRate</see></description><description>Currency</description></item>
            <item><term>L_TAXTYPEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.TaxType'>TaxType</see></description><description>String</description></item>
            <item><term>L_TRACKINGNUMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.TrackingNum'>TrackingNum</see></description><description>String</description></item>
            <item><term>L_TYPEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Type'>Type</see></description><description>String</description></item>
            <item><term>L_UNSPSCCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.UnspscCode'>UnspscCode</see></description><description>String</description></item>
            <item><term>L_UOMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.UOM'>UOM</see></description><description>String</description></item>
            <item><term>L_UPCn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.UPC'>UPC</see></description><description>String</description></item>
            <item><term>LOCALECODE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.LocaleCode'>LocaleCode</see></description><description>String</description></item>
            <item><term>LOCALTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.LocalTaxAmt'>LocalTaxAmt</see></description><description>Currency</description></item>
            <item><term>MAXAMT</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.MaxAmt'>MaxAmt</see></description><description>String</description></item>
            <item><term>MAXFAILPAYMENTS</term><description>RecurringResponse, RecurringInfo</description><description>MaxFailPayments</description><description>String</description></item>
            <item><term>MD</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.MD'>MD</see></description><description>String</description></item>
            <item><term>MERCHDESCR</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchDescr'>MerchDescr</see></description><description>String</description></item>
            <item><term>MERCHSVC</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchSvc'>MerchSvc</see></description><description>String</description></item>
            <item><term>MERCHANTCITY</term><description>CMerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantCity'>MerchantCity</see></description><description>String</description></item>
            <item><term>MERCHANTCONTACTINFO</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantContactInfo'>MerchantContactInfo</see></description><description>String</description></item>
            <item><term>MERCHANTID</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantId'>MerchantId</see></description><description>String</description></item>
            <item><term>MERCHANTINVNUM</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantInvNum'>>MerchantInvNum</see></description><description>String</description></item> 
            <item><term>MERCHANTLOCATIONID</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantLocationId'>MerchantLocationId</see></description><description>String</description></item>
            <item><term>MERCHANTNAME</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantName'>MerchantName</see></description><description>String</description></item>
            <item><term>MERCHANTSTATE</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantState'>MerchantState</see></description><description>String</description></item> 
            <item><term>MERCHANTSTREET</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantStreet'>MerchantStreet</see></description><description>String</description></item>
            <item><term>MERCHANTURL</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantUrl'>MerchantUrl</see></description><description>String</description></item> 
            <item><term>MERCHANTVATNUM</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantVatNum'>MerchantVatNum</see></description><description>String</description></item> 
            <item><term>MERCHANTZIP</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantZip'>MerchantZip</see></description><description>String</description></item> 
            <item><term>MICR</term><description>CheckPayment</description><description></description><description>String</description></item>
            <item><term>MISCDATA</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.MiscData'>MiscData</see></description><description>Currency</description></item>
            <item><term>NAME</term><description>BankAcct, CreditCard, PurchaseCard, SwipeCard, CheckPayment, RecurringResponse</description><description>Name</description><description>String</description></item>
            <item><term>NATIONALTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.NationalTaxAmt'>NationalTaxAmt</see></description><description>Currency</description></item>
            <item><term>NEXTPAYMENT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.NextPayment'>NextPayment</see></description><description>String</description></item>
            <item><term>NOSHIPPING</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.NoShipping'>NoShipping</see></description><description>String</description></item>
            <item><term>NOTIFYURL</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.NotifyURL'>NotifyURL</see></description><description>String</description></item>
            <item><term>OPTIONALTRX</term><description>RecurringInfo</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringInfo.OptionalTrx'>OptionalTrx</see></description><description>String</description></item>
            <item><term>OPTIONALTRXAMT</term><description>RecurringInfo</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringInfo.OptionalTrxAmt'>OptionalTrxAmt</see></description><description>Currency</description></item>
            <item><term>ORDERDATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.OrderDate'>OrderDate</see></description><description>String</description></item>
            <item><term>ORDERDESC</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.OrderDesc'>OrderDesc</see></description><description>String</description></item>
            <item><term>ORDERID</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.OrderId'>OrderId</see></description><description>String</description></item>
            <item><term>ORDERTIME</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.OrderTime'>OrderTime</see></description><description>String</description></item>
            <item><term>ORIGAMT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.OrigAmt'>OrigAmt</see></description><description>String</description></item>
            <item><term>ORIGID</term><description>ReferenceTransaction, CaptureTransaction, FraudReviewTransaction, InquiryTransaction, VoidTransaction</description><description>OrigId</description><description>String</description></item>
            <item><term>ORIGPROFILEID</term><description>RecurringInfo</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringInfo.OrigProfileId'>OrigProfileId</see></description><description>String</description></item>
            <item><term>ORIGRESULT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.OrigResult'>OrigResult</see></description><description>String</description></item>
            <item><term>P_AMTn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>P_PNREFn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>P_RESULTn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>P_TENDERn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>P_TRANSTATEn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>P_TRANSTIMEn</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams'>InquiryParams</see></description><description>String</description></item>
            <item><term>PAGESTYLE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.PageStyle'>PageStyle</see></description><description>String</description></item>
            <item><term>PAR</term><description>CreditCard</description><description></description><description>String</description></item>
            <item><term>PAREQ</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.PaReq'>PaReq</see></description><description>String</description></item>
            <item><term>PARES</term><description>BuyerAuthVATransaction</description><description></description><description>String</description></item>
            <item><term>PARID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ParId'>ParId</see ></description><description>String</description></item >
            <item><term>PARTIALAUTH</term><description>AuthorizationTransaction</description><description></description><description>String</description></item>
            <item><term>PARTNER</term><description>UserInfo</description><description></description><description>String</description></item>
            <item><term>PAYERID</term><description>ECDoRequest ,ECGetResponse</description><description>PayerId</description><description>String</description></item>
            <item><term>PAYERSTATUS</term><description>ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECGetResponse.PayerStatus'>PayerStatus</see></description><description>String</description></item>
            <item><term>PAYFLOWCOLOR</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.PayFlowColor'>PayFlowColor</see></description><description>String</description></item>
            <item><term>PAYMENTDATE</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.PaymentDate'>PaymentDate</see></description><description>String</description></item>
            <item><term>PAYMENTHISTORY</term><description>RecurringInfo</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringInfo.PaymentHistory'>PaymentHistory</see></description><description>String</description></item>
            <item><term>PAYMENTNUM</term><description>RecurringInfo</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringInfo.PaymentNum'>PaymentNum</see></description><description>String</description></item>
            <item><term>PAYMENTSLEFT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.PaymentsLeft'>PaymentsLeft</see></description><description>String</description></item>
            <item><term>PAYMENTSTATUS</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.PaymentStatus'>PaymentStatus</see></description><description>String</description></item>
            <item><term>PAYMENTTYPE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.PaymentType'>PaymentType</see></description><description>String</description></item>
            <item><term>PAYPALCHECKOUTBTNTYPE</term><description>PayLater</description><description><see cref='P:PayPal.Payments.DataObjects.PayLater.PayPalCheckoutBtnType'>PayPalCheckoutBtnType</see></description><description>String</description></item>
            <item><term>PAYPERIOD</term><description>RecurringResponse, RecurringInfo</description><description>PayPeriod</description><description>String</description></item>
            <item><term>PENDINGREASON</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.PendingReason'>PendingReason</see></description><description>String</description></item>
            <item><term>PHONEMATCH</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.PhoneMatch'>PhoneMatch</see></description><description>String</description></item>
            <item><term>PNREF</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Pnref'>Pnref</see></description><description>String</description></item>
            <item><term>PONUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.PoNum'>PoNum</see></description><description>String</description></item>
            <item><term>POSTALCODE</term><description>ExpressCheckoutRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.PostalCode'>PostalCode</see></description><description>String</description></item>
            <item><term>POSTFPSMSG</term><description>FraudResponse</description><description><see cref='P:PayPal.Payments.DataObjects.FraudResponse.PostFpsMsg'>PostFpsMsg</see></description><description>String</description></item>
            <item><term>PPREF</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.PPref'>PPref</see></description><description>String</description></item>
            <item><term>PREFPSMSG</term><description>FraudResponse</description><description><see cref='P:PayPal.Payments.DataObjects.FraudResponse.PreFpsMsg'>PreFpsMsg</see></description><description>String</description></item>
            <item><term>PRENOTE</term><description>ACHTender</description><description><see cref='P:PayPal.Payments.DataObjects.ACHTender.PreNote'>PreNote</see></description><description>String</description></item>
            <item><term>PROCAVS</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ProcAVS'>ProcAVS</see></description><description>String</description></item>
            <item><term>PROCCARDSECURE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ProcCardSecure'>ProcCardSecure</see></description><description>String</description></item>
            <item><term>PROCCVV2</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ProcCVV2'>ProcCVV2</see></description><description>String</description></item>
            <item><term>PRODUCTCATEGORY</term><description>PayLater</description><description><see cref='P:PayPal.Payments.DataObjects.PayLater.ProductCategory'>ProductCategory</see></description><description>String</description></item>
            <item><term>PROFILEADDRESSCHANGEDATE</term><description>PayLater</description><description><see cref='P:PayPal.Payments.DataObjects.PayLater.ProfileAddressChangeDate'>ProfileAddressChangeDate</see></description><description>String</description></item>
            <item><term>PROFILEID</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.ProfileId'>ProfileId</see></description><description>String</description></item>
            <item><term>PROFILENAME</term><description>RecurringResponse, RecurringInfo</description><description>ProfileName</description><description>String</description></item>
            <item><term>PROMOCODE</term><description>PayLaterLineItem</description><description><see cref='P:PayPal.Payments.DataObjects.PayLaterLineItem.PromoCode'>PromoCode</see></description><description>String</description></item>
            <item><term>PROMOCODEOVERRIDE</term><description>PayLater</description><description><see cref='P:PayPal.Payments.DataObjects.PayLater.PromoCodeOverride'>PromoCodeOverride</see></description><description>String</description></item>
            <item><term>PROXYADDRESS</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyAddress'>ProxyAddress</see></description><description>String</description></item>
            <item><term>PROXYLOGON</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyLogon'>ProxyLogon</see></description><description>String</description></item>
            <item><term>PROXYPASSWORD</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyPassword'>ProxyPassword</see></description><description>String</description></item>
            <item><term>PROXYPORT</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyPort'>ProxyPort</see></description><description>int</description></item>
            <item><term>PUR_DESC</term><description>BuyerAuthVETransaction</description><description></description><description>String</description></item>
            <item><term>PWD</term><description>UserInfo</description><description></description><description>String</description></item>
            <item><term>RECURRING</term><description>RecurringInfo, Invoice</description><description>Recurring</description><description>String</description></item>
            <item><term>RECURRINGTYPE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.RecurringType'>RecurringType</see></description><description>String</description></item>
            <item><term>REPORTGROUP</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.ReportGroup'>ReportGroup</see></description><description>Currency</description></item>
            <item><term>REQCONFIRMSHIPPING</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.ReqConfirmShipping'>ReqConfirmShipping</see></description><description>String</description></item>
            <item><term>REQNAME</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.ReqName'>ReqName</see></description><description>String</description></item>
            <item><term>RESPMSG</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.RespMsg'>RespMsg</see></description><description>String</description></item>
            <item><term>RESPTEXT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.RespText'>RespText</see></description><description>String</description></item>
            <item><term>RESULT</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Result'>Result</see></description><description>String</description></item>
            <item><term>RETRYNUMDAYS</term><description>RecurringResponse, RecurringInfo</description><description>RetryNumDays</description><description>String</description></item>
            <item><term>RETURNURL</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.ReturnURL'>ReturnURL</see></description><description>String</description></item>
            <item><term>RPREF</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.RPRef'>RPRef</see></description><description>String</description></item>
            <item><term>RRN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Rrn'>Rrn</see></description><description>String</description></item>
            <item><term>SCAEXEMPTION</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.SCAExemption'>SCAExemption</see></description><description>String</description></item>
            <item><term>SECURETOKEN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.SecureToken'>SecureToken</see></description><description>String</description></item>
            <item><term>SECURETOKENID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.SecureTokenId'>SecureTokenId</see></description><description>String</description></item>
            <item><term>SETTLEAMT</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.SettleAmt'>SettleAmt</see></description><description>String</description></item>
            <item><term>SHIPCARRIER</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipCarrier'>ShipCarrier</see></description><description>String</description></item>
            <item><term>SHIPFROMZIP</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipFromZip'>ShipFromZip</see></description><description>String</description></item>
            <item><term>SHIPMETHOD</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipMethod'>ShipMethod</see></description><description>String</description></item>
            <item><term>SHIPPEDFROMZIP</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipFromZip'>ShipFromZip</see></description><description>String</description></item>
            <item><term>SHIPPINGMETHOD</term><description>PayLater</description><description><see cref='P:PayPal.Payments.DataObjects.PayLater.ShippingMethod'>ShippingMethod</see></description><description>String</description></item>
            <item><term>SHIPTOBUSINESS</term><description>ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECGetResponse.ShipToBusiness'>ShipToBusiness</see></description><description>String</description></item>
            <item><term>SHIPTOCITY</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToCity</description><description>String</description></item>
            <item><term>SHIPTOCOUNTRY</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToCountry</description><description>String</description></item>
            <item><term>SHIPTOEMAIL</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipToEmail'>ShipToEmail</see></description><description>String</description></item>
            <item><term>SHIPTOFIRSTNAME</term><description>ShipTo, RecurringResponse ,ECGetResponse</description><description>ShipToFirstName</description><description>String</description></item>
            <item><term>SHIPTOLASTNAME</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToLastName</description><description>String</description></item>
            <item><term>SHIPTOMIDDLENAME</term><description>ShipTo, RecurringResponse</description><description>ShipToMiddleName</description><description>String</description></item>
            <item><term>SHIPTOPHONE</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipToPhone'>ShipToPhone</see></description><description>String</description></item>
            <item><term>SHIPTOPHONE2</term><description>ShipTo</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipToPhone2'>ShipToPhone2</see></description><description>String</description></item>
            <item><term>SHIPTOSTATE</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToState</description><description>String</description></item>
            <item><term>SHIPTOSTREET</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToStreet</description><description>String</description></item>
            <item><term>SHIPTOSTREET2</term><description>ShipTo, ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipToStreet2'>ShipToStreet2</see></description><description>String</description></item>
            <item><term>SHIPTOZIP</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToZip</description><description>String</description></item>
            <item><term>SS</term><description>CheckTender</description><description></description><description>String</description></item>
            <item><term>STAN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Stan'>Stan</see></description><description>String</description></item>
            <item><term>START</term><description>RecurringResponse, RecurringInfo</description><description>Start</description><description>String</description></item>
            <item><term>STARTTIME</term><description>Invoice, TransactionResponse</description><description>StartTime</description><description>String</description></item>
            <item><term>STATUS</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.Status'>Status</see></description><description>String</description></item>
            <item><term>SWIPE</term><description>SwipeCard</description><description></description><description>String</description></item>
            <item><term>TAXAMT</term><description>Invoice ,ECDoResponse</description><description>TaxAmt</description><description>Currency</description></item>
            <item><term>TAXEXEMPT </term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.TaxExempt'>TaxExempt</see></description><description>Boolean</description></item>
            <item><term>TENDER</term><description>Value is set based on Data object used:ACHTender, CardTender, CheckTender. Used in RecurringResponse also.</description><description>Tender</description><description>String</description></item>
            <item><term>TERM</term><description>RecurringResponse, RecurringInfo</description><description>Term</description><description>String</description></item>
            <item><term>TERMCITY</term><description>ACHTender</description><description><see cref='P:PayPal.Payments.DataObjects.ACHTender.TermCity'>TermCity</see></description><description>String</description></item>
            <item><term>TERMSTATE</term><description>ACHTender</description><description><see cref='P:PayPal.Payments.DataObjects.ACHTender.TermState'>TermState</see></description><description>String</description></item>
            <item><term>TIMEOUT</term><description>PayflowConnectionData</description><description><see cref='P:PayPal.Payments.DataObjects.PayflowConnectionData.TimeOut'>TimeOut</see></description><description>int</description></item>
            <item><term>TOKEN</term><description>ExpressCheckoutRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.Token'>Token</see></description><description>String</description></item>
            <item><term>TRANSSTATE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.TransState'>TransState</see></description><description>String</description></item>
            <item><term>TRANSTIME</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.TransTime'>TransTime</see></description><description>String</description></item>
            <item><term>TRXPNREF</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.TrxPNRef'>TrxPNRef</see></description><description>String</description></item>
            <item><term>TRXRESPMSG</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.TrxRespMsg'>TrxRespMsg</see></description><description>String</description></item>
            <item><term>TRXRESULT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.TrxResult'>TrxResult</see></description><description>String</description></item>
            <item><term>TRXTYPE</term><description>Value is set based on the Transaction object used:SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction etc.</description><description>TrxType</description><description>String</description></item>
            <item><term>TXID</term><description>BuyerAuthResponse</description><description><see cref='!:BuyerAuthResponse.TxId'>TxId</see></description><description>String</description></item>
            <item><term>USER</term><description>UserInfo</description><description></description><description>String</description></item>
            <item><term>USER1</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem1'>UserItem1</see></description><description>String</description></item>
            <item><term>USER2</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem2'>UserItem2</see></description><description>String</description></item>
            <item><term>USER3</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem3'>UserItem3</see></description><description>String</description></item>
            <item><term>USER4</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem4'>UserItem4</see></description><description>String</description></item>
            <item><term>USER5</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem5'>UserItem5</see></description><description>String</description></item>
            <item><term>USER6</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem6'>UserItem6</see></description><description>String</description></item>
            <item><term>USER7</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem7'>UserItem7</see></description><description>String</description></item>
            <item><term>USER8</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem8'>UserItem8</see></description><description>String</description></item>
            <item><term>USER9</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem9'>UserItem9</see></description><description>String</description></item>
            <item><term>USER10</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem10'>UserItem10</see></description><description>String</description></item>
            <item><term>VALIDATRIONCODE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ValidationCode'>ValidationCode</see></description><description>String</description></item>
            <item><term>VATINVNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatInvNum'>VatInvNum</see></description><description>String</description></item>
            <item><term>VATREGNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatRegNum'>VatRegNum</see></description><description>String</description></item>
            <item><term>VATTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxAmt'>VatTaxAmt</see></description><description>Currency</description></item>
            <item><term>VATTAXPERCENT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxPercent'>VatTaxPercent</see></description><description>String</description></item>
            <item><term>VATTAXRATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxRate'>VatTaxRate</see></description><description>String</description></item>
            <item><term>VENDOR</term><description>UserInfo</description><description></description><description>String</description></item>
            <item><term>VERBOSITY</term><description>Value is set based on the Transaction object used:SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction, AuthorizationTransaction, VoiceAuthTransaction, InquiryTransaction, FraudReviewTransaction, RecurringAddTransaction, RecurringModifyTransaction, RecurringCancelTransaction, RecurringInquiryTransaction, RecurringReActivateTransaction, RecurringPaymentTransaction</description><description>Verbosity</description><description>String</description></item>
            <item><term>VIT_INTGTYPE</term><description>Value is set from all the Transaction objects: SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction etc.</description><description>Vit_IntgType</description><description>String</description></item>
            <item><term>VIT_INTGVERSION</term><description>Value is set from all the Transaction objects: SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction etc.</description><description>Vit_IntgVersion</description><description>String</description></item>
            <item><term>VIT_OSARCH</term><description>Internal to the SDK.</description><description></description><description>String</description></item>
            <item><term>VIT_OSNAME</term><description>Internal to the SDK.</description><description></description><description>String</description></item>
            <item><term>VIT_OSVERSION</term><description>Internal to the SDK.</description><description></description><description>String</description></item>
            <item><term>VIT_PROXY</term><description>Internal to the SDK.</description><description></description><description>String</description></item>
            <item><term>VIT_SDKRUNTIMEVERSION</term><description>Internal to the SDK.</description><description></description><description>String</description></item>
            <item><term>XID</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.XID'>XID</see></description><description>String</description></item>
            <item><term>VMAID</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VMaid'>VMaid</see></description><description>String</description></item>
            <item><term>PAYFLOW-REQUEST-ID (Header)</term><description>Value is set from all the transactions:SaleTransaction, CaptureTransaction, VoidTransaction etc.</description><description>RequestId</description><description>String</description></item>
            <item><term>NEXTPAYMENTNUM</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.NextPaymentNumber'>NEXTPAYMENTNUM</see></description><description>String</description></item>
            <item><term>RPSTATE</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.RPState'>RPSTATE</see></description><description>String</description></item>
            <item><term>NEXTPAYMENT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.NextPayment'>NextPayment</see></description><description>String</description></item>
            <item><term>CREATIONDATE</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.CreationDate'>CREATIONDATE</see></description><description>String</description></item>
            <item><term>LASTCHANGED</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.LastChangedDate'>LASTCHANGE</see></description><description>String</description></item>
            <item><term>FREQUENCY</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.Frequency'>FREQUENCY</see></description><description>String</description></item>
            </list>
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PayflowConnectionData">
            <summary>
            Used for Payflow Host related information.
            </summary>
            <remarks>This class stores the information related to connection to the 
            PayPal payment gateway. If the empty constructor of this class 
            is used to create the object, or 
            passed values are empty, then The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>PAYFLOW_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mHostAddress">
            <summary>
            Payflow Host address
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mHostPort">
            <summary>
            Payflow Host port
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mProxyAddress">
            <summary>
            Proxy Address
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mProxyPort">
            <summary>
            Proxy Port
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mProxyLogon">
            <summary>
            Proxy Logon Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mProxyPassword">
            <summary>
            Proxy Password
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayflowConnectionData.mTimeOut">
            <summary>
            Transaction TimeOut
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.HostAddress">
            <summary>
            Gets HostAddress. It is PayPal's HostName
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.HostPort">
            <summary>
            Gets HostPort. Use port 443
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.TimeOut">
            <summary>
            Gets Time-out period for the transaction. The minimum recommended
            time-out value is 30 seconds. The client begins tracking
            from the time that it sends the transaction request to the server.
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyAddress">
            <summary>
            Gets Proxy server address. Use the PROXY parameters for servers
            behind a firewall. Your network administrator can provide the
            values.
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyPort">
            <summary>
            Gets ProxyPort
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyLogon">
            <summary>
            Gets ProxyLogon
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayflowConnectionData.ProxyPassword">
            <summary>
            Gets ProxyPassword
            </summary>
            <remarks>Read-only property.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="HostAddress">Payflow Host Address</param>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="HostAddress">Payflow Host Address</param>
            <param name="HostPort">Payflow Host port</param>
            <param name="TimeOut">Transaction time out</param>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>		
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="HostAddress">Payflow Host Address</param>
            <param name="HostPort">>Payflow Host port</param>
            <param name="TimeOut">Transaction timeout</param>
            <param name="ProxyAddress">Proxy Address</param>
            <param name="ProxyPort">Proxy Port</param>
            <param name="ProxyLogon">Proxy Logon Id </param>
            <param name="ProxyPassword">ProxyPwd</param>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="HostAddress">Payflow Host Address</param>
            <param name="HostPort">>Payflow Host port</param>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>		
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.#ctor(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="HostAddress">Payflow Host Address</param>
            <param name="HostPort">>Payflow Host port</param>
            <param name="ProxyAddress">Proxy Address</param>
            <param name="ProxyPort">Proxy Port</param>
            <param name="ProxyLogon">Proxy Logon Id </param>
            <param name="ProxyPassword">ProxyPwd</param>
            <remarks>
            The following values (if empty) are looked for 
            as follows:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>From Internal Default</description>
            <description>From App.config key</description>
            </listheader>
            <item>
            <term>Payflow Host</term>
            <description>NA</description>
            <description>Payflow_HOST</description>
            </item>
            <item>
            <term>Payflow Port</term>
            <description>443</description>
            <description>NA</description>
            </item>
            <item>
            <term>Transaction timeout</term>
            <description>45 seconds</description>
            <description>NA</description>
            </item>
            </list>
            </remarks>		
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayflowConnectionData.InitDefaultValues">
            <summary>
            Initializes the default values
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PayLater">
            <summary>
            Used as the PayPal PayLater class. All the customers promotional financing
            related information can be stored in this class.
            </summary>
            <remarks>
            <para> PayPal Pay Later is a new, convenient, and secure service that allows you to offer your
            customers promotional financing. Buyers that choose the promotional offer can defer
            payments for purchases on participating merchant web sites, allowing them to shop now and
            pay later.
            The PayPal Pay Later service allows online merchants to offer promotional financing to
            buyers at checkout - even if a buyer doesn't have a PayPal account. Promotional offers, such as
            no payments for 90 days, give merchants new and powerful ways to market to online
            shoppers.
            
            PayPal's new promotional financing is currently available to consumers and select merchants
            in the U.S. If you are a merchant and would like to add this service, please contact your sales
            representative for information and additional documentation.</para>
            </remarks>
            <example>
            <para>Following example shows how to use PayLater in the Express Checkout Set call.</para>
            <code lang="C#" escaped="false">
             .................
             //Create the data object for PayLater
             PayLater setPayLater = new PayLater();
             setPayLater.ShippingMethod = "UPSGround";
             setPayLater.ProductCategory = "E"; // Camera and Photos
             setPayLater.PayPalCheckoutBtnType = "P";
             // You can combine up to 10 promotions for PayPal Promotional Financing.
             // L_PROMOCODE0
             PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();
             setPayLaterLineItem.PromoCode = "101";
             setPayLater.PayLaterAddLineItem(setPayLaterLineItem);
             // L_PROMOCODE1
             PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();
             setPayLaterLineItem1.PromoCode = "102";
             setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);
             // If using Pay Later, you would create the data object as below.
             ECSetRequest setRequest = new ECSetRequest("http://www.myreturnurl.com", "http://www.mycancelurl.com", setPayLater);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            Dim SetPayLater As New PayLater
            SetPayLater.ShippingMethod = "UPSGround"
            SetPayLater.ProductCategory = "E" ' Camera and Photos
            SetPayLater.PayPalCheckoutBtnType = "P"
            ' You can combine up to 10 promotions for PayPal Promotional Financing.
            ' L_PROMOCODE0
            Dim SetPayLaterLineItem As New PayLaterLineItem
            SetPayLaterLineItem.PromoCode = "101"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem)
            ' L_PROMOCODE1
            Dim SetPayLaterLineItem1 As New PayLaterLineItem
            SetPayLaterLineItem1.PromoCode = "102"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem1)
            ' If using Pay Later, you would create the data object as below.
            Dim SetRequest As New ECSetRequest("http://www.myreturnurl.com", "http://www.mycancelurl.com", setPayLater)
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mProductCategory">
            <summary>
            Product Category
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mShippingMethod">
            <summary>
            Shipping Method
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mPayPalCheckoutBtnType">
            <summary>
            PayPal Checkout Button Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mProfileAddressChangeDate">
            <summary>
            Profile Address Change Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mPromoCodeOverride">
            <summary>
            Promo Code Override
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLater.mItemList">
            <summary>
            List of Line Items
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para> PayPal Pay Later is a new, convenient, and secure service that allows you to offer your
            customers promotional financing. Buyers that choose the promotional offer can defer
            payments for purchases on participating merchant web sites, allowing them to shop now and
            pay later.
            The PayPal Pay Later service allows online merchants to offer promotional financing to
            buyers at checkout - even if a buyer doesn't have a PayPal account. Promotional offers, such as
            no payments for 90 days, give merchants new and powerful ways to market to online
            shoppers.
            
            PayPal's new promotional financing is currently available to consumers and select merchants
            in the U.S. If you are a merchant and would like to add this service, please contact your sales
            representative for information and additional documentation.</para>
            </remarks>
            <example>
            <para>Following example shows how to use PayLater in the Express Checkout Set call.</para>
            <code lang="C#" escaped="false">
             .................
             //Create the data object for PayLater
             PayLater setPayLater = new PayLater();
             setPayLater.ShippingMethod = "UPSGround";
             setPayLater.ProductCategory = "E"; // Camera and Photos
             setPayLater.PayPalCheckoutBtnType = "P";
             // You can combine up to 10 promotions for PayPal Promotional Financing.
             // L_PROMOCODE0
             PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();
             setPayLaterLineItem.PromoCode = "101";
             setPayLater.PayLaterAddLineItem(setPayLaterLineItem);
             // L_PROMOCODE1
             PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();
             setPayLaterLineItem1.PromoCode = "102";
             setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);
             // If using Pay Later, you would create the data object as below.
             ECSetRequest setRequest = new ECSetRequest("http://www.myreturnurl.com", "http://www.mycancelurl.com", setPayLater);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            Dim SetPayLater As New PayLater
            SetPayLater.ShippingMethod = "UPSGround"
            SetPayLater.ProductCategory = "E" ' Camera and Photos
            SetPayLater.PayPalCheckoutBtnType = "P"
            ' You can combine up to 10 promotions for PayPal Promotional Financing.
            ' L_PROMOCODE0
            Dim SetPayLaterLineItem As New PayLaterLineItem
            SetPayLaterLineItem.PromoCode = "101"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem)
            ' L_PROMOCODE1
            Dim SetPayLaterLineItem1 As New PayLaterLineItem
            SetPayLaterLineItem1.PromoCode = "102"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem1)
            ' If using Pay Later, you would create the data object as below.
            Dim SetRequest As New ECSetRequest("http://www.myreturnurl.com", "http://www.mycancelurl.com", setPayLater)
            .................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLater.ShippingMethod">
            <summary>
            Gets, Sets  ShippingMethod
            </summary>
            <remarks>
            <para>Use this method to set the Shipping method
            for this transaction.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPPINGMETHOD</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLater.PromoCodeOverride">
            <summary>
            Gets, Sets  PromoCodeOverride
            </summary>
            <remarks>
            <para>Value is 0 or 1. Default value is 0.
            Set to 1 to override promotions from Set Express 
            Checkout request.  Otherwise, promotions will not be
            overridden.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PROMOCODEOVERRIDE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLater.ProfileAddressChangeDate">
            <summary>
            Gets, Sets  ProfileAddressChangeDate
            </summary>
            <remarks>
            <para>The last date that the billing address
            stored in the customers profile with the merchant 
            was changed. The date must be in UTC/GMT format.
            For example, 2007-12-15T17:23:15Z.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PROFILEADDRESSCHANGEDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLater.PayPalCheckoutBtnType">
            <summary>
            Gets, Sets  PayPalCheckoutBtnType
            </summary>
            <remarks>
            <para>Only for the No payment 90 days button, you
            must set this variable to P, which allows PayPal
            to make 90 days no payments the default payment
            option in the PayPal checkout flow.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYPALCHECKOUTBTNTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLater.ProductCategory">
            <summary>
            Gets, Sets  ProductCategory
            </summary>
            <remarks>
            <para>The product category for this order. If the 
            customers cart contains more than one item, use
            the product category for the most expensive item.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PRODUCTCATEGORY</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.PayLaterAddLineItem(PayPal.Payments.DataObjects.PayLaterLineItem)">
            <summary>
            Add a promo code to promo code.
            </summary>
            <param name="Item">Lineitem object</param>
            <remarks>
            <para>Use this method to add a promo code to the request.  A promotion code for
            PayPal Promotional Financing where n is a value from 0 to 9. The first promotion
            must be specified as L_PROMOCODE0.  Combine promotions by using additonal parameters,
            such as L_PROMOCODE1 and L_PROMOCODE2.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            // You can combine up to 10 promotions for PayPal Promotional Financing.
            // L_PROMOCODE0
            PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();
            setPayLaterLineItem.PromoCode = "101";
            setPayLater.PayLaterAddLineItem(setPayLaterLineItem);
            // L_PROMOCODE1
            PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();
            setPayLaterLineItem1.PromoCode = "102";
            setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            ' You can combine up to 10 promotions for PayPal Promotional Financing.
            ' L_PROMOCODE0
            Dim SetPayLaterLineItem As New PayLaterLineItem
            SetPayLaterLineItem.PromoCode = "101"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem)
            ' L_PROMOCODE1
            Dim SetPayLaterLineItem1 As New PayLaterLineItem
            SetPayLaterLineItem1.PromoCode = "102"
            SetPayLater.PayLaterAddLineItem(SetPayLaterLineItem1)
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.PayLaterRemoveLineItem(System.Int32)">
            <summary>
            Removes a promo code from line item list.
            </summary>
            <param name="Index">Index of promo code to be removed.</param>
            <remarks>
            <para>Use this method to remove a promo code at a particular index 
            in the requester.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // SetPayLaterLineItem is the PayLater object
            .................
            // Remove item at index 0
            setPayLater.PayLaterRemoveLineItem(0);
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' SetPayLaterLineItem is the PayLater object
            .................
            ' Remove item at index 0;
            SetPayLater.PayLaterRemoveLineItem(0)
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.PayLaterRemoveAllLineItems">
            <summary>
            Clears the promo code list.
            </summary>
            <remarks>
            <para>Use this method to clear all the 
            promo codes added to the request.</para>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
            .................
            // SetPayLaterLineItem is the PayLater object
            .................
            // Remove all line items.
            setPayLater.PayLaterRemoveAllLineItems();
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
            .................
            ' SetPayLaterLineItem is the PayLater object
            .................
            ' Remove all line items.
            SetPayLater.PayLaterRemoveAllLineItems()
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.GenerateItemRequest">
            <summary>
            Generates transaction request for promo codes
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLater.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PayLaterLineItem">
            <summary>
            This class holds the PayLater Line Item related information.
            </summary>
            <remarks>
            <para>Line item data describes the details of the PayLater promo codes and can be can be passed 
             for each transaction. The convention for passing line item data in name/value pairs 
             is that each name/value starts with L_ and ends with n where n is the line item number.
             For example L_PROMOCODEn=101 is promo code 101, with n starting at 0</para>
            </remarks>
            <example>
            <para>Following example shows how to use line item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a line item.
             LineItem Item = new LineItem();
             
             //Add info to line item.
             Item.Amt = new Currency(new Decimal(25.12));
             Item.PickupStreet = "685A E. Middlefield Rd.";
             
             //Add line item to invoice.
             Inv.AddLineItem(Item);
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a line item.
             Dim Item As LineItem  = New LineItem
             
             'Add info to line item.
             Item.Amt = New Currency(new Decimal(25.12))
             Item.PickupStreet = "685A E. Middlefield Rd."
             
             'Add line item to invoice.
             Inv.AddLineItem(Item)
             
             ..................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PayLaterLineItem.mPromoCode">
            <summary>
            Promo Code
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayLaterLineItem.PromoCode">
            <summary>
            Gets, Sets  Promo Code
            </summary>
            <remarks>
            <para>The product category for this order. If the 
            customers cart contains more than one item, use
            the product category for the most expensive item.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>PROMOCODE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLaterLineItem.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para>Line item data describes the details of the item purchased and can be can be passed 
             for each transaction. The convention for passing line item data in name/value pairs 
             is that each name/value starts with L_ and ends with n where n is the line item number.
             For example L_QTY0=1 is the quantity for line item 0 and is equal to 1, 
             with n starting at 0</para>
            </remarks>
            <example>
            <para>Following example shows how to use line item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a line item.
             LineItem Item = new LineItem();
             
             //Add info to line item.
             Item.Amt = new Currency(new Decimal(25.12));
             Item.PickupStreet = "685A E. Middlefield Rd.";
             
             //Add line item to invoice.
             Inv.AddLineItem(Item);
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a line item.
             Dim Item As LineItem  = New LineItem
             
             'Add info to line item.
             Item.Amt = New Currency(new Decimal(25.12))
             Item.PickupStreet = "685A E. Middlefield Rd."
             
             'Add line item to invoice.
             Inv.AddLineItem(Item)
             
             ..................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayLaterLineItem.GenerateRequest(System.Int32)">
            <summary>
            Generates line item request
            </summary>
            <param name="Index">index number of line item</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PaymentCard">
            <summary>
            This abstract class serves as base
            class for Card Payment devices.
            </summary>
            <remarks>This class can be extended to create a new payment device type.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mExpDate">
            <summary>
            Card Expiry Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mCvv2">
            <summary>
            Card CVV2 code
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mCardStart">
            <summary>
            CardStart
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mCardIssue">
            <summary>
            Card Issue
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mCardonFile">
            <summary>
            Card on File
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mTxId">
            <summary>
            Card on File Transaction ID
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentCard.mParId">
            <summary>
            Payment Account Reference
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentCard.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Acct">Card number</param>
            <param name="ExpDate">Card expiry date</param>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.Cvv2">
            <summary>
            Gets, Sets  Cvv2
            </summary>
            <remarks>
            Card validation code. This is the 3 or 4 digit code 
            present at the back side of the card.
            <para>Maps to Payflow Parameter:</para>
            <code>CVV2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.CardStart">
            <summary>
            Gets, Sets  CardStart
            </summary>
            <remarks>
            Used for Switch/Solo Cards.
            <para>Maps to Payflow Parameter:</para>
            <code>CARDSTART</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.CardIssue">
            <summary>
            Gets, Sets  CardIssue
            </summary>
            <remarks>
            Used for Switch/Solo Cards. 
            <para>Maps to Payflow Parameter:</para>
            <code>CARDISSUE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.CardonFile">
            <summary>
            Gets, Sets  Card on File
            </summary>
            <remarks>
            Used to flag if the card is on file.
            <para>Maps to Payflow Parameter:</para>
            <code>CARDONFILE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.TxId">
            <summary>
            Gets, Sets  Transaction ID
            </summary>
            <remarks>
            Used to flag if the card is on file.
            <para>Maps to Payflow Parameter:</para>
            <code>TXID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentCard.ParId">
            <summary>
            Gets, Sets PAR
            </summary>
            <remarks>
            Reference number assigned to each unique Primary Account Number (PAN).
            <para>Maps to Payflow Parameter:</para>
            <code>PAR</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentCard.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PaymentDevice">
            <summary>
            This abstract class serves as base class of all
            payment devices.
            </summary>
            <remarks>
            <para>Each Payment Device is associated with a tender type .</para>
            <para>Following are the Payment Devices associated with 
            different tender types:</para>
            <list type="table">
            <listheader>
            <term>Payment Device Data Object</term>
            <description>Tender type</description>
            </listheader>
            <item>
            <term>BankAcct</term>
            <description><see cref="T:PayPal.Payments.DataObjects.ACHTender">ACHTender</see></description>
            </item>
            <item>
            <term>CreditCard, PurchaseCard, SwipeCard</term>
            <description>
            <para><see cref="T:PayPal.Payments.DataObjects.CardTender">CardTender</see></para>
            </description>
            </item>
            <item>
            <term>CheckPayment</term>
            <description><see cref="T:PayPal.Payments.DataObjects.CheckTender">CheckTender</see></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentDevice.mAcct">
            <summary>
            Payment Device number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentDevice.mName">
            <summary>
            Payment Device Holder's name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PaymentDevice.mMagtekInfo">
            <summary>
            Payment Device Magtek Information
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentDevice.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentDevice.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Acct">Payment device Number</param>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentDevice.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Acct">Payment device Number</param>
            <param name="Name">Payment device holder's name</param>
            <remarks>Abstract class. Instance cannot be created directly.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentDevice.Acct">
            <summary>
            Gets, Sets Acct  
            </summary>
            <remarks>Account holder's account number.
            <para>Maps to Payflow Parameter:s as follows:</para>
            <code>
            <list type="table">
            <listheader>
            <term>Specific transaction</term>
            <description>Payflow Parameter</description>
            </listheader>
            <item>
            <term>Transactions with CreditCard, PurchaseCard, BankAcct payment devices</term>
            <description>ACCT</description>
            </item>
            <item>
            <term>Transactions with CheckPayment</term>
            <description>MICR</description>
            </item>
            <item>
            <term>Transactions with SwipeCard</term>
            <description>SWIPE</description>
            </item>
            </list>
            </code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentDevice.Name">
            <summary>
            Gets, Sets Name  
            </summary>
            <remarks>Account holder's name.
            <para>Maps to Payflow Parameter:</para>
            <code>NAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PaymentDevice.MagtekInfo">
            <summary>
            Gets, Sets  MagtekInfo
            </summary>
            <remarks>
            Used to hold the Magtek Data.
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PaymentDevice.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PayPalTender">
            <summary>
            Used for PayPal tender related information
            </summary>
            <remarks>
            CreditCard is the the Payment device associated with this tender type.
            ExpressCheckoutRequest is the DataObject associated with this tendet 
            in case of a exprecc Checout operation.
            <seealso cref="T:PayPal.Payments.DataObjects.CreditCard"/>
            <seealso cref="P:PayPal.Payments.DataObjects.PayPalTender.ExpressCheckoutRequest"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.PayPalTender.ExpressCheckoutRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayPalTender.#ctor(PayPal.Payments.DataObjects.CreditCard)">
            <summary>
            Constructor
            </summary>
            <param name="CreditCard">Credit Card object</param>
            <remarks>This constructor is used to create a PayPalTender
             with CreditCard as the payment device</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//CredCard is the CreditCard object.
            	.............
            	
            	PayPalTender Tender = new PayPalTender(CredCard);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'CredCard is the CreditCard object.
            	.............
            	
            	Dim Tender As PayPalTender = new PayPalTender(CredCard)
            	
            	..............
             </code>
             </example>
            <seealso cref="T:PayPal.Payments.DataObjects.CreditCard"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PayPalTender.#ctor(PayPal.Payments.DataObjects.ExpressCheckoutRequest)">
            <summary>
            Constructor
            </summary>
            <param name="ECReq">ExpressCheckoutRequest object</param>
            <remarks>This constructor is used to create a PayPalTender
             with ExpressCheckoutRequest dataobject.</remarks>
             <example>
             <code lang="C#" escaped="false">
            	.............
            	//ECReq could be one of these ECSetRequest ,ECGetRequest or ECDoRequest.
            	.............
            	
            	PayPalTender Tender = new PayPalTender(ECReq);
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	'ECReq could be one of these ECSetRequest ,ECGetRequest or ECDoRequest.
            	.............
            	
            	Dim Tender As PayPalTender = new PayPalTender(ECReq)
            	
            	..............
             </code>
             </example>
            <seealso cref="P:PayPal.Payments.DataObjects.PayPalTender.ExpressCheckoutRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECSetRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECGetRequest"/>
            <seealso cref="T:PayPal.Payments.DataObjects.ECDoRequest"/>
        </member>
        <member name="T:PayPal.Payments.DataObjects.PurchaseCard">
            <summary>
            Used for Purchase card related information
            </summary>
            <remarks>
            PurchaseCard is associated with CardTender.
            <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.PurchaseCard.mCommCard">
            <summary>
            Purchase card type
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PurchaseCard.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for PurchaseCard
            </summary>
            <param name="Acct">Purchase Card number</param>
            <param name="ExpDate">Card expiry date</param>
            <param name="CommCard">Purchase Card  type</param>
            <remarks>This is used as Payment Device for the CardTender.
            <para>Maps to Payflow Parameter:</para>
            <code>Acct --> ACCT, ExpDate --> EXPDATE, CommCard --> COMMCARD</code>
            </remarks>
            <example>
             <code lang="C#" escaped="false">
            	.............
            	
            	PurchaseCard PayDevice = new PurchaseCard("XXXXXXXXXX","XXXX","C");
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	
            	Dim PayDevice As PurchaseCard = new PurchaseCard("XXXXXXXXXX","XXXX","C")
            	
            	..............
             </code>
             </example>
             <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.PurchaseCard.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.RecurringInfo">
             <summary>
             Used for recurring transaction related information
             </summary>
             <remarks>RecurringInfo contains the required and optional parameters 
             specific to all the recurring transactions.</remarks>
             <example>Following examples shows how to use the 
             RecurringInfo.
             <code lang="C#" escaped="false">
            	............................
            	//Populate other data objects.
            	............................
            	
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed. 
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use 
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT / 
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Add Transaction.
            	RecurringAddTransaction Trans = new RecurringAddTransaction(
            		User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            	Console.WriteLine(Environment.NewLine + "Press Enter to Exit ...");
            	Console.ReadLine();
            	}
             </code>
             <code lang="Visual Basic" escaped="false">
            	............................
            	'Populate other data objects.
            	............................
            	
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	' The date that the first payment will be processed. 
            	' This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009"
            	RecurInfo.ProfileName = "PayPal"
            	' Specifies how often the payment occurs. All PAYPERIOD values must use 
            	' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT / 
            	' QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK"
            	'/////////////////////////////////////////////////////////////////
            	
            	' Create a new Recurring Add Transaction.
            	Dim Trans As RecurringAddTransaction = New RecurringAddTransaction(User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId)
            	
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            	
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            	
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mProfileName">
            <summary>
            Profile name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mStart">
            <summary>
            Start Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mTerm">
            <summary>
            Payment Term
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mPayPeriod">
            <summary>
            Payment Period
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mOptionalTrx">
            <summary>
            Optional transaction type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mOptionalTrxAmt">
            <summary>
            Optional transaction amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mRetryNumDays">
            <summary>
            Retry number of days
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mMaxFailPayments">
            <summary>
            Max failed payments
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mOrigProfileId">
            <summary>
            Profile id of the original profile.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mPaymentHistory">
            <summary>
            Payment history
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mPaymentNum">
            <summary>
            Payment number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringInfo.mFrequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.RecurringInfo.#ctor">
             <summary>
             Constructor for RecurringInfo
             </summary>
             <remarks>RecurringInfo contains the required and optional parameters 
             specific to all the recurring transactions.</remarks>
             <example>Following examples shows how to use the 
             RecurringInfo.
             <code lang="C#" escaped="false">
            	............................
            	//Populate other data objects.
            	............................
            	
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed. 
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use 
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT / 
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Add Transaction.
            	RecurringAddTransaction Trans = new RecurringAddTransaction(
            		User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            	Console.WriteLine(Environment.NewLine + "Press Enter to Exit ...");
            	Console.ReadLine();
            	}
             </code>
             <code lang="Visual Basic" escaped="false">
            	............................
            	'Populate other data objects.
            	............................
            	
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	' The date that the first payment will be processed. 
            	' This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009"
            	RecurInfo.ProfileName = "PayPal"
            	' Specifies how often the payment occurs. All PAYPERIOD values must use 
            	' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT / 
            	' QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK"
            	'/////////////////////////////////////////////////////////////////
            	
            	' Create a new Recurring Add Transaction.
            	Dim Trans As RecurringAddTransaction = New RecurringAddTransaction(User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId)
            	
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            	
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            	
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
             </code>
             </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.ProfileName">
            <summary>
            Gets, Sets ProfileName 
            </summary>
            <remarks>
            Name for the profile.
            <para>Maps to Payflow Parameter:</para>
            <code>PROFILENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.Start">
            <summary>
            Gets, Sets Start
            </summary>
            <remarks>
            Beginning date for the recurring billing cycle.
            <para>Maps to Payflow Parameter:</para>
            <code>START</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.Term">
            <summary>
            Gets, Sets Term
            </summary>
            <remarks>
            Number of payments to be made over the life of the agreement.
            <para>Maps to Payflow Parameter:</para>
            <code>TERM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.PayPeriod">
             <summary>
             Gets, Sets PayPeriod
             </summary>
             <remarks>
             Specifies how often the payment occurs.
             <para>Allowed PayPeriods are:</para>
             <list type="table">
             <listheader>
             <term>Value</term>
             <description>Description</description>
             </listheader>
             <item><term>WEEK</term><description>Weekly - Every week on the same day of the week as the first payment.</description></item>
             <item><term>BIWK</term><description>Every Two Weeks - Every other week on the same day of the week as the first payment.</description></item>
             <item><term>SMMO</term><description>Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month.</description></item>
             <item><term>FRWK</term><description>Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year.</description></item>
             <item><term>MONT</term><description>Monthly - Every month on the same date as the first payment. Results in 12 payments per year.</description></item>
             <item><term>QTER</term><description>Quarterly - Every three months on the same date as the first payment.</description></item>
             <item><term>SMYR</term><description>Twice Every Year - Every six months on the same date as the first payment.</description></item>
             <item><term>YEAR</term><description>Yearly - Every twelve months on the same date as the first payment.</description></item>
            </list>
             <para>Maps to Payflow Parameter:</para>
             <code>PAYPERIOD</code>
             </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.OptionalTrx">
            <summary>
            Gets, Sets OptionalTrx
            </summary>
            <remarks>
            Defines an optional Authorization for validating the account
            information or for charging an initial fee. If this transaction
            fails, then the profile is not generated.
            <para> A represents an optional Authorization transaction ($1 by
            default). OPTIONALTRX=A only applies to credit card transactions.</para>
            <para>S represents an initial fee.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>OPTIONALTRX</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.OptionalTrxAmt">
            <summary>
            Gets, Sets OptionalTrxAmt
            </summary>
            <remarks>
            Amount of the Optional Transaction. Required only when OPTIONALTRX=S.
            Optional when OPTIONALTRX=A ($1 Authorization by default)
            <para>Maps to Payflow Parameter:</para>
            <code>OPTIONALTRXAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.RetryNumDays">
            <summary>
            Gets, Sets RetryNumDays
            </summary>
            <remarks>
            The number of consecutive days that Gateway should
            attempt to process a failed transaction until Approved
            status is received.
            <para>Maps to Payflow Parameter:</para>
            <code>RETRYNUMDAYS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.MaxFailPayments">
            <summary>
            Gets, Sets MaxFailPayments
            </summary>
            <remarks>
            The number of payment periods (specified by
            PAYPERIOD) for which the transaction is allowed to fail
            before PayPal cancels a profile.
            <para>Maps to Payflow Parameter:</para>
            <code>MAXFAILPAYMENTS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.OrigProfileId">
            <summary>
            Gets, Sets OrigProfileId
            </summary>
            <remarks>Required for Modify/Cancel/Inquiry/Retry action.
            Profile IDs for test profiles start with RT.
            Profile IDs for live profiles start with RP.
            <para>Maps to Payflow Parameter:</para>
            <code>ORIGPROFILEID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.PaymentHistory">
             <summary>
             Gets, Sets PaymentHistory
             </summary>
             <remarks>Used for recurring inquiry.
             <para>Allowed values are:</para>
             <list type="table">
             <listheader>
             <term>Value</term>
             <description>Description</description>
             </listheader>
             <item><term>Y</term><description>To view the full set of payment information for a profile, include the name/value pair with the Inquiry action.</description></item>
             <item><term>N</term><description>To view the status of a customer’s profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N).</description></item>
            </list>
             <para>Maps to Payflow Parameter:</para>
             <code>PAYMENTHISTORY</code>
             </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.PaymentNum">
             <summary>
             Gets, Sets PaymentNum
             </summary>
             <remarks>
             Payment number identifying the failed payment to be retried.
             <para>Maps to Payflow Parameter:</para>
             <code>PAYMENTNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringInfo.Frequency">
             <summary>
             Gets, Sets Frequency
             </summary>
             <remarks>
             Set the number of days between payments.  Used with PAYPERIOD=DAYS.
             <para>Maps to Payflow Parameter:</para>
             <code>FREQUENCY</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.RecurringInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.RecurringResponse">
             <summary>
             Container class for all the messages related to
             recurring transactions.
             </summary>
             <remarks>This class contains response messages specific to 
             the recurring transactions.
             </remarks>
             <example>
             Following example shows how to obtain and use the recurring 
             response.
             <code lang="C#" escaped="false">
            		...................
            		// Trans is the recurring transaction.
            		...................
            		// Submit the transaction.
            		Response Resp = Trans.SubmitTransaction();
            		
            		if (Resp != null)
            			{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            
            			// Get the Recurring Response parameters.
            			RecurringResponse RecurResponse = Resp.RecurringResponse;
            			if (RecurResponse != null)
            			{
            				Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            				Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            			}
            		}
            		
            		...................
             </code>
             <code lang="Visual Basic" escaped="false">
            	            ..........................
            	            ' Trans is the transaction object
            	            ..........................
            
            	            ' Submit the transaction.
            	            Dim Resp As Response = Trans.SubmitTransaction()
            
            	            If Not Resp Is Nothing Then
            	                ' Get the Transaction Response parameters.
            	                Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	                If Not TrxnResponse Is Nothing Then
            	                    Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	                    Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	                End If
            
            	                ' Get the Recurring Response parameters.
            	                Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	                If Not RecurResponse Is Nothing Then
            	                    Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	                    Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	                End If
            	            End If
            
            	            ..........................
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mProfileId">
            <summary>
            Profile id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mRPRef">
            <summary>
            RPRef
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mTrxPNRef">
            <summary>
            TrxPNref
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mTrxResult">
            <summary>
            Transaction result
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mTrxRespMsg">
            <summary>
            Transaction response msg
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mProfileName">
            <summary>
            Profile name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mStart">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mTerm">
            <summary>
            Term
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mPayPeriod">
             <summary>
            Payment period
             </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mTenderType">
            <summary>
            Tender type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mPaymentsLeft">
            <summary>
            Payments left
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mNxtPayment">
            <summary>
            Next Payment
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mEnd">
            <summary>
            End payment
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mAggregateAmt">
            <summary>
            Agrregate amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mAggregateOptionalAmt">
            <summary>
            Aggregate optional amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mAmt">
            <summary>
            amount
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mAcct">
            <summary>
            account
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mExpDate">
            <summary>
            Expiry date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mMaxFailPayments">
            <summary>
            Max failed payments
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mNumFailPayments">
            <summary>
            Number of fail payments
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mRetryNumDays">
            <summary>
            Retry number of days
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mEmail">
            <summary>
            Email
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mCompanyName">
            <summary>
            Company name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mName">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mFirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mMiddleName">
            <summary>
            Middle name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mLastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mStreet">
            <summary>
            Street
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mCity">
            <summary>
            City
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mState">
            <summary>
            State
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mZip">
            <summary>
            Zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mCountry">
            <summary>
            Country
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mPhoneNum">
            <summary>
            Phone num
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToFName">
            <summary>
            Ship to first name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToMName">
            <summary>
            Ship to middle name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToLName">
            <summary>
            Ship to last name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToStreet">
            <summary>
            Ship to street
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToCity">
            <summary>
            Ship to city
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToState">
            <summary>
            Ship to state
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToZip">
            <summary>
            Ship to zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mShipToCountry">
            <summary>
            Ship to country
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mInquiryParams">
            <summary>
            Inquiry Response Array list.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mCreationDate">
            <summary>
            Creation Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mLastChangedDate">
            <summary>
            Last Changed Date
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mRPState">
            <summary>
            Recurring Profile State
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mNextPaymentNumber">
            <summary>
            Next Payment Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mFrequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RecurringResponse.mCurrency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ProfileId">
            <summary>
            Gets ProfileId
            </summary>
            <remarks>
            The Profile ID of the original profile.
            <para>Maps to Payflow Parameter:</para>
            <code>PROFILEID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.RPRef">
            <summary>
            Gets RPRef
            </summary>
            <remarks>
            Reference number to this particular action request.
            <para>Maps to Payflow Parameter:</para>
            <code>RPREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.TrxPNRef">
            <summary>
            Gets TrxPNRef
            </summary>
            <remarks>
            PNREF of the optional transaction.
            <para>Maps to Payflow Parameter:</para>
            <code>TRXPNREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.TrxResult">
            <summary>
            Gets TrxResult
            </summary>
            <remarks>
            RESULT of the optional transaction.
            <para>Maps to Payflow Parameter:</para>
            <code>TRXRESULT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.TrxRespMsg">
            <summary>
            Gets TrxRespMsg
            </summary>
            <remarks>
            RESPMSG of the optional transaction
            <para>Maps to Payflow Parameter:</para>
            <code>TRXRESPMSG</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ProfileName">
            <summary>
            Gets ProfileName
            </summary>
            <remarks>
            Name for the profile.
            <para>Maps to Payflow Parameter:</para>
            <code>PROFILENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Start">
            <summary>
            Gets Start
            </summary>
            <remarks>
            Beginning date for the recurring billing cycle.
            <para>Maps to Payflow Parameter:</para>
            <code>START</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Term">
            <summary>
            Gets Term
            </summary>
            <remarks>
            Number of payments to be made over the life of the agreement.
            <para>Maps to Payflow Parameter:</para>
            <code>TERM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.PayPeriod">
            <summary>
            Gets PayPeriod
            </summary>
            <remarks>
            Specifies how often the payment occurs.
            <para>Maps to Payflow Parameter:</para>
            <code>PAYPERIOD</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Status">
            <summary>
            Gets Status
            </summary>
            <remarks>
            Current status of the profile.
            <para>Maps to Payflow Parameter:</para>
            <code>STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Tender">
            <summary>
            Gets TenderType
            </summary>
            <remarks>
            Tender Type
            <para>Maps to Payflow Parameter:</para>
            <code>TENDER</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.PaymentsLeft">
            <summary>
            Gets PaymentsLeft
            </summary>
            <remarks>
            Number of payments left to be billed.
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTSLEFT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.NextPayment">
            <summary>
            Gets NxtPayment
            </summary>
            <remarks>
            Date that the next payment is due.
            <para>Maps to Payflow Parameter:</para>
            <code>NEXTPAYMENT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.End">
            <summary>
            Gets End
            </summary>
            <remarks>
            Date that the last payment is due. Present only if this is
            not an unlimited-term subscription.
            <para>Maps to Payflow Parameter:</para>
            <code>END</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.AggregateAmt">
            <summary>
            Gets AggregateAmt
            </summary>
            <remarks>
            Amount collected so far for scheduled payments.
            <para>Maps to Payflow Parameter:</para>
            <code>AGGREGATEAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.AggregateOptionalAmt">
            <summary>
            Gets AggregateOptAmt
            </summary>
            <remarks>
            Amount collected through sending optional transactions.
            <para>Maps to Payflow Parameter:</para>
            <code>AGGREGATEOPTIONALAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Amt">
            <summary>
            Gets Amt
            </summary>
            <remarks>
            Base dollar amount to be billed.
            <para>Maps to Payflow Parameter:</para>
            <code>AMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Acct">
            <summary>
            Gets Acct
            </summary>
            <remarks>
            Masked credit card number.
            <para>Maps to Payflow Parameter:</para>
            <code>ACCT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ExpDate">
            <summary>
            Gets ExpDate
            </summary>
            <remarks>
            Expiration date of the credit card account.
            <para>Maps to Payflow Parameter:</para>
            <code>EXPDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.MaxFailPayments">
            <summary>
            Gets MaxFailPayments
            </summary>
            <remarks>
            The number of payment periods (specified by
            PAYPERIOD) for which the transaction is allowed to fail
            before PayPal cancels a profile.
            <para>Maps to Payflow Parameter:</para>
            <code>MAXFAILPAYMENTS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.NumFailPayments">
            <summary>
            Gets NumFailPayments
            </summary>
            <remarks>
            Number of payments that failed.
            <para>Maps to Payflow Parameter:</para>
            <code>NUMFAILPAYMENTS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.RetryNumDays">
            <summary>
            Gets RetryNumDays
            </summary>
            <remarks>
            The number of consecutive days that PayPal should
            attempt to process a failed transaction until Approved
            status is received.
            <para>Maps to Payflow Parameter:</para>
            <code>RETRYNUMDAYS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Email">
            <summary>
            Gets Email
            </summary>
            <remarks>
            Customer e-mail address.
            <para>Maps to Payflow Parameter:</para>
            <code>EMAIL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.CompanyName">
            <summary>
            Gets CompanyName
            </summary>
            <remarks>
            Recurring Profile Company Name.
            <para>Maps to Payflow Parameter:</para>
            <code>COMPANYNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Name">
            <summary>
            Gets Name
            </summary>
            <remarks>
            Name of account holder
            <para>Maps to Payflow Parameter:</para>
            <code>NAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.FirstName">
            <summary>
            Gets FirstName
            </summary>
            <remarks>
            First name of card holder.
            <para>Maps to Payflow Parameter:</para>
            <code>FIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.MiddleName">
            <summary>
            Gets MiddleName
            </summary>
            <remarks>
            Middle name of card holder
            <para>Maps to Payflow Parameter:</para>
            <code>MIDDLENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.LastName">
            <summary>
            Gets Lastname
            </summary>
            <remarks>
            Last name of card holder
            <para>Maps to Payflow Parameter:</para>
            <code>LASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Street">
            <summary>
            Gets Street
            </summary>
            <remarks>
            Billing address
            <para>Maps to Payflow Parameter:</para>
            <code>STREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.City">
            <summary>
            Gets City
            </summary>
            <remarks>
            Billing city
            <para>Maps to Payflow Parameter:</para>
            <code>CITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.State">
            <summary>
            Gets State
            </summary>
            <remarks>
            Billing state
            <para>Maps to Payflow Parameter:</para>
            <code>STATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Zip">
            <summary>
            Gets Zip
            </summary>
            <remarks>
            Billing zip
            <para>Maps to Payflow Parameter:</para>
            <code>ZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Country">
            <summary>
            Gets Country
            </summary>
            <remarks>
            Billing country
            <para>Maps to Payflow Parameter:</para>
            <code>COUNTRY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.PhoneNum">
            <summary>
            Gets PhoneNum
            </summary>
            <remarks>
            Billing phonenum
            <para>Maps to Payflow Parameter:</para>
            <code>PHONENUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToFirstName">
            <summary>
            Gets ShipToFirstName
            </summary>
            <remarks>
            First name of the ship-to person
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOFIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToMiddleName">
            <summary>
            Gets ShipToMiddleName
            </summary>
            <remarks>
            Middle name of the ship-to person
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOMIDDLENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToLastName">
            <summary>
            Gets ShipToLastName
            </summary>
            <remarks>
            Last name of the ship-to person
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOLASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToStreet">
            <summary>
            Gets ShipToStreet
            </summary>
            <remarks>
            Shipping street
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToCity">
            <summary>
            Gets ShipToCity
            </summary>
            <remarks>
            Shipping city
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToState">
            <summary>
            Gets ShipToState
            </summary>
            <remarks>
            Shipping state
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToZip">
            <summary>
            Gets ShipToZip
            </summary>
            <remarks>
            Shipping zip
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.ShipToCountry">
            <summary>
            Gets ShipToCountry
            </summary>
            <remarks>
            Shipping country
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCOUNTRY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.CreationDate">
            <summary>
            Gets Creation Date
            </summary>
            <remarks>
            Creation Date
            <para>Maps to Payflow Parameter:</para>
            <code>CREATIONDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.LastChangedDate">
            <summary>
            Gets Last Changed Date
            </summary>
            <remarks>
            Last Changed Date
            <para>Maps to Payflow Parameter:</para>
            <code>LASTCHANGED</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.RPState">
            <summary>
            Gets Recurring Profile State
            </summary>
            <remarks>
            Recurring Profile State
            <para>Maps to Payflow Parameter:</para>
            <code>RPSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.NextPaymentNumber">
            <summary>
            Gets Next Payment Number
            </summary>
            <remarks>
            Next Payment Number
            <para>Maps to Payflow Parameter:</para>
            <code>NEXTPAYMENTNUM</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Frequency">
            <summary>
            Gets Frequency
            </summary>
            <remarks>
            Frequency
            <para>Maps to Payflow Parameter:</para>
            <code>FREQUENCY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.Currency">
            <summary>
            Gets Currency
            </summary>
            <remarks>
            Frequency
            <para>Maps to Payflow Parameter:</para>
            <code>CURRENCY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RecurringResponse.InquiryParams">
            <summary>
            Gets recurring inquiry 
            param hash table
            </summary>
            <remarks>
            This hash table contains the response messages 
            when the recurring transaction is with 
            PAYMENTHISTORY=Y
            <para>Maps to following Payflow Parameters:</para>
            <code>
            <list type="table">
            <listheader>
            <term>Payflow param</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>P_RESULTn</term>
            <description>Result code of the financial transaction.</description>
            </item>
            <item>
            <term>P_PNREFn</term>
            <description>PNREF of the particular payment.</description>
            </item>
            <item>
            <term>P_TRANSTATEn</term>
            <description>TRANS_STATE of the particular payment.</description>
            </item>
            <item>
            <term>P_TENDERn</term>
            <description>Tender type</description>
            </item>
            <item>
            <term>P_TRANSTIMEn</term>
            <description>The timestamp for the transaction in the dd-mmm-yy hh:mm AM/PM format.</description>
            </item>
            <item>
            <term>P_AMTn</term>
            <description>Dollar amount (US dollars) that was billed. Specifies dollars and cents using a decimal point.</description>
            </item>
            </list>
            </code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.RecurringResponse.#ctor">
            <summary>
            Constructor for RecurringResponse
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.RecurringResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets Response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Response">
             <summary>
             Container class for response messages.
             </summary>
             <remarks>This class enclosed response data objects specific to
             following:
             <list type="bullet">
             <item>Transaction response 
             --> Response messages common to all transactions.</item>
             <item>Fraud response 
             --> Fraud Filters response messages.</item>
             <item>Recurring response 
             --> Recurring transaction response messages.</item>
             <item>Buyerauth response 
             --> Buyer auth response messages. (Not supported.)</item>
             </list>
             <para>Additionally the Response class also contains the 
             transaction context, full request response string values.</para>
             <seealso cref="P:PayPal.Payments.DataObjects.Response.FraudResponse"/>
             <seealso cref="P:PayPal.Payments.DataObjects.Response.TransactionResponse"/>
             <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
             <seealso cref="P:PayPal.Payments.DataObjects.Response.BuyerAuthResponse"/>
             <seealso cref="T:PayPal.Payments.Common.Context"/>
             </remarks>
             <example>Following example shows, how to obtain response
              of a transaction and how to use it.
             <code lang="C#" escaped="false">
            		..........
            		// Trans is the transaction object.
            		..........
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		' Trans is the transaction object.
            		..........
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
              </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mFraudResponse">
            <summary>
            Fraud Response
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mBuyerAuthResponse">
            <summary>
            Buyer auth response
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mRecurringResponse">
            <summary>
            Recurring response
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mGetExpressCheckoutDetailsResponse">
            <summary>
            Get express checkout details response
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mDoExpressCheckoutPaymentResponse">
            <summary>
            DoExpressCheckoutResponse
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mSetExpressCheckoutPaymentResponse">
            <summary>
            ExpressCheckoutResponse
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mUpdateExpressCheckoutPaymentResponse">
            <summary>
            UpdateExpressCheckoutResponse
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mTransactionResponse">
            <summary>
            Transaction response
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mContext">
            <summary>
            Holds the transaction context
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mResponseHashTable">
            <summary>
            Holds parsed response hash table
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mExtDataList">
            <summary>
            Holds Extended data from response
            if any
            populated into extend data objects
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mRequestString">
            <summary>
            Request
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mResponseString">
            <summary>
            Response string
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Response.mRequestId">
            <summary>
            Request id
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.FraudResponse">
            <summary>
            Gets FraudResult
            </summary>
            <remarks>Gets the container object for all the fraud filters
            related response messages.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.FraudResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.BuyerAuthResponse">
            <summary>
            Gets BuyerAuthResult
            </summary>
            <remarks>Gets the container object for all the buyer auth 
            related response messages.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.BuyerAuthResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.RecurringResponse">
            <summary>
            Gets RecurringResult
            </summary>
            <remarks>Gets the container object for all the recurring 
            transaction related response messages.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ExpressCheckoutGetResponse">
            <summary>
            Gets ExpressCheckout Response for GET action
            </summary>
            <remarks>Gets the container object for all the express
            checkout related response messages for GET.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ExpressCheckoutDoResponse">
            <summary>
            Gets ExpressCheckout Response for DO action
            </summary>
            <remarks>Gets the container object for all the express
            checkout related response messages for DO.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ExpressCheckoutSetResponse">
            <summary>
            Gets ExpressCheckout Response for Set action
            </summary>
            <remarks>Gets the container object for all the express
            checkout related response messages for SET.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ExpressCheckoutUpdateResponse">
            <summary>
            Gets ExpressCheckout Response for Update action
            </summary>
            <remarks>Gets the container object for all the express
            checkout related response messages for UPDATE.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.RecurringResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.TransactionResponse">
            <summary>
            Gets TransactionResult
            </summary>
            <remarks>Gets the container object for response messages common to
            all the transactions.
            <seealso cref="P:PayPal.Payments.DataObjects.Response.TransactionResponse"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.TransactionContext">
            <summary>
            Gets transaction context
            </summary>
            <remarks>Gets the transaction context 
            populated with errors, if any.
            <seealso cref="T:PayPal.Payments.Common.Context"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ExtendDataList">
            <summary>
            Gets extended response
            list.
            </summary>
            <remarks>This arraylist contains the extend data objects populated
            with the response messages.
            <seealso cref="T:PayPal.Payments.DataObjects.ExtendData"/>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.RequestString">
            <summary>
            Gets Request
            </summary>
            <remarks>This is the request string as sent to the
            PayPal payment gateway.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.RequestId">
            <summary>
            Gets RequestId
            </summary>
            <remarks>This is the request id set 
            for the transaction as sent to the PayPal payment
            gateway.
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Response.ResponseString">
            <summary>
            Gets Response
            </summary>
            <remarks>This is the response string as obtained from the
            PayPal payment gateway.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.#ctor">
            <summary>
            Constructor for Response
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.#ctor(System.String,PayPal.Payments.Common.Context)">
            <summary>
            Constructor for Response
            </summary>
            <param name="RequestId">Request Id</param>
            <param name="TrxContext">Transaction Context object</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetParams(System.String)">
            <summary>
            Sets the response params
            </summary>
            <param name="Response">Response string</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets the transaction result params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetFraudResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets fraud result params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetRecurringResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets recurring result params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetExpressCheckoutGETResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets the ExpressCheckout response for GET params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetExpressCheckoutDOResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets the ExpressCheckout response for DO params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetExpressCheckoutSETResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets the ExpressCheckout response for SET params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetExpressCheckoutUPDATEResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets the ExpressCheckout response for UPDATE params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetBuyerAuthResultParams(System.Collections.Hashtable@)">
             <summary>
             Sets buyer auth results params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.ParseResponse(System.String)">
            <summary>
            Parses response
            </summary>
            <param name="Response">Response string</param>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Response.SetExtDataList">
            <summary>
            Populates extended response
            array list
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.Rule">
            <summary>
            Used for fraud rule information
            </summary>
            <remarks>These are the fraud rules applied for the transaction.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mNum">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mRuleId">
            <summary>
            Rule id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mRuleAlias">
            <summary>
            rule alias
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mRuleDescription">
            <summary>
            Rule description
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mAction">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mTriggeredMessage">
            <summary>
            triggered message
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.Rule.mRuleVendorParms">
            <summary>
            Rule Vendor params
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.Num">
            <summary>
            Gets, Sets Num
            </summary>
            <remarks>This is the fraud rule number.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.RuleId">
            <summary>
            Gets, Sets RuleId
            </summary>
            <remarks>This is the fraud rule id.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.RuleAlias">
            <summary>
            Gets, Sets RuleAlias
            </summary>
            <remarks>This is the fraud rule alias.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.RuleDescription">
            <summary>
            Gets, Sets RuleDescription
            </summary>
            <remarks>This is the fraud rule description.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.Action">
            <summary>
            Gets, Sets Action
            </summary>
            <remarks>This is the fraud rule action.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.TriggeredMessage">
            <summary>
            Gets, Sets TriggeredMessage
            </summary>
            <remarks>This is the fraud rule triggered message.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.Rule.RuleVendorParms">
            <summary>
            Gets, Sets RuleVendorParms
            </summary>
            <remarks>This is the fraud rule vendor params arraylist
             containing objects of RuleParameter.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.Rule.#ctor">
            <summary>
            Constructor for Rule
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.RuleParameter">
            <summary>
            Used for fraud rule parameter
            </summary>
            <remarks>Rule parameter are the parameters of each fraud rule.</remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RuleParameter.mNum">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RuleParameter.mName">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RuleParameter.mValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.RuleParameter.mType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RuleParameter.Num">
            <summary>
            Gets Num
            </summary>
            <remarks>This is the fraud rule parameter number.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RuleParameter.Name">
            <summary>
            Gets Name
            </summary>
            <remarks>This is the fraud rule parameter name.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RuleParameter.Value">
            <summary>
            Gets Value
            </summary>
            <remarks>This is the fraud rule parameter value.</remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.RuleParameter.Type">
            <summary>
            Gets Type
            </summary>
            <remarks>This is the fraud rule parameter type.</remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.RuleParameter.#ctor">
            <summary>
            Constructor for RuleParameter
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.ShipTo">
            <summary>
            Used for shipping address information
            </summary>
            <remarks>Shipping address is destination address information.</remarks>
            <example>
            <para>Following example shows how to use ShipTo.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
            //Set the Shipping Address details.
            ShipTo Ship = new ShipTo();
            Ship.ShipToStreet = "685A E. Middlefield Rd.";
            Ship.ShipToStree2 = "Apt. #2";
            Ship.ShipToZip = "94043";
            Inv.ShipTo = Ship;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
            'Set the Shipping Address details.
            Dim Ship As ShipTo = New ShipTo
            Ship.ShipToStreet = "685A E. Middlefield Rd."
            Ship.ShipToStree2 = "Apt. #2";
            Ship.ShipToZip = "94043"
            Inv.ShipTo = Ship
            .................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ShipTo.mShipMethod">
            <summary>
            Shipping method.
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ShipTo.mShipCarrier">
            <summary>
            Shipping carrier
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.ShipTo.mShipFromZip">
            <summary>
            Ship from zip
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToCity">
            <summary>
            Gets, Sets shipping city 
            </summary>
            <remarks>
            Shipping city
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCITY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToCountry">
            <summary>
            Gets, Sets shipping country
            </summary>
            <remarks>
            Shipping country
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOCOUNTRY</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToEmail">
            <summary>
            Gets, Sets shipping email
            </summary>
            <remarks>
            Shipping email
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOEMAIL</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToFirstName">
            <summary>
            Gets, Sets shipping first name
            </summary>
            <remarks>
            Shipping first name
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOFIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToLastName">
            <summary>
            Gets, Sets shipping last name
            </summary>
            <remarks>
            Shipping last name
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOLASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToMiddleName">
            <summary>
            Gets, Sets shipping middle name
            </summary>
            <remarks>
            Shipping middle name
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOMIDDLENAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToPhone2">
            <summary>
            Gets, Sets shipping phone2
            </summary>
            <remarks>
            Shipping phone 2
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOPHONE2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToPhone">
            <summary>
            Gets, Sets shipping phone
            </summary>
            <remarks>
            Shipping phone
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOPHONE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToState">
            <summary>
            Gets, Sets shipping state
            </summary>
            <remarks>
            Shipping state
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToStreet">
            <summary>
            Gets, Sets shipping street
            </summary>
            <remarks>
            Shipping street
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTREET</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToStreet2">
            <summary>
            Gets, Sets shipping street2
            </summary>
            <remarks>
            Shipping street 2.
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOSTREET2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipToZip">
            <summary>
            Gets, Sets shipping zip
            </summary>
            <remarks>
            Ship to postal code (called ZIP code in the USA).
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPTOZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipMethod">
            <summary>
            Gets, Sets shipping method
            </summary>
            <remarks>
            Shipping method
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPMETHOD</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipCarrier">
            <summary>
            Gets, Sets shipping carrier
            </summary>
            <remarks>
            Shipping carrier
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPCARRIER</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.ShipTo.ShipFromZip">
            <summary>
            Gets, Sets ship from zip
            </summary>
            <remarks>
            Ship from postal code (called ZIP code in the USA).
            <para>Maps to Payflow Parameter:</para>
            <code>SHIPFROMZIP</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ShipTo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Shipping address is destination address information.</remarks>
            <example>
            <para>Following example shows how to use ShipTo.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
            //Set the Shipping Address details.
            ShipTo Ship = new ShipTo();
            Ship.ShipToStreet = "685A E. Middlefield Rd.";
            Ship.ShipToStree2 = "Apt. #2";
            Ship.ShipToZip = "94043";
            Inv.ShipTo = Ship;
            .................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
            'Set the Shipping Address details.
            Dim Ship As ShipTo = New ShipTo
            Ship.ShipToStreet = "685A E. Middlefield Rd."
            Ship.ShipToStree2 = "Apt. #2";
            Ship.ShipToZip = "94043"
            Inv.ShipTo = Ship
            .................
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ShipTo.Copy">
            <summary>
            This method copies the common contents
            from shipping to billing address.
            </summary>
            <returns>Billing Address object</returns>
            <remarks>This method can be used to 
            populate the shipping addresses directly 
            from the billing addresses when 
            both are the same.</remarks>
            <example>
            <code lang="C#" escaped="false">
            
            	................
            	//Ship is the object of
            	//ShipTo populated with 
            	//the shipping addresses.
            	................
            	
            	
            	BillTo Bill;
            	
            	//Populate billing addresses
            	//from shipping addresses.
            	Bill = Ship.Copy();
            	
            	................
            
            </code>
            <code lang="Visual Basic" escaped="false">
            
            	................
            	'Ship is the object of
            	'ShipTo populated with 
            	'the shipping addresses.
            	................
            	
            	
            	BillTo Bill;
            	
            	'Populate billing addresses
            	'from shipping addresses.
            	Bill = Ship.Copy()
            	
            	................
            
            </code>
            </example>
            <seealso cref="T:PayPal.Payments.DataObjects.BillTo"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.ShipTo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.SwipeCard">
            <summary>
            Used for swipe card information
            </summary>
            <remarks>
            Used to pass the Track 1 or Track 2 data (the card’s
            magnetic stripe information) for card-present
            transactions. Include either Track 1 or Track 2
            data—not both. If Track 1 is physically damaged, the
            POS application can send Track 2 data instead.
            <para>SwipeCard is associated with CardTender.</para>
            <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.SwipeCard.#ctor(System.String)">
            <summary>
            Constructor for SwipeCard
            </summary>
            <param name="Swipe">Card Swipe value</param>
            <remarks>This is used as Payment Device for the CardTender.
            <para>Maps to Payflow Parameter:</para>
            <code>Swipe --> SWIPE</code>
            </remarks>
            <example>
             <code lang="C#" escaped="false">
            	.............
            	
            	SwipeCard PayDevice = new SwipeCard("XXXXXXXXXXXXXXXXXXXXXXXXXXX");
            	
            	..............
             </code>
             <code lang="C#" escaped="false">
            	.............
            	
            	Dim PayDevice As SwipeCard = New SwipeCard("XXXXXXXXXXXXXXXXXXXXXXXXXXX")
            	
            	..............
             </code>
             </example>
             <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
        </member>
        <member name="M:PayPal.Payments.DataObjects.SwipeCard.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.TransactionResponse">
             <summary>
             Used for transaction response.
             </summary>
             <remarks>
             TransactionResponse object is contained in the main response 
             object Response of the transaction.	
             </remarks>
             <example>
             Following is the example of how to get the transaction response
             after the transaction.
             <code lang="C#" escaped="false">
              ...................
              //Trans is the transaction object.
              ...................
             
             // Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            			
            	if (Resp != null)
             {
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            		}
            	}
            	 ................
             </code>
             <code lang="Visual Basic" escaped="false">
            	.........................
            	' Trans is the transaction object.
            	.........................
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            	
            	If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	
            		If Not TrxnResponse Is Nothing Then
            			Console.WriteLine("RESULT = " + TrxnResponse.Result)
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            		End If
            	End If
            
            	.........................
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mResult">
            <summary>
            Result
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPnref">
            <summary>
            Pnref
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mRespMsg">
            <summary>
            Resp msg
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAuthCode">
            <summary>
            Authcode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAvsAddr">
            <summary>
            Avs Addr
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAvsZip">
            <summary>
            Avs zip
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCardSecure">
            <summary>
            Card Secure
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCVV2Match">
            <summary>
            Cvv2 match
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mIavs">
            <summary>
            Iavs
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mOrigResult">
            <summary>
            Inquiry OrigResult
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mOrigPnref">
            <summary>
            Inquiry OrigPnref
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mTransState">
            <summary>
            Inquiry Trans state
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCustRef">
            <summary>
            Inquiry cust ref
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mStartTime">
            <summary>
            Inquiry start time
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mEndTime">
            <summary>
            Inquiry end time
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mDuplicate">
            <summary>
            Duplicate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mDateToSettle">
            <summary>
            Inquiry Date to settle
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mBatchId">
            <summary>
            Inquiry Batch Id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAddlMsgs">
            <summary>
            Holds AddlMsgs
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mRespText">
            <summary>
            Holds RespText
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mProcAvs">
            <summary>
            Holds ProcAvs
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mProcCardSecure">
            <summary>
            Holds ProcCardSecure
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mProcCVV2">
            <summary>
            Holds ProcCvv2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mHostCode">
            <summary>
            Holds HostCode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mSettleDate">
            <summary>
            Inquiry SettleDate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPPRef">
            <summary>
            PPref
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCorrelationId">
            <summary>
            Holds the CorrelationId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mFeeAmt">
            <summary>
            Holds FeeAmt
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPendingReason">
            <summary>
            Pending reason
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPaymentType">
            <summary>
            Payment Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mStatus">
            <summary>
            Inquiry Status
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mBalAmt">
            <summary>
            BalAmt
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAmexID">
            <summary>
            AmexID
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAmexPosData">
            <summary>
            AmexPosData
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mTransTime">
            <summary>
            TransTime
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCardType">
            <summary>
            CardType
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mOrigAmt">
            <summary>
            OrigAmt
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAcct">
            <summary>
            Acct
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mLastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mFirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAmt">
            <summary>
            Amt
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mEmailMatch">
            <summary>
            EmailMatch
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPhoneMatch">
            <summary>
            PhoneMatch
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mExpDate">
            <summary>
            ExpDate
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mExtRspMsg">
            <summary>
            ExtRspMsg
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mSecureToken">
            <summary>
            SecureToken
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mSecureTokenId">
            <summary>
            SecureTokenId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mMagTResponse">
            <summary>
            MagTResponse
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mTraceId">
            <summary>
            TraceId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAchStatus">
            <summary>
            AchStatus
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mTxId">
            <summary>
            TxId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mPaymentAdviceCode">
            <summary>
            PaymentAdviceCode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAssociationResponseCode">
            <summary>
            AssociationResponseCode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mType">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAffluent">
            <summary>
            Affluent
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCUpdated">
            <summary>
            CCUpdated
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mRrn">
            <summary>
            Rrn
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mStan">
            <summary>
            Stan
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAci">
            <summary>
            Aci
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mValidationCode">
            <summary>
            ValidationCode
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCTransId">
            <summary>
            CCTransId
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCTrans_POSData">
            <summary>
            CCTrans_POSData
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mParId">
            <summary>
            ParId
            </summary>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Result">
            <summary>
            Gets Result
            </summary>
            <remarks>
            The outcome of the attempted transaction. A
            result of 0 (zero) indicates the transaction was
            approved. Any other number indicates a
            decline or error.
            <para>Maps to Payflow Parameter:</para>
            <code>RESULT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Pnref">
            <summary>
            Gets Pnref
            </summary>
            <remarks>
            PayPal Reference ID, a unique number that
            identifies the transaction.
            <para>Maps to Payflow Parameter:</para>
            <code>PNREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.RespMsg">
            <summary>
            Gets RespMsg
            </summary>
            <remarks>
            <para>
            The response message returned with the
            transaction result. Exact wording varies.
            Sometimes a colon appears after the initial
            RESPMSG followed by more detailed
            information.
            </para>
            <code>APPROVED</code>
            <para>Maps to Payflow Parameter:</para>
            <code>RESPMSG</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AuthCode">
            <summary>
            Gets AuthCode
            </summary>
            <remarks>
            Returned for Sale, Authorization, and Voice
            Authorization transactions. AUTHCODE is the
            approval code obtained over the phone from
            the processing network.
            <para>Maps to Payflow Parameter:</para>
            <code>AUTHCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AVSAddr">
            <summary>
            Gets AVSAddr
            </summary>
            <remarks>
            AVS address responses are for advice only.
            This process does not affect the outcome of the
            authorization.
            <para>Maps to Payflow Parameter:</para>
            <code>AVSADDR</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AVSZip">
            <summary>
            Gets AVSZip
            </summary>
            <remarks>
            AVS ZIP code responses are for advice only.
            This process does not affect the outcome of the
            authorization.
            <para>Maps to Payflow Parameter:</para>
            <code>AVSZIP</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CardSecure">
            <summary>
            Gets CardSecure
            </summary>
            <remarks>
            Obtained for Visa cards.
            CAVV validity.
            Y=valid, N=Not valid, X=cannot determine
            <para>Maps to Payflow Parameter:</para>
            <code>CARDSECURE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CVV2Match">
            <summary>
            Gets CVV2Match
            </summary>
            <remarks>
            Result of the card security code (CVV2) check.
            This value does not affect the outcome of the
            transaction.
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Y</term>
            <description>The submitted value matches the data on file for the card.</description>
            </item>
            <item>
            <term>N</term>
            <description>The submitted value does not match the data on file for the card.</description>
            </item>
            <item>
            <term>X</term>
            <description>The cardholder’s bank does not support this service.</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>CVV2MATCH</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.EmailMatch">
            <summary>
            Gets EMailMatch
            </summary>
            <remarks>
            Result of the e-mail check.
            This value does not affect the outcome of the
            transaction.
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Y</term>
            <description>The submitted value matches the data on file for the card holder.</description>
            </item>
            <item>
            <term>N</term>
            <description>The submitted value does not match the data on file for the card holder.</description>
            </item>
            <item>
            <term>X</term>
            <description>The cardholder’s bank does not support this service.</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>EMAILMATCH</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.PhoneMatch">
            <summary>
            Gets PhoneMatch
            </summary>
            <remarks>
            Result of the phone check.
            This value does not affect the outcome of the
            transaction.
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Y</term>
            <description>The submitted value matches the data on file for the card holder.</description>
            </item>
            <item>
            <term>N</term>
            <description>The submitted value does not match the data on file for the card holder.</description>
            </item>
            <item>
            <term>X</term>
            <description>The cardholder’s bank does not support this service.</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter:</para>
            <code>PHONEMATCH</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.IAVS">
            <summary>
            Gets IAVS
            </summary>
            <remarks>
            International AVS address responses are for
            advice only. This value does not affect the
            outcome of the transaction.
            Indicates whether AVS response is
            international (Y), US (N), or cannot be
            determined (X).
            <para>Maps to Payflow Parameter:</para>
            <code>IAVS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.OrigResult">
            <summary>
            Gets inquiry OrigResult
            </summary>
            <remarks>
            Gets the Original transaction result for which
            inquiry transaction is performed.
            <para>Maps to Payflow Parameter:</para>
            <code>ORIGRESULT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.OrigPnref">
            <summary>
            Gets inquiry OrigPnref
            </summary>
            <remarks>
            Gets the Original PNREF for which
            inquiry transaction is performed.
            <para>Maps to Payflow Parameter:</para>
            <code>ORIGPNREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.TransState">
            <summary>
            Gets inquiry TransState
            </summary>
            <remarks>
            Gets the Transaction state of the transaction for 
            which inquiry transaction is performed.
            <para>Maps to Payflow Parameter:</para>
            <code>TRANSSTATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CustRef">
            <summary>
            Gets inquiry Custref
            </summary>
            <remarks>
            Merchant-defined identifier for reporting and
            auditing purposes. For example, you can set
            CUSTREF to the invoice number.
            You can use CUSTREF when performing Inquiry
            transactions. To ensure that you can always
             access the correct transaction when performing
             an Inquiry, you must provide a unique CUSTREF																																						   when submitting any transaction, including retries.
            <para>Maps to Payflow Parameter:</para>
            <code>CUSTREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.StartTime">
            <summary>
            Gets inquiry StartTime
            </summary>
            <remarks>
            Gets the Start time of the transaction for 
            which inquiry transaction is performed.
            <para>Maps to Payflow Parameter:</para>
            <code>STARTTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.EndTime">
            <summary>
            Gets inquiry EndTime
            </summary>
            <remarks>
            Gets the End time of the transaction for 
            which inquiry transaction is performed.
            <para>Maps to Payflow Parameter:</para>
            <code>ENDTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Duplicate">
            <summary>
            Gets Duplicate
            </summary>
            <remarks>
            Indicates transactions sent with duplicate identifier.
            If a transaction is performed with the request id that has
            been previously used for another transaction, Duplicate is 
            returned as 1.
            <para>Maps to Payflow Parameter:</para>
            <code>DUPLICATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.DateToSettle">
            <summary>
            Gets inquiry DateToSettle
            </summary>
            <remarks>
            Gets the settle date of the transaction for which 
            inquiry transaction is performed.
            Value available only before settlement has started
            Value obtained when Payflow Verbosity paramter = MEDIUM 
            <para>Maps to Payflow Parameter:</para>
            <code>DATE_TO_SETTLE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.BatchId">
            <summary>
            Gets inquiry BatchId
            </summary>
            <remarks>
            Gets the batch id of the transaction for which the
            inquiry transaction is performed.
            Value available only after settlement has assigned a BatchId 
            Value obtained when Payflow Verbosity paramter = MEDIUM 
            <para>Maps to Payflow Parameter:</para>
            <code>BATCHID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AddlMsgs">
            <summary>
            Gets, Sets  AddlMsgs
            </summary>
            <remarks>
            Additional error message that indicates that the
            merchant used a feature that is disabled.
            Value obtained when Payflow Verbosity paramter = MEDIUM 
            <para>Maps to Payflow Parameter:</para>
            <code>ADDLMSGS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.HostCode">
            <summary>
            Gets, Sets  HostCode
            </summary>
            <remarks>
            Response code returned by the processor. This
            value is not normalized by PayPal.
            <para>Maps to Payflow Parameter:</para>
            <code>HOSTCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ProcAVS">
            <summary>
            Gets, Sets  ProcAVS
            </summary>
            <remarks>
            AVS (Address Verification Service) response
            from the processor.
            Value obtained when Payflow Verbosity paramter = MEDIUM 
            <para>Maps to Payflow Parameter:</para>
            <code>PROCAVS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ProcCardSecure">
            <summary>
            Gets, Sets  ProcCardSecure
            </summary>
            <remarks>
            VPAS/SPA response from the processor.
            Value obtained when Payflow Verbosity paramter = MEDIUM 
            <para>Maps to Payflow Parameter:</para>
            <code>PROCCARDSECURE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ProcCVV2">
            <summary>
            Gets, Sets  ProcCVV2
            </summary>
            <remarks>
            CVV2 (buyer authentication) response from the processor.
            Its a 3- or 4-digit code that is printed (not imprinted) on
            the back of a credit card. Used as partial assurance
            that the card is in the buyer’s possession.
            Value obtained when Payflow Verbosity paramter = MEDIUM
            <para>Maps to Payflow Parameter:</para>
            <code>PROCCVV2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.RespText">
            <summary>
            Gets, Sets  RespText
            </summary>
            <remarks>
            Text corresponding to the response code
            returned by the processor. This text is not
            normalized by Gateway server.
            <para>Maps to Payflow Parameter:</para>
            <code>RESPTEXT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.SettleDate">
            <summary>
            Gets inquiry SettleDate
            </summary>
            <remarks>
            Date when the settlement is completed
            Value obtained when Payflow Verbosity paramter = MEDIUM
            <para>Maps to Payflow Parameter:</para>
            <code>SETTLE_DATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.PPref">
            <summary>
            Gets the PPref parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PPREF</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CorrelationId">
            <summary>
            Gets the CorrelationId parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CORRELATIONID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.FeeAmt">
            <summary>
            Gets the feeamt parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>FEEAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.PendingReason">
            <summary>
            Gets the PendingReason parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PENDINGREASON</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.PaymentType">
            <summary>
            Gets the PaymentType parameter
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Status">
            <summary>
            Gets inquiry Status
            </summary>
            <remarks>
            Status of transaction
            Value obtained when Payflow Verbosity parameter = MEDIUM
            <para>Maps to Payflow Parameter:</para>
            <code>STATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.BalAmt">
            <summary>
            Gets the BalAmt parameter
            </summary>
            <remarks>
            American Express CAPN transactions only:
            Balance on a pre-paid store value card. The value includes a decimal and
            the exact amount to the cent (42.00, not 42).
            <para>Maps to Payflow Parameter:</para>
            <code>BALAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AmexID">
            <summary>
            Gets the AmexID parameter
            </summary>
            <remarks>
            American Express CAPN transactions only:
            Unique transaction ID returned when VERBOSITY = MEDIUM.
            Used to track American Express CAPN transactions.
            <para>Maps to Payflow Parameter:</para>
            <code>AMEXID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AmexPosData">
            <summary>
            Gets the AmexPosData parameter
            </summary>
            <remarks>
            American Express CAPN transactions only:
            Unique field returned when VERBOSITY = MEDIUM.
            Used by merchants who authorize transactions through
            the payflow gateway but settle through a third-party solution.
            <para>Maps to Payflow Parameter:</para>
            <code>AMEXPOSDATA</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.TransTime">
            <summary>
            Gets the TransTime parameter
            </summary>
            <remarks>
            Returns the transaction time in the format of:
            
            <para>Maps to Payflow Parameter:</para>
            <code>TRANSTIME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CardType">
            <summary>
            Gets the CardType parameter
            </summary>
            <remarks>
            Returns a value which represents the card type used.
            
            <para>Maps to Payflow Parameter:</para>
            <code>CARDTYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.OrigAmt">
            <summary>
            Gets the OrigAmt parameter
            </summary>
            <remarks>
            Returns the original amount sent for processing.  Used
            with PARTIALAUTH parameter.
            
            <para>Maps to Payflow Parameter:</para>
            <code>ORIGAMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Acct">
            <summary>
            Gets the Acct parameter
            </summary>
            <remarks>
            Returns the last 4-digits of the credit card number used.
            
            <para>Maps to Payflow Parameter:</para>
            <code>ACCT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.LastName">
            <summary>
            Gets the LastName parameter
            </summary>
            <remarks>
            Returns the last name.
            
            <para>Maps to Payflow Parameter:</para>
            <code>LASTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.FirstName">
            <summary>
            Gets the FirstName parameter
            </summary>
            <remarks>
            Returns the first name.
            
            <para>Maps to Payflow Parameter:</para>
            <code>FIRSTNAME</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Amt">
            <summary>
            Gets the amt parameter
            </summary>
            <remarks>
            Returns the amount of the transaction that was
            authorized.
            
            <para>Maps to Payflow Parameter:</para>
            <code>AMT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ExpDate">
            <summary>
            Gets the ExpDate parameter
            </summary>
            <remarks>
            Returns the expiration date of the credit card used.
            
            <para>Maps to Payflow Parameter:</para>
            <code>EXPDATE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ExtRspMsg">
            <summary>
            Gets the ExtRspMsg parameter
            </summary>
            <remarks>
            Returns additional (extra) response messages from processor.
            Not supported by all processors.
            
            <para>Maps to Payflow Parameter:</para>
            <code>EXTRSPMSG</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.SecureToken">
            <summary>
            Gets the SecureToken parameter
            </summary>
            <remarks>
            Returns the secure token that was sent in the original transaction.
            Used with secure token id to call the hosted payment pages.
            
            <para>Maps to Payflow Parameter:</para>
            <code>SECURETOKEN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.SecureTokenId">
            <summary>
            Gets the SecureTokenId parameter
            </summary>
            <remarks>
            Returns the secure token id that was sent in the original transaction.
            Used with secure token to call the hosted payment pages.
            
            <para>Maps to Payflow Parameter:</para>
            <code>SECURETOKENID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.MagTResponse">
            <summary>
            Gets the MagTResponse parameter
            </summary>
            <remarks>
            This only appears in the response if a data validation error occurs or 
            if the MagTek service throws an error.
            
            <para>Maps to Payflow Parameter:</para>
            <code>MAGTRESPONSE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.TraceId">
            <summary>
            Gets the Trace Id parameter
            </summary>
            <remarks>
            Returns the Trace Id returned by TeleCheck.
            
            <para>Maps to Payflow Parameter:</para>
            <code>TRACEID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AchStatus">
            <summary>
            Gets the AchStatus parameter
            </summary>
            <remarks>
            Returns the ACH Status returned by TeleCheck.
            
            <para>Maps to Payflow Parameter:</para>
            <code>ACHSTATUS</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.TxId">
            <summary>
            Gets the TXId parameter
            </summary>
            <remarks>
            Returns the Transaction Id for Card on File
            
            <para>Maps to Payflow Parameter:</para>
            <code>TXID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.PaymentAdviceCode">
            <summary>
            Gets the Payment Advice Code
            </summary>
            <remarks>
            Returns the Payment Advice Code for supported processors.
            
            <para>Maps to Payflow Parameter:</para>
            <code>PAYMENTADVICECODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.AssociationResponseCode">
            <summary>
            Gets the Association Response Code parameter
            </summary>
            <remarks>
            Returns the Association Response Code for supported processors.
            
            <para>Maps to Payflow Parameter:</para>
            <code>ASSOCIATIONRESPONSECODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Type">
            <summary>
            Gets the Type parameter
            </summary>
            <remarks>
            Returns the yype of account used in the transaction. 
            
            <para>Maps to Payflow Parameter:</para>
            <code>TYPE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Affluent">
            <summary>
            Gets the Affluent parameter
            </summary>
            <remarks>
            Returns the status (affluent) of the card holder.
            
            <para>Maps to Payflow Parameter:</para>
            <code>AFFLUENT</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CCUpdated">
            <summary>
            Gets the CC Updated parameter
            </summary>
            <remarks>
            Returns the status if the card was updated.
            
            <para>Maps to Payflow Parameter:</para>
            <code>CCUPDATED</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Rrn">
            <summary>
            Gets the Retrieve Reference transaction.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>RRN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Stan">
            <summary>
            Gets the System Trace Audit number.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>STAN</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Aci">
            <summary>
            Gets the Authorization Characteristics Indicator.
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>Aci</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ValidationCode">
            <summary>
            Gets the Transaction Identifier.
            </summary>
            The transaction identifier associated with the transaction being settled.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>VALIDATIONCODE</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CCTransId">
            <summary>
            Gets the Credit Card Transaction Id.
            </summary>
            Unique transaction ID returned by some processors for all credit card transactions.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CCTRANSID</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CCTrans_POSData">
            <summary>
            Gets the Credit Card Transaction POS Data
            </summary>
            Value returned by some processors for all credit card transactions.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>CCTRAN_POSDATA</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ParId">
            <summary>
            Gets the Payment Account Reference
            </summary>
            Value returned by some processors that is a non-financial reference number assigned to each unique 
            Primary Account Number (PAN) and mapped to all its affiliated Payment Tokens.
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>PARID</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.TransactionResponse.#ctor">
            <summary>
            Constructor for Transaction response.
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.TransactionResponse.SetParams(System.Collections.Hashtable@)">
             <summary>
             Sets response params
             </summary>
            <param name="ResponseHashTable">Response Hash table by ref</param>
        </member>
        <member name="T:PayPal.Payments.DataObjects.UserInfo">
            <summary>
            Used for PayPal User account information
            </summary>
            <remarks>
            <para>This is a required class for a strong assembly 
            transactions. This class is used to store the 
            user credential needed to authenticate the user 
            performing the transaction.</para>
            <para>Every transaction takes UserInfo
            mandatorily.</para>
            <para>Following are the required user credentials:</para>
            <list type="table">
            <listheader>
            <term>Payflow Parameter</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>USER</term>
            <description>Login name. This value is case-sensitive. 
            The login name created while registering for the Payflow
            account.</description>
            </item>
            <item>
            <term>VENDOR</term>
            <description>Login name. This value is case-sensitive. 
            The login name created while registering for the Payflow
            account.</description>
            </item>
            <item>
            <term>PARTNER</term>
            <description>The authorized PayPal Reseller that 
            registered this account for the Payflow service 
            provided you with a Partner ID.
            If you registered yourself, use PayPal.
            Case-sensitive.</description>
            </item>
            <item>
            <term>PWD</term>
            <description>Case-sensitive 7 to 32-character password.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserInfo.mUser">
            <summary>
            User id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserInfo.mVendor">
            <summary>
            Vendor id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserInfo.mPartner">
            <summary>
            Partner id
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserInfo.mPwd">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.UserInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="User">User id</param>
            <param name="Vendor">Vendor id</param>
            <param name="Partner">Partner id</param>
            <param name="Pwd">Password</param>
            <remarks>
            <para>This is a required class for a strong assembly 
            transactions. This class is used to store the 
            user credential needed to authenticate the user 
            performing the transaction.</para>
            <para>Every transaction takes UserInfo
            mandatorily.</para>
            <para>Following are the required user credentials:</para>
            <list type="table">
            <listheader>
            <term>Payflow Parameter</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>USER</term>
            <description>Login name. This value is case-sensitive. 
            The login name created while registering for the Payflow
            account.</description>
            </item>
            <item>
            <term>VENDOR</term>
            <description>Login name. This value is case-sensitive. 
            The login name created while registering for the Payflow
            account.</description>
            </item>
            <item>
            <term>PARTNER</term>
            <description>The authorized PayPal Reseller that 
            registered this account for the Payflow service 
            provided you with a Partner ID.
            If you registered yourself, use PayPal.
            Case-sensitive.</description>
            </item>
            <item>
            <term>PWD</term>
            <description>Case-sensitive 6- to 32-character password.</description>
            </item>
            </list>
            </remarks>
            <example>
            <code lang="C#" escaped="false">
             ..............
             // Create the User data object with the required user details.
             UserInfo User = new UserInfo("user", "vendor", "partner", "password");
             ..............
            </code>
            <code lang="Visual Basic" escaped="false">
             ..............
             ' Create the User data object with the required user details.
             Dim User As UserInfo = New UserInfo("user", "vendor", "partner", "password");
             ..............
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.DataObjects.UserInfo.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.DataObjects.UserItem">
            <summary>
            This class holds the User1 to User10 related information.
            </summary>
            <remarks>
            <para>You are able to send up to 10 string type parameters that you can use to store temporary data (for example, variables, 
            session IDs, order numbers, and so on). These parameters enable you to echo back the data to your server either 
            via the Payflow API or as part of the Return or Silent Post if using the hosted checkout page.
            
            Note: UserItem1 through UserItem10 are not displayed to the customer and are not stored in 
            the PayPal transaction database.</para>
            </remarks>
            <example>
            <para>Following example shows how to use user item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a user item.
             UserItem nUser = new UserItem();
             
             //Add information to user item.
             nUser.UserItem1 = "tUSER1";
             nUser.UserItem2 = "TUSER2";
             
             //Add line item to invoice.
             Inv.UserItem = nUser;
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a user item.
             Dim nUser As New UserItem
             
             'Add info to line item.
             nUser.UserItem1 = "TUSER1"
             nUser.UserItem2 = "TUSER2"
             	 
             'Add line item to invoice.
             Inv.UserItem = nUser
             
             ..................
            </code>
            </example>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem1">
            <summary>
            User item 1
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem2">
            <summary>
            User item 2
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem3">
            <summary>
            User item 3
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem4">
            <summary>
            User item 4
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem5">
            <summary>
            User item 5
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem6">
            <summary>
            User item 6
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem7">
            <summary>
            User item 7
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem8">
            <summary>
            User item 8
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem9">
            <summary>
            User item 9
            </summary>
        </member>
        <member name="F:PayPal.Payments.DataObjects.UserItem.mUserItem10">
            <summary>
            User item 10
            </summary>
        </member>
        <member name="M:PayPal.Payments.DataObjects.UserItem.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para>You are able to send up to 10 string type parameters that you can use to store temporary data (for example, variables, 
            session IDs, order numbers, and so on). These parameters enable you to echo back the data to your server either 
            via the Payflow API or as part of the Return or Silent Post if using the hosted checkout page.
            
            Note: UserItem1 through UserItem10 are not displayed to the customer and are not stored in 
            the PayPal transaction database.</para>
            </remarks>
            <example>
            <para>Following example shows how to use user item.</para>
            <code lang="C#" escaped="false">
             .................
             //Inv is the Invoice object.
             .................
             
             //Create a user item.
             UserItem nUser = new UserItem();
             
             //Add information to user item.
             nUser.UserItem1 = "tUSER1";
             nUser.UserItem2 = "TUSER2";
             
             //Add line item to invoice.
             Inv.UserItem = nUser;
             
             ..................
            </code>
            <code lang="Visual Basic" escaped="false">
             .................
             'Inv is the Invoice object.
             .................
             
             //Create a user item.
             Dim nUser As New UserItem
             
             'Add info to line item.
             nUser.UserItem1 = "TUSER1"
             nUser.UserItem2 = "TUSER2"
             	 
             'Add line item to invoice.
             Inv.UserItem = nUser
             
             ..................
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem1">
            <summary>
            Gets, Sets user item.
            </summary>
            <remarks>
            <para> 
            These ten string type parameters are intended to store temporary data (for example, variables, 
            session IDs, order numbers, and so on). These parameters enable you to return the values 
            to your server by using the Post or Silent Post feature.
            
            Note: UserItem1 through UserItem10 are not displayed to the customer and are not stored in 
            the PayPal transaction database.
            </para>
            <para>Maps to Payflow Parameter:</para>
            <code>USER1</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem2">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER2</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem3">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER3</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem4">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER4</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem5">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER5</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem6">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER6</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem7">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER7</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem8">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER8</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem9">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USER9</code>
            </remarks>
        </member>
        <member name="P:PayPal.Payments.DataObjects.UserItem.UserItem10">
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>USERn</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.DataObjects.UserItem.GenerateRequest">
            <summary>
            Generates user item request
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.AuthorizationTransaction">
             <summary>
             This class is used to create and perform an 
             Authorization Transaction.
             </summary>
             <remarks>A successful authorization needs to be captured using a capture transaction.</remarks>
             <example>This example shows how to create and perform a authorization transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.Transactions.AuthorizationTransaction.mOrigId">
            <summary>
            Original transaction id.
            The ORIGID is the PNREF no. from a previous transaction.
            OrigId is used to create a new Authorization transaction using the details of a previous
            transaction.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.AuthorizationTransaction.mPartialAuth">
            <summary>
            Partial authorization request.
            Notifies processor that partial authorizations are supported.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.AuthorizationTransaction.mCreateSecureToken">
            <summary>
            Secure token request.
            Used to store sensitive data prior to making a call to the hosted page.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.AuthorizationTransaction.mSecureTokenId">
            <summary>
            Secure token id.
            Id used to generate a secure token.  Must be sent with the token when calling the hosted pages.
            This can be any random GUID but must be unique.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.AuthorizationTransaction.OrigId">
             <summary>
             Gets, Sets OrigId. This property is used to perform a reference Authorization Transaction.
             </summary>
             <remarks>A reference Authorization transaction is an authorization transaction which copies the transaction data,
              except the Account Number, Expiration Date and Swipe data from a previous trasnaction.
              PNRef of this previous trasnaction needs to be set in this OrigId property.</remarks>
             <remarks>A successful authorization needs to be captured using a capture transaction.</remarks>
             <example>This example shows how to create and perform a reference authorization transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		// Set the OrigId to refer to 
            		// a previous trasncation.
            		Trans.OrigId = "V64A0A07BD24";
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId)
            		' Set the OrigId to refer to 
            		' a previous trasncation.
            		Trans.OrigId = "V64A0A07BD24"
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.AuthorizationTransaction.PartialAuth">
             <summary>
             Gets, Sets PartialAuth. This property is used to notify banks that a partial authorization can be performed for a pre-paid debit/gift card.
             </summary>
             <remarks>Partial Approval is supported for Visa, MasterCard, American Express and Discover (JCB (US Domestic only), 
             and Diners) Prepaid card products such as gift, Flexible Spending Account (FSA) or Healthcare Reimbursement Account 
             (HRA) cards. In addition Discover (JCB (US Domestic only), and Diners) supports partial Approval on their consumer 
             credit card. It is often difficult for the consumer to spend the exact amount available on the prepaid account, as 
             the purchase can be for amounts greater than the value available. This can result in unnecessary declines. Visa, 
             MasterCard, American Express and Discover (JCB (US Domestic only), and Diners) recognize that the prepaid products 
             represent unique opportunities for both merchants and consumers. With Partial Approval issuers may approve a portion 
             of the amount requested. This will enable the residual transaction amount to be paid by other means. The introduction 
             of the partial approval capability will reduce decline frequency and enhance the consumer and merchant experience at 
             the point of sale. Merchants will now have the ability to accept partial approval rather than having the sale declined. </remarks>
             <example>This example shows how to submit the Partial Authorization flag.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		// Set the flag to allow partial authorizations.
            		Trans.PartialAuth = "Y";
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId)
            		'Set the flag to allow partial authorizations.
            		Trans.PartialAuth = "Y"
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.AuthorizationTransaction.CreateSecureToken">
             <remarks>Use a secure token to send non-credit card transaction data to the Payflow server for storage in
             a way that can’t be intercepted and manipulated maliciously.The secure token must be used with the hosted 
             checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.
             
             NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants 
             can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token, 
             these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique, 
             36-character token ID and set CREATESECURETOKEN=Y in a request to the Payflow server. The Payflow server associates your 
             ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction 
             data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger 
             the Payflow server to retrieve your data and display it for buyer approval. 
             
             See the DOSecureTokenAuth sample for more information.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
             	// Since we are using the hosted payment pages, you will not be sending the credit card data with the 
                 // Secure Token Request.  You just send all other 'sensitive' data within this request and when you
                 // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
                 // and the SECURETOKENID that was created and used in the request.
            
                 // Create a new Secure Token Authorization Transaction.  Even though this example is performing
                 // an authorization, you can create a secure token using SaleTransction too.  Only Authorization and Sale
                 // type transactions are permitted.
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		// Set the flag to create a Secure Token.
            		Trans.CreateSecureToken = "Y";
            		// The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to generate 
            		// a random id, but any means to create an id can be used.
            		Trans.SecureTokenId = PayflowUtility.RequestId;
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("SECURETOKEN = " + TrxnResponse.SecureToken);
            			Console.WriteLine("SECURETOKENID = " + TrxnResponse.SecureTokenId);
            			// If value is true, then the Request ID has not been changed and the original response
            			// of the original transaction is returned. 
            			Console.WriteLine("DUPLICATE = " + TrxnResponse.Duplicate);
            		}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
                 ' Since we are using the hosted payment pages, you will not be sending the credit card data with the 
                 ' Secure Token Request.  You just send all other 'sensitive' data within this request and when you
                 ' call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
                 ' and the SECURETOKENID that was created and used in the request.
                 
                 ' Create a new Secure Token Authorization Transaction.  Even though this example is performing
                 ' an authorization, you can create a secure token using SaleTransction too.  Only Authorization and Sale
                 ' type transactions are permitted.
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(UserInfo, PayflowConnectionData, Invoice, Tender, RequestId)
            		' See the CreateSecureToken parameter to yes "Y", to flag this transaction request to create a secure token.
            		Trans.CreateSecureToken = "Y"
            		
                 ' The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to 
                 ' generate a random id, but any means to create an id can be used.
                 Trans.SecureTokenId = PayflowUtility.RequestId
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
                        Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString)
                        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
                        Console.WriteLine("SECURETOKEN = " + TrxnResponse.SecureToken)
                        Console.WriteLine("SECURETOKENID = " + TrxnResponse.SecureTokenId)
                        ' If value is true, then the Request ID has not been changed and the original response
                        ' of the original transaction is returned. 
                        Console.WriteLine("DUPLICATE = " + TrxnResponse.Duplicate)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </remarks>
            <summary>
            Gets, Sets CreateSecureToken. This property is used to create a SecureToken.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.AuthorizationTransaction.SecureTokenId">
            <summary>
            Gets, Sets SecureTokenId. This property is used while calling the hosted page.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor. 
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
             <example>This example shows how to create and perform a authorization transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor. 
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
             <example>This example shows how to create and perform a authorization transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor. 
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
             <example>This example shows how to create and perform
             a authorization transaction.
            <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		// Create a new Authorization Transaction.
            		AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            
            </summary>
            <param name="TrxType"></param>
            <param name="UserInfo"></param>
            <param name="PayflowConnectionData"></param>
            <param name="Invoice"></param>
            <param name="Tender"></param>
            <param name="RequestId"></param>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            
            </summary>
            <param name="TrxType"></param>
            <param name="UserInfo"></param>
            <param name="Invoice"></param>
            <param name="Tender"></param>
            <param name="RequestId"></param>
        </member>
        <member name="M:PayPal.Payments.Transactions.AuthorizationTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.BaseTransaction">
             <summary>
             This class is the base class for all transaction objects. It has methods for generating the transaction request,
             sending it to the server and obtaining the response.
             For an usage of this class, please see the examples in SamplesCS + SamplesVB folders namely DOSale_Base.cs
             and DOSale_Base.vb.
             </summary>
             <remarks>This class can be extended to create a new transaction type.</remarks>
             <example>This example shows how to create and perform an Sale transaction using a Basetransaction Object.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
             //Create a new Base Transaction.
            	BaseTransaction Trans = new BaseTransaction("S",
            		User, Connection, Inv, Card, PayflowUtility.RequestId);
            
            	//Submit the transaction.
            	Trans.SubmitTransaction();
            	// Get the Response
            	Response Resp = Trans.Response;
            
            
            	// Display the transaction response parameters.
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            
            		// Get the Transaction Context and check for any contained SDK specific errors (optional code).
            		Context TransCtx = Resp.TransactionContext;
            		if (TransCtx != null &amp;&amp; TransCtx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Transaction Errors = " + TransCtx.ToString());
            		}
            
            	}
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		' Create a new Base Transaction.
            		Dim Trans As BaseTransaction = New BaseTransaction("S", User, Connection, Inv, Card, PayflowUtility.RequestId)
            
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response
            		Dim Resp As Response = Trans.Response
            
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            
            		If Not TrxnResponse Is Nothing Then
            			Console.WriteLine("RESULT = " + TrxnResponse.Result)
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            		End If
            
            		' Get the Fraud Response parameters.
            		Dim FraudResp As FraudResponse = Resp.FraudResponse
            		If Not FraudResp Is Nothing Then
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            		End If
            
            
            		' Display the response.
            		Console.WriteLine(Environment.NewLine + PayflowUtility.GetStatus(Resp))
            
            		' Get the Transaction Context and check for any contained SDK specific errors (optional code).
            		Dim TransCtx As Context = Resp.TransactionContext
            		If (Not TransCtx Is Nothing) And (TransCtx.getErrorCount() > 0) Then
            			Console.WriteLine(Environment.NewLine + "Transaction Errors = " + TransCtx.ToString())
            		End If
            
            	End If
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mExtData">
            <summary>
            Arraylist of Extend Data objects. The arraylist contains objects of type ExtendData.
            ExtendData has a parameter name and value and is used for sending any additional parameter currently not 
            supported by the SDK.
            <seealso cref="P:PayPal.Payments.Transactions.BaseTransaction.ExtendData"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mTrxType">
            <summary>
            Type of transaction to perform, indicated by a single character.
            Credit payments require an ORIGID referring to an earlier Debit/Sale payment, 
            and the AMT must be empty or the exact amount of the original Debit/Sale payment.
            </summary>
            <remarks>
            Allowed TrxType values are:
            <list type="table">
            <listheader>
            <term>Transaction Type</term>
            <description>Transaction Name</description>
            </listheader>
            <item>
            <term>S</term>
            <description>Sale/Debit</description>
            </item>
            <item>
            <term>A</term>
            <description>Voice Authorization/Force</description>
            </item>
            <item>
            <term>C</term>
            <description>Credit</description>
            </item>
            <item>
            <term>V</term>
            <description>Void</description>
            </item>
            <item>
            <term>D</term>
            <description>Delayed Capture</description>
            </item>
            <item>
            <term>F</term>
            <description>Force/Voice Authorization</description>
            </item>
            <item>
            <term>I</term>
            <description>Inquiry</description>
            </item>
            <item>
            <term>R</term>
            <description>Recurring billing</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter: - <code>TRXTYPE</code></para>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mPayflowConnectionData">
            <summary>
            Connection parameters to connect to the PayPal Payment Server.
            <seealso cref="T:PayPal.Payments.DataObjects.PayflowConnectionData"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mRequest">
            <summary>
            Transaction request in Name-Value Pair format.
            <example><code>
            TRXTYPE[1]=S&amp;ACCT[16]=5105105105105100&amp;EXPDATE[4]=0115&amp;TENDER[1]=C&amp;INVNUM[8]=INV12345&amp;AMT[5]=25.12
            &amp;PONUM[7]=PO12345&amp;STREET[23]=123 Main St.&amp;ZIP[5]=12345&amp;
            USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password
            </code>
            </example>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mTender">
            <summary>
            Tender object for ACH, Credit Card, PINless Debit &amp; eCheck.
            <remarks>
            Allowed Tender Types are:
            <list type="table">
            <listheader>
            <term>Tender Type</term>
            <description>Tender Name</description>
            </listheader>
            <item>
            <term>A</term>
            <description>ACH ( Automatic Clearing House )</description>
            </item>
            <item>
            <term>C</term>
            <description>Credit Card</description>
            </item>
            <item>
            <term>D</term>
            <description>PINLess Debit</description>
            </item>
            <item>
            <term>K</term>
            <description>e-Check ( TeleCheck )</description>
            </item>
            </list>
            <para>Each Tender type Maps to Payflow Parameter: - <code>TENDER</code></para>
            </remarks>
            <seealso cref="T:PayPal.Payments.DataObjects.ACHTender"/>
            <seealso cref="T:PayPal.Payments.DataObjects.CardTender"/>
            <seealso cref="T:PayPal.Payments.DataObjects.CheckTender"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mInvoice">
            <summary>
            Transaction invoice object. Has parameters like Amt, InvNum, BillTo, ShipTo etc.
            <seealso cref="T:PayPal.Payments.DataObjects.Invoice"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mResponse">
            <summary>
            Response object for the Transaction. Has objects like Transaction Response, Fraud Response, 
            Recurring Response etc.
            <seealso cref="P:PayPal.Payments.Transactions.BaseTransaction.Response"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mUserInfo">
            <summary>
            Payflow user credentials. Has parameters like User, Vendor, Partner, Password etc.
            <seealso cref="T:PayPal.Payments.DataObjects.UserInfo"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mUserItem">
            <summary>
            Holds  USER1 to USER10 fields.
            <seealso cref="T:PayPal.Payments.DataObjects.UserItem"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mVerbosity">
            <summary>
            Value (LOW, MEDIUM or HIGH) that controls the detail level and format of transaction results.
            LOW (default) returns normalized values. MEDIUM or HIGH return the processor's raw response values.
            <remarks>
            <para>Maps to Payflow Parameter: - <code>VERBOSITY</code></para>
            </remarks>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mContext">
            <summary>
            Context object containing the Error Objects. The context object is available to all the classes in the 
            SDK. The individual classes add their messages in form of Error Objects to the Context object.
            <seealso cref="T:PayPal.Payments.DataObjects.UserInfo"/>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mRequestId">
            <summary>
            Unique request id for the transaction.
            <para>Maps to Payflow Parameter: in header - <code>PAYFLOW-REQUEST-ID</code></para>
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mRequestBuffer">
            <summary>
            Request Buffer. This is used to build the request string in Name-Value pair format from Data Objects.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mClientInfo">
            <summary>
            Client Header Information
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BaseTransaction.mBuyerAuthStatus">
            <summary>
            Transaction BuyerAuthStatus object. Has parameters like Authentication_ID, AuthenticatonStatus, CAVV,XID etc.
            <seealso cref="P:PayPal.Payments.Transactions.BaseTransaction.BuyerAuthStatus"/>
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.RequestBuffer">
            <summary>
            Gets the StringBuilder object for RequestBuffer.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.TrxType">
            <summary>
            Type of transaction to perform, indicated by a single character.
            Credit payments require an ORIGID referring to an earlier Debit/Sale payment, 
            and the AMT must be empty or the exact amount of the original Debit/Sale payment.
            Allowed TrxType values are:
            <list type="table">
            <listheader>
            <term>Transaction Type</term>
            <description>Transaction Name</description>
            </listheader>
            <item>
            <term>S</term>
            <description>Sale/Debit</description>
            </item>
            <item>
            <term>A</term>
            <description>Voice Authorization/Force</description>
            </item>
            <item>
            <term>C</term>
            <description>Credit</description>
            </item>
            <item>
            <term>V</term>
            <description>Void</description>
            </item>
            <item>
            <term>D</term>
            <description>Delayed Capture</description>
            </item>
            <item>
            <term>F</term>
            <description>Force/Voice Authorization</description>
            </item>
            <item>
            <term>I</term>
            <description>Inquiry</description>
            </item>
            <item>
            <term>R</term>
            <description>Recurring billing</description>
            </item>
            </list>
            <para>Maps to Payflow Parameter: - <code>TRXTYPE</code></para>
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	Console.WriteLine("Transaction Type = " + Trans.TrxType);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	Console.WriteLine("Transaction Type = " + Trans.TrxType);
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.Verbosity">
            <summary>
            Value (LOW, MEDIUM or HIGH) that controls the detail level and format of transaction results.
            LOW (default) returns normalized values. MEDIUM or HIGH return the processor's raw response values.
            <para>Maps to Payflow Parameter: - <code>VERBOSITY</code></para>
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	Trans.Verbosity = "HIGH";
            	Console.WriteLine("Transaction Type = " + Trans.TrxType);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	Trans.Verbosity = "HIGH"
            	Console.WriteLine("Transaction Type = " + Trans.TrxType)
            </code>
            </example>		
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.Context">
            <summary>
            Gets/sets the context object
            of the current transaction.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.Response">
             <summary>
             Gets the transaction response object.
             </summary>
             <example>
             <code lang="C#" escaped="false">
            		............
            		//Trans is the transaction object.
            		............
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            		
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
             <code lang="Visual Basic" escaped="false">
            		............
            		'Trans is the transaction object.
            		............
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>		
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.ExtendData">
            <summary>
            Gets the extend data list.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	
            	ArrayList ExtDataList = Trans.ExtendData;
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	Dim ExtDataList as ArrayList = Trans.ExtendData
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.Request">
            <summary>
            Gets the transaction request.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	
            	Console.WriteLine("Transaction Request = " + Trans.Request);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	Console.WriteLine("Transaction Request = " + Trans.Request)
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.Tender">
            <summary>
            Gets the Tender Object.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	
            	BaseTender Tender = Trans.Tender;
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	Dim Tender as BaseTender = Trans.Tender
            </code>
            </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.RequestId">
            <summary>
            Gets,Sets the RequestId for
            the transaction.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	//A unique RequestId can be generated
            	//using the 
            	<see cref="P:PayPal.Payments.Common.Utility.PayflowUtility.RequestId">PayflowUtility.RequestId</see>
            	//property. 
            	............
            	Trans.RequestId = PayflowUtility.RequestId;
            	Console.WriteLine("Transaction RequestId = " + Trans.RequestId);
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	'A unique RequestId can be generated
            	'using the 
            	<see cref="P:PayPal.Payments.Common.Utility.PayflowUtility.RequestId">PayflowUtility.RequestId</see>
            	'property. 
            	............
            	Trans.RequestId = PayflowUtility.RequestId
            	Console.WriteLine("Transaction RequestId = " + Trans.RequestId)
            </code>
            </example>		
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.ClientInfo">
            <summary>
            Gets , sets Client Information object.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.BaseTransaction.BuyerAuthStatus">
            <summary>
            Gets, sets BuyerAuthStatus object.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor">
            <summary>
            protected Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="Tender">Tender object such as  Card Tender.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="Tender">Tender object such as  Card Tender.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.SubmitTransaction">
             <summary>
             This method submits the transaction
             to the PayPal Payment Gateway.
             The response is obtained from the gateway
             and response object is populated with the
             response values along with the sdk specific
             errors in context, if any.
             </summary>
             <returns>Returns response object for Strong assembly transactions</returns>
             <example>
             <code lang="C#" escaped="false">
            		............
            		//Trans is the transaction object.
            		............
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            		
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
             <code lang="Visual Basic" escaped="false">
            		............
            		'Trans is the transaction object.
            		............
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.AddToExtendData(PayPal.Payments.DataObjects.ExtendData)">
            <summary>
            Adds an Extend Data object to 
            the extend data list held by transaction
            object.
            </summary>
            <param name="ExtData">Extend Data object to be added.</param>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	
            	//Create an object of <see cref="T:PayPal.Payments.DataObjects.ExtendData">ExtendData</see>
            	ExtendData ExtData = new ExtendData("PFPRO_PARAM_NAME","Param Value");
            	
            	//Add to Transaction Extend Data list.
            	Trans.AddToExtendData(ExtData);
            	
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	
            	'Create an object of <see cref="T:PayPal.Payments.DataObjects.ExtendData">ExtendData</see>
            	Dim ExtData as ExtendData = new ExtendData("PFPRO_PARAM_NAME","Param Value")
            	
            	'Add to Transaction Extend Data list.
            	Trans.AddToExtendData(ExtData)
            	
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.ClearExtendData">
            <summary>
            Clears the Extend Data list held by 
            transaction object.
            </summary>
            <example>
            <code lang="C#" escaped="false">
            	............
            	//Trans is the transaction object.
            	............
            	
            	//Clear Transaction Extend Data list.
            	Trans.ClearExtendData();
            	
            </code>
            <code lang="Visual Basic" escaped="false">
            	............
            	'Trans is the transaction object.
            	............
            	
            	'Clear Transaction Extend Data list.
            	Trans.ClearExtendData()
            	
            </code>
            </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.AddTransHeader(System.String,System.String)">
            <summary>
            Adds a transaction header
            </summary>
            <param name="HeaderName">Header name</param>
            <param name="HeaderValue">Header value</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.AddHeader(System.String,System.String)">
            <summary>
            Adds a header
            </summary>
            <param name="HeaderName">Header name</param>
            <param name="HeaderValue">Header value</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.RemoveTransHeader(System.String)">
            <summary>
            Removes a Transaction header
            </summary>
            <param name="HeaderName">Header Name</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BaseTransaction.RemoveHeader(System.String)">
            <summary>
            Removes a header
            </summary>
            <param name="HeaderName">Header Name</param>
        </member>
        <member name="T:PayPal.Payments.Transactions.BasicAuthorizationTransaction">
            <summary>
            Summary description for BasicAuthorizationTransaction.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BasicAuthorizationTransaction.#ctor(PayPal.Payments.DataObjects.PayPalTender,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
            <summary>
            
            </summary>
            <param name="Tender"></param>
            <param name="Invoice"></param>
            <param name="UserInfo"></param>
            <param name="PayflowConnectionData"></param>
            <param name="RequestId"></param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BasicAuthorizationTransaction.#ctor(PayPal.Payments.DataObjects.PayPalTender,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.UserInfo,System.String)">
            <summary>
            
            </summary>
            <param name="Tender"></param>
            <param name="Invoice"></param>
            <param name="UserInfo"></param>
            <param name="RequestId"></param>
        </member>
        <member name="T:PayPal.Payments.Transactions.BuyerAuthTransaction">
            <summary>
            This abstract class serves as base class for 
            Buyer auth transactions.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthTransaction.#ctor">
            <summary>
            protected Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="TrxType">Transaction type</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.BuyerAuthVATransaction">
             <summary>
             This class is used to create and perform 
             a Validate Authentication transaction.
             Validate Authentication is the second step of Buyer authentication process.
             </summary>
             <remarks>When the user authenticates on the secure authentication server, the server
             returns back a Payer authentication Signature (PaRes). You must send this value of PaRes 
             to validate the authentication to the payment gateway during the Validate Authentication.
             The gateway will then return the authentication status of the user in the response. 
             You should send this authntication information from the response into you main transaction.
             For more information, please refer to the Payflow Developers' Guide.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new validate Auhtentication Transaction.
            		 BuyerAuthVATransaction Trans = new BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Validate Authentication Transaction.
            		Dim Trans as New BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.Transactions.BuyerAuthVATransaction.mPaRes">
            <summary>
            Holds the PaRes value.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVATransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVATransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="PaRes">PaRes Value</param>
             <param name="RequestId">Request Id</param>
             <remarks>When the user authenticates on the secure authentication server, the server
             returns back a Payer authentication Signature (PaRes). You must send this value of PaRes 
             to validate the authentication to the payment gateway during the Validate Authentication.
             The gateway will then return the authentication status of the user in the response. 
             You should send this authntication information from the response into you main transaction.
             For more information, please refer to the Payflow Developers' Guide.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new validate Auhtentication Transaction.
            		 BuyerAuthVATransaction Trans = new BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Validate Authentication Transaction.
            		Dim Trans as New BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>	
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVATransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,System.String,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PaRes">PaRes Value</param>
             <param name="RequestId">Request Id</param>
             <remarks>When the user authenticates on the secure authentication server, the server
             returns back a Payer authentication Signature (PaRes). You must send this value of PaRes 
             to validate the authentication to the payment gateway during the Validate Authentication.
             The gateway will then return the authentication status of the user in the response. 
             You should send this authntication information from the response into you main transaction.
             For more information, please refer to the Payflow Developers' Guide.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		//Create a new validate Auhtentication Transaction.
            		 BuyerAuthVATransaction Trans = new BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Validate Authentication Transaction.
            		Dim Trans as New BuyerAuthVATransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Pares,
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>		
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVATransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.BuyerAuthVETransaction">
             <summary>
             This class is used to create and perform 
             a Verify Enrollment transaction.
             Verify Enrollment is the first step of Buyer authentication process.
             </summary>
             <remarks>After a successful Verify Enrollment Transaction, 
             you should redirect the user's browser to his/her browser to the 
             secure authentication server which will authinticate the user.
             While redirecting to this secure authentication server, 
             you must pass the parameter PaReq obtained in the response of this transaction.
             For more information, please refer to the Payflow Developers' Guide.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		
            		//Create the Card object.
            		CreditCard Card = new CreditCard("XXXXXXXXXXXXXXXX","XXXX");
            		
            		//Create the currency object.
            		Currency Amt = new Currency(new decimal(1.00),"US");
            		..........
            		..........
            		
            		//Create a new Verify Enrollment Transaction.
            		 BuyerAuthVETransaction Trans = new BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl);
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		
            		//Create the Card object.
            		Dim Card As CreditCard = new CreditCard("XXXXXXXXXXXXXXXX","XXXX")
            		
            		//Create the currency object.
            		Dim Amt As Currency = new Currency(new decimal(1.00),"US")
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl)
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.Transactions.BuyerAuthVETransaction.mCurrency">
            <summary>
            Holds the currency value, mandatory for VE.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.BuyerAuthVETransaction.mPurDesc">
            <summary>
            Holds the Purchase Description.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.BuyerAuthVETransaction.PurDesc">
            <summary>
            Gets, Sets Purchase description.
            <para>Maps to Payflow Parameter: - <code>PUR_DESC</code></para>
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVETransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVETransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.CreditCard,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Currency,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="CreditCard">Credit card information for the user.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Currency">Currency value</param>
             <param name="RequestId">Request Id</param>
             <remarks>After a successful Verify Enrollment Transaction, 
             you should redirect the user's browser to his/her browser to the 
             secure authentication server which will authinticate the user.
             While redirecting to this secure authentication server, 
             you must pass the parameter PaReq obtained in the response of this transaction.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		
            		//Create the Card object.
            		CreditCard Card = new CreditCard("XXXXXXXXXXXXXXXX","XXXX");
            		
            		//Create the currency object.
            		Currency Amt = new Currency(new decimal(1.00),"US");
            		..........
            		..........
            		
            		//Create a new Verify Enrollment Transaction.
            		 BuyerAuthVETransaction Trans = new BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl);
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		
            		//Create the Card object.
            		Dim Card As CreditCard = new CreditCard("XXXXXXXXXXXXXXXX","XXXX")
            		
            		//Create the currency object.
            		Dim Amt As Currency = new Currency(new decimal(1.00),"US")
            		..........
            		..........
            		
            		'Create a new Authorization Transaction.
            		Dim Trans as New BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl)
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>		
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVETransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.CreditCard,PayPal.Payments.DataObjects.Currency,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="CreditCard">Credit card information for the user.</param>
             <param name="Currency">Currency value</param>
             <param name="RequestId">Request Id</param>
             <remarks>After a successful Verify Enrollment Transaction, 
             you should redirect the user's browser to his/her browser to the 
             secure authentication server which will authinticate the user.
             While redirecting to this secure authentication server, 
             you must pass the parameter PaReq obtained in the response of this transaction.
             </remarks>
             <example>This example shows how to create and perform a Verify Eknrollment transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		
            		//Create the Card object.
            		CreditCard Card = new CreditCard("XXXXXXXXXXXXXXXX","XXXX");
            		
            		//Create the currency object.
            		Currency Amt = new Currency(new decimal(1.00),"US");
            		..........
            		..........
            		
            		//Create a new Verify Enrollment Transaction.
            		 BuyerAuthVETransaction Trans = new BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			}
            			
            		
            			// Get the Buyer auth Response parameters.
            			BuyerAuthResponse BAResponse = Resp.BuyerAuthResponse;
            			if (BAResponse != null)
            			{
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status);
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id);
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl);
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		
            		//Create the Card object.
            		Dim Card As CreditCard = new CreditCard("XXXXXXXXXXXXXXXX","XXXX")
            		
            		//Create the currency object.
            		Dim Amt As Currency = new Currency(new decimal(1.00),"US")
            		..........
            		..........
            		
            		'Create a new Verify Enrollment Transaction.
            		Dim Trans as New BuyerAuthVETransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Card,
            												Amt, 
            												RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            			End If
            
            			' Get the Buyer auth Response parameters.
            			Dim BAResponse As BuyerAuthResponse = Resp.BuyerAuthResponse;
            			If Not BAResponse Is Nothing Then
            				Console.WriteLine("AUTHENTICATION_STATUS = " + BAResponse.Authentication_Status)
            				Console.WriteLine("AUTHENTICATION_ID = " + BAResponse.Authentication_Id)
            				Console.WriteLine("ACSURL = " + BAResponse.AcsUrl)
            				Console.WriteLine("PAREQ = " + BAResponse.PaReq)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>		
        </member>
        <member name="M:PayPal.Payments.Transactions.BuyerAuthVETransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.CaptureTransaction">
             <summary>
             This class is used to perform a capture transaction.
             </summary>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Connection, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", User, 
            									Connection, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.CaptureTransaction.mCaptureComplete">
            <summary>
            Capture Complete. Y or N.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.CaptureTransaction.CaptureComplete">
            <summary>
            Gets, Sets  CaptureComplete.
            </summary>
            <remarks>
            <para>UK Only: Used with Delay Capture transaction
             to indicate this is the last capture you intend
             to make. 
             Values are : Y (default) N
             If CaptureComplete is Y, any remaining amount of the
             original reauthorized transaction is voided.</para>
            <para>Maps to Payflow Parameter:</para>
            <code>CAPTURECOMPLETE</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Connection, Inv, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction",
            										 User, Connection, Inv, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Inv, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", 
            										User, Inv, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Connection, Inv, Tender, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", User, Connection,
            										 Inv, Tender, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User,  Inv, Tender, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", User, 
            									 Inv, Tender, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Connection, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", User, 
            							Connection, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CaptureTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Capture transaction needs to be performed on a successful 
            	authorization transaction in order to capture the amount. Therefore, a 
            	capture transaction always takes the PNRef of a authorization transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            	
            	// Create a new Capture Transaction.
            	CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
            		User, Connection, PayflowUtility.RequestId);
            	
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            	
            	if (Resp != null)
            	{
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            		}
            	}
            	
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            	
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Capture Transaction.
            	Dim Trans As CaptureTransaction = New CaptureTransaction("PNRef of Authorization transaction", User, 
            									Connection, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            	
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.CreditTransaction">
             <summary>
             This class is used to create and perform an 
             Credit Transaction.
             </summary>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Connection, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						Connection, Inv, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.CreditTransaction.mOrigId">
            <summary>
            Original transaction id.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Connection, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						Connection, Inv, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						 Inv, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Connection, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						Connection, Inv, Tender, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						 Inv, Tender, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.",
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User,
            						Connection, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Reference credit transaction can be performed on successful
            	transactions in order to credit the amount. Therefore, a
            	reference credit transaction takes the PNRef of a previous transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a reference credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction("PNRef of a previous transaction.", PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a reference credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction("PNRef of a previous transaction.", User, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>This class is used for a stand alone credit transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a stand alone credit type of transaction.
            	CreditTransaction Trans = new CreditTransaction(User, Inv, Connection,
            							Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a stand alone credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction(User, Connection,
            						 Inv, Tender, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>This class is used for a stand alone credit transaction.
            	</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Credit Transaction.
            	// Following is an example of a stand alone type of transaction.
            	CreditTransaction Trans = new CreditTransaction(User, Inv, 
            							Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Credit Transaction.
            	' Following is an example of a stand alone credit type of transaction.
            	Dim Trans As CreditTransaction = New CreditTransaction(User,
            						 Inv, Tender, PayflowUtility.RequestId)
            		' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.CreditTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.FraudReviewTransaction">
             <summary>
             This class is used to perform a fraud review transaction.
             </summary>
            	<remarks>Fraud Review can be used as alternative to manually
            	 approving transactions under fraud on PayPal manager.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Ensure that Purchase price ceiling filter is set to $50.
            	// Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	// Submit the sale transaction and get the PNRef number from this.
            	FraudReviewTransaction Trans = new FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors (optional code).
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Ensure that Purchase price ceiling filter is set to $50.
            	' Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	' Submit the sale transaction and get the PNRef number from this.
            	Dim Trans As FraudReviewTransaction = New FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            							User, Connection, PayflowUtility.RequestId)
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors (optional code).
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.FraudReviewTransaction.mUpdateAction">
            <summary>
            Holds the update action. Mandatory for this transaction.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.FraudReviewTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.FraudReviewTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UpdateAction">Update Action RMS_APPROVE or RMS_MERCHANT_DECLINE</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Fraud Review can be used as alternative to manually
            	 approving transactions under fraud on PayPal manager.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Ensure that Purchase price ceiling filter is set to $50.
            	// Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	// Submit the sale transaction and get the PNRef number from this.
            	FraudReviewTransaction Trans = new FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors (optional code).
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Ensure that Purchase price ceiling filter is set to $50.
            	' Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	' Submit the sale transaction and get the PNRef number from this.
            	Dim Trans As FraudReviewTransaction = New FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            							User, Connection, PayflowUtility.RequestId)
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors (optional code).
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.FraudReviewTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="OrigId">Original Transaction Id</param>
             <param name="UpdateAction">Update Action RMS_APPROVE or RMS_MERCHANT_DECLINE</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Fraud Review can be used as alternative to manually
            	 approving transactions under fraud on PayPal manager.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Ensure that Purchase price ceiling filter is set to $50.
            	// Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	// Submit the sale transaction and get the PNRef number from this.
            	FraudReviewTransaction Trans = new FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            		User, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors (optional code).
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Ensure that Purchase price ceiling filter is set to $50.
            	' Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
            	' Submit the sale transaction and get the PNRef number from this.
            	Dim Trans As FraudReviewTransaction = New FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
            							User, PayflowUtility.RequestId)
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors (optional code).
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.FraudReviewTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.InquiryTransaction">
             <summary>
             This class is used to perform an inquiry transaction.
             </summary>
            	<remarks>Inquiry transaction gets the status of a previously performed 
            	transaction. Therefore, inquiry transaction always takes the PNRef of a 
            	previous transaction.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Inquiry Transaction.
            	InquiryTransaction Trans = new InquiryTransaction("PNRef of a previous transaction",
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult);
            			Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState);
            			Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Inquiry Transaction.
            	Dim Trans As InquiryTransaction = New InquiryTransaction("PNRef of a previous transaction",
            			User, Connection, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	        Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            	        Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult)
            	        Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState)
            	        Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef)
            	    End If
            
            	    ' Get the Fraud Response parameters.
            	    Dim FraudResp As FraudResponse = Resp.FraudResponse
            	    If Not FraudResp Is Nothing Then
            	        Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            	        Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.InquiryTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.InquiryTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Inquiry transaction gets the status of a previously performed 
            	transaction. Therefore, inquiry transaction always takes the PNRef of a 
            	previous transaction.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Inquiry Transaction.
            	InquiryTransaction Trans = new InquiryTransaction("PNRef of a previous transaction",
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult);
            			Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState);
            			Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Inquiry Transaction.
            	Dim Trans As InquiryTransaction = New InquiryTransaction("PNRef of a previous transaction",
            			User, Connection, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	        Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            	        Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult)
            	        Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState)
            	        Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef)
            	    End If
            
            	    ' Get the Fraud Response parameters.
            	    Dim FraudResp As FraudResponse = Resp.FraudResponse
            	    If Not FraudResp Is Nothing Then
            	        Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            	        Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.InquiryTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Inquiry transaction gets the status of a previously performed 
            	transaction. Therefore, inquiry transaction always takes the PNRef of a 
            	previous transaction.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Inquiry Transaction.
            	InquiryTransaction Trans = new InquiryTransaction("PNRef of a previous transaction",
            		User, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult);
            			Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState);
            			Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Inquiry Transaction.
            	Dim Trans As InquiryTransaction = New InquiryTransaction("PNRef of a previous transaction",
            			User, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	        Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            	        Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult)
            	        Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState)
            	        Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef)
            	    End If
            
            	    ' Get the Fraud Response parameters.
            	    Dim FraudResp As FraudResponse = Resp.FraudResponse
            	    If Not FraudResp Is Nothing Then
            	        Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            	        Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.InquiryTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Inquiry transaction gets the status of a previously performed 
            	transaction. Therefore, inquiry transaction always takes the PNRef or CustRef of a 
            	previous transaction.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Inquiry Transaction.
            	InquiryTransaction Trans = new InquiryTransaction("PNRef of a previous transaction",
            		User, Connection, Inv, PayflowUtility.RequestId);
            		
            	// To use CUSTREF instead of PNREF you need to set the CustRef and include the INVOICE object in your
             // request.  Since you will be using CUSTREF instead of PNREF, PNREF will be "" (null).
             // Create a new Invoice data object with the Amount, Billing Address etc. details.
             //Invoice Inv = new Invoice();
             //Inv.CustRef = "TEST1";
             //InquiryTransaction Trans = new InquiryTransaction("", User, Connection, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult);
            			Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState);
            			Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Inquiry Transaction.
            	Dim Trans As InquiryTransaction = New InquiryTransaction("PNRef of a previous transaction",
            			User, Connection, Inv, PayflowUtility.RequestId)
            			
            	' To use CUSTREF instead of PNREF you need to set the CustRef and include the INVOICE object in your
             ' request.  Since you will be using CUSTREF instead of PNREF, PNREF will be "" (null).
             ' Create a new Invoice data object with the Amount, Billing Address etc. details.
             'Dim Inv As Invoice = New Invoice
             'Inv.CustRef = "TEST1"
             'Dim Trans As InquiryTransaction = New InquiryTransaction("", User, Connection, Inv, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	        Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            	        Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult)
            	        Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState)
            	        Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef)
            	    End If
            
            	    ' Get the Fraud Response parameters.
            	    Dim FraudResp As FraudResponse = Resp.FraudResponse
            	    If Not FraudResp Is Nothing Then
            	        Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            	        Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.InquiryTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
            	<remarks>Inquiry transaction gets the status of a previously performed 
            	transaction. Therefore, inquiry transaction always takes the PNRef or CustRef of a 
            	previous transaction.</remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Inquiry Transaction.
            	InquiryTransaction Trans = new InquiryTransaction("PNRef of a previous transaction",
            		User, Inv, PayflowUtility.RequestId);
            		
            	// To use CUSTREF instead of PNREF you need to set the CustRef and include the INVOICE object in your
             // request.  Since you will be using CUSTREF instead of PNREF, PNREF will be "" (null).
             // Create a new Invoice data object with the Amount, Billing Address etc. details.
             //Invoice Inv = new Invoice();
             //Inv.CustRef = "TEST1";
             //InquiryTransaction Trans = new InquiryTransaction("", User, Connection, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            			Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            			Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            			Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult);
            			Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState);
            			Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef);
            		}
            
            		// Get the Fraud Response parameters.
            		FraudResponse FraudResp =  Resp.FraudResponse;
            		if (FraudResp != null)
            		{
            			Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            			Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	' Create a new Inquiry Transaction.
            	Dim Trans As InquiryTransaction = New InquiryTransaction("PNRef of a previous transaction",
            			User, Inv, PayflowUtility.RequestId)
            			
            	' To use CUSTREF instead of PNREF you need to set the CustRef and include the INVOICE object in your
             ' request.  Since you will be using CUSTREF instead of PNREF, PNREF will be "" (null).
             ' Create a new Invoice data object with the Amount, Billing Address etc. details.
             'Dim Inv As Invoice = New Invoice
             'Inv.CustRef = "TEST1"
             'Dim Trans As InquiryTransaction = New InquiryTransaction("", User, Connection, Inv, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	        Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            	        Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            	        Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            	        Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            	        Console.WriteLine("ORIGRESULT = " + TrxnResponse.OrigResult)
            	        Console.WriteLine("TRANSSTATE = " + TrxnResponse.TransState)
            	        Console.WriteLine("CUSTREF = " + TrxnResponse.CustRef)
            	    End If
            
            	    ' Get the Fraud Response parameters.
            	    Dim FraudResp As FraudResponse = Resp.FraudResponse
            	    If Not FraudResp Is Nothing Then
            	        Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            	        Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.ITransaction">
            <summary>
            Base Interface for all the transaction objects.
            </summary>
            <remarks>This interface cane be implemented to create a new 
            transaction type.</remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ITransaction.SubmitTransaction">
            <summary>
            Submits the transaction to the Payflow server
            and populates the response object.
            </summary>
            <remarks>When implemented in the derived class, this method 
            should be preferred to be made as an internal method.</remarks>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:PayPal.Payments.Transactions.ITransaction.GenerateRequest">
            <summary>
            generates the request.
            </summary>
            <remarks>When implemented in the derived class, this method 
            should be preferred to be made as an internal method.</remarks>
        </member>
        <member name="T:PayPal.Payments.Transactions.NamespaceDoc">
             <summary>
            NameSpace doc for Transactions namespace
             </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.OrderTransaction">
             <summary>
             This class is used to create and perform an Order Transaction for Express Checkout.
             
             An Order transaction represents an agreement to pay one or more authorized amounts up to 
             the specified total over a maximum of 29 days. 
             </summary>
             <example>This example shows how to create and perform a order transaction as part of Express Checkout.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
            		// Create the Tender object.
            		PayPalTender Tender = new PayPalTender(SetRequest);
            
            		// Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		// authorized amounts up to the specified total over a maximum of 29 days. 
            		OrderTransaction Trans = new OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId);
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString());
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token);
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		' Create the Tender object. 
            		Dim Tender As New PayPalTender(SetRequest)
            		
            		' Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		' authorized amounts up to the specified total over a maximum of 29 days. 
            		Dim Trans As New OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId)
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token)
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.OrderTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.PayPalTender,System.String)">
             <summary>
             This class is used to create and perform an Order Transaction for Express Checkout.
             
             An Order transaction represents an agreement to pay one or more authorized amounts up to 
             the specified total over a maximum of 29 days. 
             </summary>
             <example>This example shows how to create and perform a order transaction as part of Express Checkout.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
            		// Create the Tender object.
            		PayPalTender Tender = new PayPalTender(SetRequest);
            
            		// Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		// authorized amounts up to the specified total over a maximum of 29 days. 
            		OrderTransaction Trans = new OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId);
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString());
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token);
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		' Create the Tender object. 
            		Dim Tender As New PayPalTender(SetRequest)
            		
            		' Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		' authorized amounts up to the specified total over a maximum of 29 days. 
            		Dim Trans As New OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId)
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token)
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
        </member>
        <member name="M:PayPal.Payments.Transactions.OrderTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.PayPalTender,System.String)">
             <summary>
             This class is used to create and perform an Order Transaction for Express Checkout.
             
             An Order transaction represents an agreement to pay one or more authorized amounts up to 
             the specified total over a maximum of 29 days. 
             </summary>
             <example>This example shows how to create and perform a order transaction as part of Express Checkout.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
            		// Create the Tender object.
            		PayPalTender Tender = new PayPalTender(SetRequest);
            
            		// Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		// authorized amounts up to the specified total over a maximum of 29 days. 
            		OrderTransaction Trans = new OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId);
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString());
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token);
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		' Create the Tender object. 
            		Dim Tender As New PayPalTender(SetRequest)
            		
            		' Create an Order Transaction.  An Order transaction represents an agreement to pay one or more 
            		' authorized amounts up to the specified total over a maximum of 29 days. 
            		Dim Trans As New OrderTransaction(User, Connection, Inv, Tender, PayflowUtility.RequestId)
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("TOKEN = " + Trans.Response.ExpressCheckoutSetResponse.Token)
            				Console.WriteLine("CORRELATIONID = " + TrxnResponse.CorrelationId)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringAddTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             add action.
             </summary>
             <remarks> RecurringAddTransaction is used to add a new recurring profile 
             either by submitting the data that defines the profile or by converting an 
             existing transaction into a profile. Upon successful creation of a profile,
             PayPal activates the profile, performs the Optional Transaction if specified,
             initiates the payment cycle, and returns a Profile ID (a 12-character string that 
             uniquely identifies the profile for searching and reporting). Upon failure, PayPal 
             does not generate the profile and returns an error message.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Add Transaction.
            	RecurringAddTransaction Trans = new RecurringAddTransaction(
            		User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	Dim RecurInfo As RecurringInfo = New RecurringInfo                                                               
            	' The date that the first payment will be processed.                                                                  
            	' This will be of the format mmddyyyy.                                                                                    
            	RecurInfo.Start = "01012009"                                                                                                
            	RecurInfo.ProfileName = "PayPal"                                                                                        
            	' Specifies how often the payment occurs. All PAYPERIOD values must use                                 
            	' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /                                  
            	' QTER / SMYR / YEAR                                                                                                            
            	RecurInfo.PayPeriod = "WEEK"                                                                                               
            	'/////////////////////////////////////////////////////////////////                                                         
            	                                                                                                                                           
            	' Create a new Recurring Add Transaction.                                                                              
            	Dim Trans As RecurringAddTransaction = New RecurringAddTransaction(User, Connection, Inv,   
            						Card, RecurInfo, PayflowUtility.RequestId)                                     
            	                                                                                                                                           
            	' Submit the transaction.                                                                                                        
            	Dim Resp As Response = Trans.SubmitTransaction()                                                                
            	                                                                                                                                           
            	If Not Resp Is Nothing Then                                                                                                    
            	    ' Get the Transaction Response parameters.                                                                        
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse                              
            	    If Not TrxnResponse Is Nothing Then                                                                                  
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)                                                   
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                                            
            	    End If                                                                                                                               
            	                                                                                                                                           
            	    ' Get the Recurring Response parameters.                                                                           
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                                  
            	    If Not RecurResponse Is Nothing Then                                                                                 
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                                    
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                                          
            	    End If                                                                                                                               
            	End If                                                                                                                                   
            	                                                                                                                                           
            	' Get the Context and check for any contained SDK specific errors.                                            
            	Dim Ctx As Context = Resp.TransactionContext                                                                       
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                                     
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                                
            	End If                                                                                                                                   
            	
            	
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.RecurringAddTransaction.mOrigId">
            <summary>
            Used for original transaction id.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.RecurringAddTransaction.OrigId">
            <summary>
            Gets, Sets OrigId
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringAddTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RecurringInfo">RecurringInfo object .</param>
             <param name="RequestId">Request Id</param>
             <remarks> RecurringAddTransaction is used to add a new recurring profile 
             either by submitting the data that defines the profile or by converting an 
             existing transaction into a profile. Upon successful creation of a profile,
             PayPal activates the profile, performs the Optional Transaction if specified,
             initiates the payment cycle, and returns a Profile ID (a 12-character string that 
             uniquely identifies the profile for searching and reporting). Upon failure, PayPal 
             does not generate the profile and returns an error message.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Add Transaction.
            	RecurringAddTransaction Trans = new RecurringAddTransaction(
            		User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	Dim RecurInfo As RecurringInfo = New RecurringInfo                                                               
            	' The date that the first payment will be processed.                                                                  
            	' This will be of the format mmddyyyy.                                                                                    
            	RecurInfo.Start = "01012009"                                                                                                
            	RecurInfo.ProfileName = "PayPal"                                                                                        
            	' Specifies how often the payment occurs. All PAYPERIOD values must use                                 
            	' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /                                  
            	' QTER / SMYR / YEAR                                                                                                            
            	RecurInfo.PayPeriod = "WEEK"                                                                                               
            	'/////////////////////////////////////////////////////////////////                                                         
            	                                                                                                                                           
            	' Create a new Recurring Add Transaction.                                                                              
            	Dim Trans As RecurringAddTransaction = New RecurringAddTransaction(User, Connection, Inv,   
            						Card, RecurInfo, PayflowUtility.RequestId)                                     
            	                                                                                                                                           
            	' Submit the transaction.                                                                                                        
            	Dim Resp As Response = Trans.SubmitTransaction()                                                                
            	                                                                                                                                           
            	If Not Resp Is Nothing Then                                                                                                    
            	    ' Get the Transaction Response parameters.                                                                        
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse                              
            	    If Not TrxnResponse Is Nothing Then                                                                                  
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)                                                   
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                                            
            	    End If                                                                                                                               
            	                                                                                                                                           
            	    ' Get the Recurring Response parameters.                                                                           
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                                  
            	    If Not RecurResponse Is Nothing Then                                                                                 
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                                    
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                                          
            	    End If                                                                                                                               
            	End If                                                                                                                                   
            	                                                                                                                                           
            	' Get the Context and check for any contained SDK specific errors.                                            
            	Dim Ctx As Context = Resp.TransactionContext                                                                       
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                                     
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                                
            	End If                                                                                                                                   
            	
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringAddTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RecurringInfo">RecurringInfo object .</param>
             <param name="RequestId">Request Id</param>
             <remarks> RecurringAddTransaction is used to add a new recurring profile 
             either by submitting the data that defines the profile or by converting an 
             existing transaction into a profile. Upon successful creation of a profile,
             PayPal activates the profile, performs the Optional Transaction if specified,
             initiates the payment cycle, and returns a Profile ID (a 12-character string that 
             uniquely identifies the profile for searching and reporting). Upon failure, PayPal 
             does not generate the profile and returns an error message.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Add Transaction.
            	RecurringAddTransaction Trans = new RecurringAddTransaction(
            		User, Inv, Card, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	Dim RecurInfo As RecurringInfo = New RecurringInfo                                                               
            	' The date that the first payment will be processed.                                                                  
            	' This will be of the format mmddyyyy.                                                                                    
            	RecurInfo.Start = "01012009"                                                                                                
            	RecurInfo.ProfileName = "PayPal"                                                                                        
            	' Specifies how often the payment occurs. All PAYPERIOD values must use                                 
            	' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /                                  
            	' QTER / SMYR / YEAR                                                                                                            
            	RecurInfo.PayPeriod = "WEEK"                                                                                               
            	'/////////////////////////////////////////////////////////////////                                                         
            	                                                                                                                                           
            	' Create a new Recurring Add Transaction.                                                                              
            	Dim Trans As RecurringAddTransaction = New RecurringAddTransaction(User, Inv,   
            						Card, RecurInfo, PayflowUtility.RequestId)                                     
            	                                                                                                                                           
            	' Submit the transaction.                                                                                                        
            	Dim Resp As Response = Trans.SubmitTransaction()                                                                
            	                                                                                                                                           
            	If Not Resp Is Nothing Then                                                                                                    
            	    ' Get the Transaction Response parameters.                                                                        
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse                              
            	    If Not TrxnResponse Is Nothing Then                                                                                  
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)                                                   
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                                            
            	    End If                                                                                                                               
            	                                                                                                                                           
            	    ' Get the Recurring Response parameters.                                                                           
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                                  
            	    If Not RecurResponse Is Nothing Then                                                                                 
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                                    
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                                          
            	    End If                                                                                                                               
            	End If                                                                                                                                   
            	                                                                                                                                           
            	' Get the Context and check for any contained SDK specific errors.                                            
            	Dim Ctx As Context = Resp.TransactionContext                                                                       
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                                     
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                                
            	End If                                                                                                                                   
            	
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringAddTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringCancelTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             cancel action.
             </summary>
             <remarks> RecurringCancelTransaction is used to cancel  the recurring profile
             to deactivate the profile from performing further transactions. The profile is 
             marked as cancelled and the customer is no longer billed. PayPal records the 
             cancellation date. 
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();                                                    
            	RecurInfo.OrigProfileId = "RT0000001350";                                                          
            	///////////////////////////////////////////////////////////////////                                     
            	                                                                                                                        
            	// Create a new Recurring Cancel Transaction.                                                      
            	RecurringCancelTransaction Trans = new RecurringCancelTransaction(                   
            		User, Connection, RecurInfo, PayflowUtility.RequestId);                                    
            	                                                                                                                        
            	// Submit the transaction.                                                                                    
            	Response Resp = Trans.SubmitTransaction();                                                       
            	                                                                                                                        
            	if (Resp != null)                                                                                                  
            	{                                                                                                                       
            		// Get the Transaction Response parameters.                                                
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;                
            		if (TrxnResponse != null)                                                                             
            		{                                                                                                               
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);                
            		}                                                                                                               
            	                                                                                                                        
            		// Get the Recurring Response parameters.                                                  
            		RecurringResponse RecurResponse = Resp.RecurringResponse;                     
            		if (RecurResponse != null)                                                                           
            		{                                                                                                               
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);                       
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);             
            		}                                                                                                               
            	}                                                                                                                       
            	                                                                                                                        
            	// Get the Context and check for any contained SDK specific errors.                       
            	Context Ctx = Resp.TransactionContext;                                                              
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                           
            	{                                                                                                                       
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());        
            	}                                                                                                                       
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	   Dim RecurInfo As RecurringInfo = New RecurringInfo                                               
            	  RecurInfo.OrigProfileId = "RT0000001350"                                                                
            	  '/////////////////////////////////////////////////////////////////                                           
            	                                                                                                                               
            	  ' Create a new Recurring Cancel Transaction.                                                            
            	  Dim Trans As RecurringCancelTransaction = New RecurringCancelTransaction(User,    
            						Connection, RecurInfo, PayflowUtility.RequestId)              
            	                                                                                                                               
            	  ' Submit the transaction.                                                                                          
            	  Dim Resp As Response = Trans.SubmitTransaction()                                                 
            	                                                                                                                               
            	  If Not Resp Is Nothing Then                                                                                     
            	      ' Get the Transaction Response parameters.                                                          
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse               
            	      If Not TrxnResponse Is Nothing Then                                                                    
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)                                     
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                              
            	      End If                                                                                                                
            	                                                                                                                               
            	      ' Get the Recurring Response parameters.                                                            
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                   
            	      If Not RecurResponse Is Nothing Then                                                                  
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                       
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                            
            	      End If                                                                                                                
            	  End If                                                                                                                    
            	                                                                                                                               
            	  ' Get the Context and check for any contained SDK specific errors.                             
            	  Dim Ctx As Context = Resp.TransactionContext                                                        
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                         
            	      Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                    
            	  End If                                                                                                                    
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringCancelTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> RecurringCancelTransaction is used to cancel  the recurring profile
             to deactivate the profile from performing further transactions. The profile is 
             marked as cancelled and the customer is no longer billed. PayPal records the 
             cancellation date. 
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();                                                    
            	RecurInfo.OrigProfileId = "RT0000001350";                                                          
            	///////////////////////////////////////////////////////////////////                                     
            	                                                                                                                        
            	// Create a new Recurring Cancel Transaction.                                                      
            	RecurringCancelTransaction Trans = new RecurringCancelTransaction(                   
            		User, Connection, RecurInfo, PayflowUtility.RequestId);                                    
            	                                                                                                                        
            	// Submit the transaction.                                                                                    
            	Response Resp = Trans.SubmitTransaction();                                                       
            	                                                                                                                        
            	if (Resp != null)                                                                                                  
            	{                                                                                                                       
            		// Get the Transaction Response parameters.                                                
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;                
            		if (TrxnResponse != null)                                                                             
            		{                                                                                                               
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);                
            		}                                                                                                               
            	                                                                                                                        
            		// Get the Recurring Response parameters.                                                  
            		RecurringResponse RecurResponse = Resp.RecurringResponse;                     
            		if (RecurResponse != null)                                                                           
            		{                                                                                                               
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);                       
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);             
            		}                                                                                                               
            	}                                                                                                                       
            	                                                                                                                        
            	// Get the Context and check for any contained SDK specific errors.                       
            	Context Ctx = Resp.TransactionContext;                                                              
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                           
            	{                                                                                                                       
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());        
            	}                                                                                                                       
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	   Dim RecurInfo As RecurringInfo = New RecurringInfo                                               
            	  RecurInfo.OrigProfileId = "RT0000001350"                                                                
            	  '/////////////////////////////////////////////////////////////////                                           
            	                                                                                                                               
            	  ' Create a new Recurring Cancel Transaction.                                                            
            	  Dim Trans As RecurringCancelTransaction = New RecurringCancelTransaction(User,    
            						Connection, RecurInfo, PayflowUtility.RequestId)              
            	                                                                                                                               
            	  ' Submit the transaction.                                                                                          
            	  Dim Resp As Response = Trans.SubmitTransaction()                                                 
            	                                                                                                                               
            	  If Not Resp Is Nothing Then                                                                                     
            	      ' Get the Transaction Response parameters.                                                          
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse               
            	      If Not TrxnResponse Is Nothing Then                                                                    
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)                                     
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                              
            	      End If                                                                                                                
            	                                                                                                                               
            	      ' Get the Recurring Response parameters.                                                            
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                   
            	      If Not RecurResponse Is Nothing Then                                                                  
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                       
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                            
            	      End If                                                                                                                
            	  End If                                                                                                                    
            	                                                                                                                               
            	  ' Get the Context and check for any contained SDK specific errors.                             
            	  Dim Ctx As Context = Resp.TransactionContext                                                        
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                         
            	      Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                    
            	  End If                                                                                                                    
            	
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringCancelTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> RecurringCancelTransaction is used to cancel  the recurring profile
             to deactivate the profile from performing further transactions. The profile is 
             marked as cancelled and the customer is no longer billed. PayPal records the 
             cancellation date. 
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();                                                    
            	RecurInfo.OrigProfileId = "RT0000001350";                                                          
            	///////////////////////////////////////////////////////////////////                                     
            	                                                                                                                        
            	// Create a new Recurring Cancel Transaction.                                                      
            	RecurringCancelTransaction Trans = new RecurringCancelTransaction(                   
            		User, RecurInfo, PayflowUtility.RequestId);                                    
            	                                                                                                                        
            	// Submit the transaction.                                                                                    
            	Response Resp = Trans.SubmitTransaction();                                                       
            	                                                                                                                        
            	if (Resp != null)                                                                                                  
            	{                                                                                                                       
            		// Get the Transaction Response parameters.                                                
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;                
            		if (TrxnResponse != null)                                                                             
            		{                                                                                                               
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);                
            		}                                                                                                               
            	                                                                                                                        
            		// Get the Recurring Response parameters.                                                  
            		RecurringResponse RecurResponse = Resp.RecurringResponse;                     
            		if (RecurResponse != null)                                                                           
            		{                                                                                                               
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);                       
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);             
            		}                                                                                                               
            	}                                                                                                                       
            	                                                                                                                        
            	// Get the Context and check for any contained SDK specific errors.                       
            	Context Ctx = Resp.TransactionContext;                                                              
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                           
            	{                                                                                                                       
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());        
            	}                                                                                                                       
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.                                                                                    
            	   Dim RecurInfo As RecurringInfo = New RecurringInfo                                               
            	  RecurInfo.OrigProfileId = "RT0000001350"                                                                
            	  '/////////////////////////////////////////////////////////////////                                           
            	                                                                                                                               
            	  ' Create a new Recurring Cancel Transaction.                                                            
            	  Dim Trans As RecurringCancelTransaction = New RecurringCancelTransaction(User,    
            						 RecurInfo, PayflowUtility.RequestId)              
            	                                                                                                                               
            	  ' Submit the transaction.                                                                                          
            	  Dim Resp As Response = Trans.SubmitTransaction()                                                 
            	                                                                                                                               
            	  If Not Resp Is Nothing Then                                                                                     
            	      ' Get the Transaction Response parameters.                                                          
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse               
            	      If Not TrxnResponse Is Nothing Then                                                                    
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)                                     
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                              
            	      End If                                                                                                                
            	                                                                                                                               
            	      ' Get the Recurring Response parameters.                                                            
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse                   
            	      If Not RecurResponse Is Nothing Then                                                                  
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)                                       
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)                            
            	      End If                                                                                                                
            	  End If                                                                                                                    
            	                                                                                                                               
            	  ' Get the Context and check for any contained SDK specific errors.                             
            	  Dim Ctx As Context = Resp.TransactionContext                                                        
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                         
            	      Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())                    
            	  End If                                                                                                                    
            	
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringInquiryTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             inquiry action.
             </summary>
             <remarks>
             RecurringInquiryTransaction is used to request two different sets of information:
             To view the full set of payment information for a profile, include the
             PAYMENTHISTORY=Y name/value pair with the Inquiry action.
             To view the status of a customer’s profile, submit an Inquiry action that does
             not include the PAYMENTHISTORY parameter (alternatively, submit
             PAYMENTHISTORY=N).
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Inquiry Transaction.
            	RecurringInquiryTransaction Trans = new RecurringInquiryTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            			Console.WriteLine("STATUS = " + RecurResponse.Status);
            			Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName);
            			Console.WriteLine("START = " + RecurResponse.Start);
            			Console.WriteLine("TERM = " + RecurResponse.Term);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("TENDER = " + RecurResponse.Tender);
            			Console.WriteLine("AMT = " + RecurResponse.Amt);
            			Console.WriteLine("ACCT = " + RecurResponse.Acct);
            			Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate);
            			Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt);
            			Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt);
            			Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments);
            			Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments);
            			Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays);
            			Console.WriteLine("STREET = " + RecurResponse.Street);
            			Console.WriteLine("ZIP = " + RecurResponse.Zip);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Inquiry Transaction.
            	 Dim Trans As RecurringInquiryTransaction = New RecurringInquiryTransaction(User,
            					Connection, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	         Console.WriteLine("STATUS = " + RecurResponse.Status)
            	         Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName)
            	         Console.WriteLine("START = " + RecurResponse.Start)
            	         Console.WriteLine("TERM = " + RecurResponse.Term)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("TENDER = " + RecurResponse.Tender)
            	         Console.WriteLine("AMT = " + RecurResponse.Amt)
            	         Console.WriteLine("ACCT = " + RecurResponse.Acct)
            	         Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate)
            	         Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt)
            	         Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt)
            	         Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments)
            	         Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments)
            	         Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays)
            	         Console.WriteLine("STREET = " + RecurResponse.Street)
            	         Console.WriteLine("ZIP = " + RecurResponse.Zip)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringInquiryTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             RecurringInquiryTransaction is used to request two different sets of information:
             To view the full set of payment information for a profile, include the
             PAYMENTHISTORY=Y name/value pair with the Inquiry action.
             To view the status of a customer’s profile, submit an Inquiry action that does
             not include the PAYMENTHISTORY parameter (alternatively, submit
             PAYMENTHISTORY=N).
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Inquiry Transaction.
            	RecurringInquiryTransaction Trans = new RecurringInquiryTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            			Console.WriteLine("STATUS = " + RecurResponse.Status);
            			Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName);
            			Console.WriteLine("START = " + RecurResponse.Start);
            			Console.WriteLine("TERM = " + RecurResponse.Term);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("TENDER = " + RecurResponse.Tender);
            			Console.WriteLine("AMT = " + RecurResponse.Amt);
            			Console.WriteLine("ACCT = " + RecurResponse.Acct);
            			Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate);
            			Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt);
            			Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt);
            			Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments);
            			Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments);
            			Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays);
            			Console.WriteLine("STREET = " + RecurResponse.Street);
            			Console.WriteLine("ZIP = " + RecurResponse.Zip);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Inquiry Transaction.
            	 Dim Trans As RecurringInquiryTransaction = New RecurringInquiryTransaction(User,
            					Connection, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	         Console.WriteLine("STATUS = " + RecurResponse.Status)
            	         Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName)
            	         Console.WriteLine("START = " + RecurResponse.Start)
            	         Console.WriteLine("TERM = " + RecurResponse.Term)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("TENDER = " + RecurResponse.Tender)
            	         Console.WriteLine("AMT = " + RecurResponse.Amt)
            	         Console.WriteLine("ACCT = " + RecurResponse.Acct)
            	         Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate)
            	         Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt)
            	         Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt)
            	         Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments)
            	         Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments)
            	         Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays)
            	         Console.WriteLine("STREET = " + RecurResponse.Street)
            	         Console.WriteLine("ZIP = " + RecurResponse.Zip)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringInquiryTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             RecurringInquiryTransaction is used to request two different sets of information:
             To view the full set of payment information for a profile, include the
             PAYMENTHISTORY=Y name/value pair with the Inquiry action.
             To view the status of a customer’s profile, submit an Inquiry action that does
             not include the PAYMENTHISTORY parameter (alternatively, submit
             PAYMENTHISTORY=N).
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Inquiry Transaction.
            	RecurringInquiryTransaction Trans = new RecurringInquiryTransaction(
            		User,  RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            			Console.WriteLine("STATUS = " + RecurResponse.Status);
            			Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName);
            			Console.WriteLine("START = " + RecurResponse.Start);
            			Console.WriteLine("TERM = " + RecurResponse.Term);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod);
            			Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment);
            			Console.WriteLine("TENDER = " + RecurResponse.Tender);
            			Console.WriteLine("AMT = " + RecurResponse.Amt);
            			Console.WriteLine("ACCT = " + RecurResponse.Acct);
            			Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate);
            			Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt);
            			Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt);
            			Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments);
            			Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments);
            			Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays);
            			Console.WriteLine("STREET = " + RecurResponse.Street);
            			Console.WriteLine("ZIP = " + RecurResponse.Zip);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Inquiry Transaction.
            	 Dim Trans As RecurringInquiryTransaction = New RecurringInquiryTransaction(User,
            					 RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	         Console.WriteLine("STATUS = " + RecurResponse.Status)
            	         Console.WriteLine("PROFILENAME = " + RecurResponse.ProfileName)
            	         Console.WriteLine("START = " + RecurResponse.Start)
            	         Console.WriteLine("TERM = " + RecurResponse.Term)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("PAYPERIOD = " + RecurResponse.PayPeriod)
            	         Console.WriteLine("NEXTPAYMENT = " + RecurResponse.NextPayment)
            	         Console.WriteLine("TENDER = " + RecurResponse.Tender)
            	         Console.WriteLine("AMT = " + RecurResponse.Amt)
            	         Console.WriteLine("ACCT = " + RecurResponse.Acct)
            	         Console.WriteLine("EXPDATE = " + RecurResponse.ExpDate)
            	         Console.WriteLine("AGGREGATEAMT = " + RecurResponse.AggregateAmt)
            	         Console.WriteLine("AGGREGATEOPTIONALAMT = " + RecurResponse.AggregateOptionalAmt)
            	         Console.WriteLine("MAXFAILPAYMENTS = " + RecurResponse.MaxFailPayments)
            	         Console.WriteLine("NUMFAILPAYMENTS = " + RecurResponse.NumFailPayments)
            	         Console.WriteLine("RETRYNUMDAYS = " + RecurResponse.RetryNumDays)
            	         Console.WriteLine("STREET = " + RecurResponse.Street)
            	         Console.WriteLine("ZIP = " + RecurResponse.Zip)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringModifyTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             modify action.
             </summary>
             <remarks> 
             RecurringModifyTransaction is used to modify any profile value by 
             sending any subset of the profile parameters, including an Optional Transaction.
             The Modify action is useful, for example, when an inactive customer wishes to
             restart payments using a new valid credit card. The Modify action changes a
             profile’s STATUS to active but does not change the START date.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.ProfileName = "PayPal Inc.";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Modify Transaction.
            	RecurringModifyTransaction Trans = new RecurringModifyTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	RecurInfo.OrigProfileId = "RT0000001350"
            	RecurInfo.ProfileName = "PayPal Inc."
            	'/////////////////////////////////////////////////////////////////
            
            	' Create a new Recurring Modify Transaction.
            	Dim Trans As RecurringModifyTransaction = New RecurringModifyTransaction(User,
            						Connection, RecurInfo, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringModifyTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringModifyTransaction is used to modify any profile value by 
             sending any subset of the profile parameters, including an Optional Transaction.
             The Modify action is useful, for example, when an inactive customer wishes to
             restart payments using a new valid credit card. The Modify action changes a
             profile’s STATUS to active but does not change the START date.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.ProfileName = "PayPal Inc.";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Modify Transaction.
            	RecurringModifyTransaction Trans = new RecurringModifyTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	RecurInfo.OrigProfileId = "RT0000001350"
            	RecurInfo.ProfileName = "PayPal Inc."
            	'/////////////////////////////////////////////////////////////////
            
            	' Create a new Recurring Modify Transaction.
            	Dim Trans As RecurringModifyTransaction = New RecurringModifyTransaction(User,
            						Connection, RecurInfo, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringModifyTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringModifyTransaction is used to modify any profile value by 
             sending any subset of the profile parameters, including an Optional Transaction.
             The Modify action is useful, for example, when an inactive customer wishes to
             restart payments using a new valid credit card. The Modify action changes a
             profile’s STATUS to active but does not change the START date.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.ProfileName = "PayPal Inc.";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Modify Transaction.
            	RecurringModifyTransaction Trans = new RecurringModifyTransaction(
            		User, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	RecurInfo.OrigProfileId = "RT0000001350"
            	RecurInfo.ProfileName = "PayPal Inc."
            	'/////////////////////////////////////////////////////////////////
            
            	' Create a new Recurring Modify Transaction.
            	Dim Trans As RecurringModifyTransaction = New RecurringModifyTransaction(User,
            						RecurInfo, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringModifyTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>		
             <remarks> 
             RecurringModifyTransaction is used to modify any profile value by 
             sending any subset of the profile parameters, including an Optional Transaction.
             The Modify action is useful, for example, when an inactive customer wishes to
             restart payments using a new valid credit card. The Modify action changes a
             profile’s STATUS to active but does not change the START date.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.ProfileName = "PayPal Inc.";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Modify Transaction.
            	RecurringModifyTransaction Trans = new RecurringModifyTransaction(
            		User, Connection, RecurInfo, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	RecurInfo.OrigProfileId = "RT0000001350"
            	RecurInfo.ProfileName = "PayPal Inc."
            	'/////////////////////////////////////////////////////////////////
            
            	' Create a new Recurring Modify Transaction.
            	Dim Trans As RecurringModifyTransaction = New RecurringModifyTransaction(User,
            						Connection, RecurInfo, Inv, Tender, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringModifyTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>		
             <remarks> 
             RecurringModifyTransaction is used to modify any profile value by 
             sending any subset of the profile parameters, including an Optional Transaction.
             The Modify action is useful, for example, when an inactive customer wishes to
             restart payments using a new valid credit card. The Modify action changes a
             profile’s STATUS to active but does not change the START date.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.ProfileName = "PayPal Inc.";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Modify Transaction.
            	RecurringModifyTransaction Trans = new RecurringModifyTransaction(
            		User, RecurInfo, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	Dim RecurInfo As RecurringInfo = New RecurringInfo
            	RecurInfo.OrigProfileId = "RT0000001350"
            	RecurInfo.ProfileName = "PayPal Inc."
            	'/////////////////////////////////////////////////////////////////
            
            	' Create a new Recurring Modify Transaction.
            	Dim Trans As RecurringModifyTransaction = New RecurringModifyTransaction(User,
            						RecurInfo, Inv, Tender, PayflowUtility.RequestId)
            
            	' Submit the transaction.
            	Dim Resp As Response = Trans.SubmitTransaction()
            
            	If Not Resp Is Nothing Then
            	    ' Get the Transaction Response parameters.
            	    Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	    If Not TrxnResponse Is Nothing Then
            	        Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	    End If
            
            	    ' Get the Recurring Response parameters.
            	    Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	    If Not RecurResponse Is Nothing Then
            	        Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	        Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	    End If
            	End If
            
            	' Get the Context and check for any contained SDK specific errors.
            	Dim Ctx As Context = Resp.TransactionContext
            	If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	    Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	End If
            
            
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringPaymentTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             payment action.
             </summary>
             <remarks> 
             RecurringPaymentTransaction action performs a real-time retry on
             a transaction that is in the retry state. The response string is similar 
             to the string for Optional transactions, except that, upon approval, 
             the profile is updated to reflect the successful retry.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.PaymentNum = "01012009";
            
            	// Create a new Invoice data object with the Amount, Billing Address etc. details.
            	Invoice Inv = new Invoice();
            
            	// Set Amount.
            	Currency Amt = new Currency(new decimal(25.12));
            	Inv.Amt = Amt;
            	Inv.PoNum = "PO12345";
            	Inv.InvNum = "INV12345";
            
            	// Set the Billing Address details.
            	BillTo Bill = new BillTo();
            	Bill.BillToStreet = "123 Main St.";
            	Bill.BillToZip = "12345";
            	Inv.BillTo = Bill;
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Payment Transaction.
            	RecurringPaymentTransaction Trans = new RecurringPaymentTransaction(
            		User, Connection, RecurInfo, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 RecurInfo.PaymentNum = "01012009"
            
            	 ' Create a new Invoice data object with the Amount, Billing Address etc. details.
            	 Dim Inv As Invoice = New Invoice
            
            	 ' Set Amount.
            	 Dim Amt As Currency = New Currency(New Decimal(25.12))
            	 Inv.Amt = Amt
            	 Inv.PoNum = "PO12345"
            	 Inv.InvNum = "INV12345"
            
            	 ' Set the Billing Address details.
            	 Dim Bill As BillTo = New BillTo
            	 Bill.BillToStreet = "123 Main St."
            	 Bill.BillToZip = "12345"
            	 Inv.BillTo = Bill
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Payment Transaction.
            	 Dim Trans As RecurringPaymentTransaction = New RecurringPaymentTransaction(User,
            	 	Connection, RecurInfo, Inv, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringPaymentTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringPaymentTransaction action performs a real-time retry on
             a transaction that is in the retry state. The response string is similar 
             to the string for Optional transactions, except that, upon approval, 
             the profile is updated to reflect the successful retry.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.PaymentNum = "01012009";
            
            	// Create a new Invoice data object with the Amount, Billing Address etc. details.
            	Invoice Inv = new Invoice();
            
            	// Set Amount.
            	Currency Amt = new Currency(new decimal(25.12));
            	Inv.Amt = Amt;
            	Inv.PoNum = "PO12345";
            	Inv.InvNum = "INV12345";
            
            	// Set the Billing Address details.
            	BillTo Bill = new BillTo();
            	Bill.BillToStreet = "123 Main St.";
            	Bill.BillToZip = "12345";
            	Inv.BillTo = Bill;
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Payment Transaction.
            	RecurringPaymentTransaction Trans = new RecurringPaymentTransaction(
            		User, Connection, RecurInfo, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 RecurInfo.PaymentNum = "01012009"
            
            	 ' Create a new Invoice data object with the Amount, Billing Address etc. details.
            	 Dim Inv As Invoice = New Invoice
            
            	 ' Set Amount.
            	 Dim Amt As Currency = New Currency(New Decimal(25.12))
            	 Inv.Amt = Amt
            	 Inv.PoNum = "PO12345"
            	 Inv.InvNum = "INV12345"
            
            	 ' Set the Billing Address details.
            	 Dim Bill As BillTo = New BillTo
            	 Bill.BillToStreet = "123 Main St."
            	 Bill.BillToZip = "12345"
            	 Inv.BillTo = Bill
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Payment Transaction.
            	 Dim Trans As RecurringPaymentTransaction = New RecurringPaymentTransaction(User,
            	 	Connection, RecurInfo, Inv, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringPaymentTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringPaymentTransaction action performs a real-time retry on
             a transaction that is in the retry state. The response string is similar 
             to the string for Optional transactions, except that, upon approval, 
             the profile is updated to reflect the successful retry.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	RecurInfo.PaymentNum = "01012009";
            
            	// Create a new Invoice data object with the Amount, Billing Address etc. details.
            	Invoice Inv = new Invoice();
            
            	// Set Amount.
            	Currency Amt = new Currency(new decimal(25.12));
            	Inv.Amt = Amt;
            	Inv.PoNum = "PO12345";
            	Inv.InvNum = "INV12345";
            
            	// Set the Billing Address details.
            	BillTo Bill = new BillTo();
            	Bill.BillToStreet = "123 Main St.";
            	Bill.BillToZip = "12345";
            	Inv.BillTo = Bill;
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Payment Transaction.
            	RecurringPaymentTransaction Trans = new RecurringPaymentTransaction(
            		User, RecurInfo, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            
            	</code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 RecurInfo.PaymentNum = "01012009"
            
            	 ' Create a new Invoice data object with the Amount, Billing Address etc. details.
            	 Dim Inv As Invoice = New Invoice
            
            	 ' Set Amount.
            	 Dim Amt As Currency = New Currency(New Decimal(25.12))
            	 Inv.Amt = Amt
            	 Inv.PoNum = "PO12345"
            	 Inv.InvNum = "INV12345"
            
            	 ' Set the Billing Address details.
            	 Dim Bill As BillTo = New BillTo
            	 Bill.BillToStreet = "123 Main St."
            	 Bill.BillToZip = "12345"
            	 Inv.BillTo = Bill
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring Payment Transaction.
            	 Dim Trans As RecurringPaymentTransaction = New RecurringPaymentTransaction(User,
            	 	RecurInfo, Inv, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringReActivateTransaction">
             <summary>
             This class is used to perform a recurring transaction with
             reactivate action.
             </summary>
             <remarks> 
             RecurringReactivatetransaction reactivates a profile with inactive STATUS.
             (Profiles can be deactivated for the following reasons: the term has completed, 
             the profile reached maximum allowable payment failures, or the profile is canceled.) 
             Reactivation gives the option to alter any profile parameter, including an 
             Optional Transaction and a new start date must be specified .
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring ReActivate Transaction.
            	RecurringReActivateTransaction Trans = new RecurringReActivateTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 ' The date that the first payment will be processed.
            	 ' This will be of the format mmddyyyy.
            	 RecurInfo.Start = "01012009"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring ReActivate Transaction.
            	 Dim Trans As RecurringReActivateTransaction = New RecurringReActivateTransaction(User,
            	 		Connection, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringReActivateTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>	
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringReactivatetransaction reactivates a profile with inactive STATUS.
             (Profiles can be deactivated for the following reasons: the term has completed, 
             the profile reached maximum allowable payment failures, or the profile is canceled.) 
             Reactivation gives the option to alter any profile parameter, including an 
             Optional Transaction and a new start date must be specified .
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring ReActivate Transaction.
            	RecurringReActivateTransaction Trans = new RecurringReActivateTransaction(
            		User, Connection, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 ' The date that the first payment will be processed.
            	 ' This will be of the format mmddyyyy.
            	 RecurInfo.Start = "01012009"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring ReActivate Transaction.
            	 Dim Trans As RecurringReActivateTransaction = New RecurringReActivateTransaction(User,
            	 		Connection, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringReActivateTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringReactivatetransaction reactivates a profile with inactive STATUS.
             (Profiles can be deactivated for the following reasons: the term has completed, 
             the profile reached maximum allowable payment failures, or the profile is canceled.) 
             Reactivation gives the option to alter any profile parameter, including an 
             Optional Transaction and a new start date must be specified .
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring ReActivate Transaction.
            	RecurringReActivateTransaction Trans = new RecurringReActivateTransaction(
            		User, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 ' The date that the first payment will be processed.
            	 ' This will be of the format mmddyyyy.
            	 RecurInfo.Start = "01012009"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring ReActivate Transaction.
            	 Dim Trans As RecurringReActivateTransaction = New RecurringReActivateTransaction(User,
            	 		 RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringReActivateTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringReactivatetransaction reactivates a profile with inactive STATUS.
             (Profiles can be deactivated for the following reasons: the term has completed, 
             the profile reached maximum allowable payment failures, or the profile is canceled.) 
             Reactivation gives the option to alter any profile parameter, including an 
             Optional Transaction and a new start date must be specified .
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring ReActivate Transaction.
            	RecurringReActivateTransaction Trans = new RecurringReActivateTransaction(
            		User, Connection, Inv, Tender, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 ' The date that the first payment will be processed.
            	 ' This will be of the format mmddyyyy.
            	 RecurInfo.Start = "01012009"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring ReActivate Transaction.
            	 Dim Trans As RecurringReActivateTransaction = New RecurringReActivateTransaction(User,
            	 		Connection, Inv, Tender, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringReActivateTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RecurringInfo">RecurringInfo object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             RecurringReactivatetransaction reactivates a profile with inactive STATUS.
             (Profiles can be deactivated for the following reasons: the term has completed, 
             the profile reached maximum allowable payment failures, or the profile is canceled.) 
             Reactivation gives the option to alter any profile parameter, including an 
             Optional Transaction and a new start date must be specified .
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	RecurInfo.OrigProfileId = "RT0000001350";
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring ReActivate Transaction.
            	RecurringReActivateTransaction Trans = new RecurringReActivateTransaction(
            		User, Inv, Tender, RecurInfo, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	 Dim RecurInfo As RecurringInfo = New RecurringInfo
            	 RecurInfo.OrigProfileId = "RT0000001350"
            	 ' The date that the first payment will be processed.
            	 ' This will be of the format mmddyyyy.
            	 RecurInfo.Start = "01012009"
            	 '/////////////////////////////////////////////////////////////////
            
            	 ' Create a new Recurring ReActivate Transaction.
            	 Dim Trans As RecurringReActivateTransaction = New RecurringReActivateTransaction(User,
            	 		Inv, Tender, RecurInfo, PayflowUtility.RequestId)
            
            	 ' Submit the transaction.
            	 Dim Resp As Response = Trans.SubmitTransaction()
            
            	 If Not Resp Is Nothing Then
            	     ' Get the Transaction Response parameters.
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	     If Not TrxnResponse Is Nothing Then
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	     End If
            
            	     ' Get the Recurring Response parameters.
            	     Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	     If Not RecurResponse Is Nothing Then
            	         Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	         Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	     End If
            	 End If
            
            	 ' Get the Context and check for any contained SDK specific errors.
            	 Dim Ctx As Context = Resp.TransactionContext
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	 End If
            
            
            	</code>
            	</example>
        </member>
        <member name="T:PayPal.Payments.Transactions.RecurringTransaction">
             <summary>
             This is the base class of all different recurring action transactions.
             </summary> 
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Connection, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Connection, Inv, Tender, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.RecurringTransaction.mRecurringInfo">
            <summary>
            Holds the Recurring Info object
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor">
            <summary>
            private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Connection, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Connection, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice Object</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Connection, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Connection, Inv, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice Object</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Inv, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Inv, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender" >Tender</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Connection, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Connection, Inv, Tender, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.#ctor(System.String,PayPal.Payments.DataObjects.RecurringInfo,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="Action" >Action, type of recurring transaction</param>
             <param name="RecurringInfo">Recurring Info object.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender" >Tender</param>
             <param name="RequestId">Request Id</param>
             <remarks>
             Each derived class of RecurringTransaction specifies a unique action
             transaction. This class can also be directly used to perform a recurring
             transaction. Alternatively, a new class can be extended from this to
             create a specific recurring action transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	//Set the Recurring related information.
            	RecurringInfo RecurInfo = new RecurringInfo();
            	// The date that the first payment will be processed.
            	// This will be of the format mmddyyyy.
            	RecurInfo.Start = "01012009";
            	RecurInfo.ProfileName = "PayPal";
            	// Specifies how often the payment occurs. All PAYPERIOD values must use
            	// capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	// QTER / SMYR / YEAR
            	RecurInfo.PayPeriod = "WEEK";
            	///////////////////////////////////////////////////////////////////
            
            	// Create a new Recurring Transaction.
            	RecurringTransaction Trans = new RecurringTransaction("A", RecurInfo,
            		User, Inv, Tender, PayflowUtility.RequestId);
            
            	// Submit the transaction.
            	Response Resp = Trans.SubmitTransaction();
            
            	if (Resp != null)
            	{
            		// Get the Transaction Response parameters.
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            		if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            		}
            
            		// Get the Recurring Response parameters.
            		RecurringResponse RecurResponse = Resp.RecurringResponse;
            		if (RecurResponse != null)
            		{
            			Console.WriteLine("RPREF = " + RecurResponse.RPRef);
            			Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
            		}
            	}
            
            	// Get the Context and check for any contained SDK specific errors.
            	Context Ctx = Resp.TransactionContext;
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            	{
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            	}
            
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	'Set the Recurring related information.
            	  Dim RecurInfo As RecurringInfo = New RecurringInfo
            	  ' The date that the first payment will be processed.
            	  ' This will be of the format mmddyyyy.
            	  RecurInfo.Start = "01012009"
            	  RecurInfo.ProfileName = "PayPal"
            	  ' Specifies how often the payment occurs. All PAYPERIOD values must use
            	  ' capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
            	  ' QTER / SMYR / YEAR
            	  RecurInfo.PayPeriod = "WEEK"
            	  '/////////////////////////////////////////////////////////////////
            
            	  ' Create a new Recurring Transaction.
            	  Dim Trans As RecurringTransaction = New RecurringTransaction("A", RecurInfo,
            	 	User, Inv, Tender, PayflowUtility.RequestId)
            
            	  ' Submit the transaction.
            	  Dim Resp As Response = Trans.SubmitTransaction()
            
            	  If Not Resp Is Nothing Then
            	      ' Get the Transaction Response parameters.
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            	      If Not TrxnResponse Is Nothing Then
            	          Console.WriteLine("RESULT = " + TrxnResponse.Result)
            	          Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            	      End If
            
            	      ' Get the Recurring Response parameters.
            	      Dim RecurResponse As RecurringResponse = Resp.RecurringResponse
            	      If Not RecurResponse Is Nothing Then
            	          Console.WriteLine("RPREF = " + RecurResponse.RPRef)
            	          Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId)
            	      End If
            	  End If
            
            	  ' Get the Context and check for any contained SDK specific errors.
            	  Dim Ctx As Context = Resp.TransactionContext
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())
            	  End If
            
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.RecurringTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.ReferenceTransaction">
            <summary>
            This class is used as base class for all reference transactions.
            </summary>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="F:PayPal.Payments.Transactions.ReferenceTransaction.mOrigId">
            <summary>
            Original Transaction Id. Mandatory for any reference transaction.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.ReferenceTransaction.mOrigPpref">
            <summary>
            Original PayPal Transaction Id. 
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.ReferenceTransaction.OrigPpref">
            <summary>
            Gets, Sets OrigPpref
            </summary>
            <remarks>
            <para>Maps to Payflow Parameter:</para>
            <code>ORIGPPREF</code>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor">
            <summary>
            protected Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="PayflowConnectionData">Connection credentials object.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="Tender">Tender object.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="TrxType">Transaction Type</param>
            <param name="OrigId">Original Transaction Id.</param>
            <param name="UserInfo">User Info object populated with user credentials.</param>
            <param name="Invoice">Invoice object.</param>
            <param name="Tender">Tender object.</param>
            <param name="RequestId">Request Id</param>
            <remarks>This class can be derived to create a new reference transaction 
            or can be used as is to submit a new type of reference transaction.
            <para>A reference transaction is a transaction which always takes
             the PNRef of a previously submitted transaction.</para>
            </remarks>
        </member>
        <member name="M:PayPal.Payments.Transactions.ReferenceTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.SaleTransaction">
             <summary>
             This class is used to create and perform a 
             Sale Transaction.
             </summary>
             <example>This example shows how to create and perform a sale transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
             	//Create a new Sale Transaction
             	SaleTransaction Trans = new SaleTransaction(
            													UserInfo,
            													PayflowConnectionData,
            													Invoice,
            													Tender, 
            													RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Sale Transaction
            		Dim Trans as New SaleTransaction(
            										UserInfo,
            										PayflowConnectionData,
            										Invoice,
            										Tender, 
            										RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="F:PayPal.Payments.Transactions.SaleTransaction.mOrigId">
            <summary>
            Original transaction id.
            The ORIGID is the PNREF no. for a previous transaction.
            OrigId is used in case Authorization transaction is a Follow-On transaction.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.SaleTransaction.mCreateSecureToken">
            <summary>
            Secure token request.
            Used to store sensitive data prior to making a call to the hosted page.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.SaleTransaction.mSecureTokenId">
            <summary>
            Secure token id.
            Id used to generate a secure token.  Must be sent with the token when calling the hosted pages.
            This can be any random GUID but must be unique.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.SaleTransaction.OrigId">
             <summary>
             Gets, Sets OrigId. This property is used to perform a 
             reference Sale Transaction.
             </summary>
             <remarks>A reference Sale transaction is a sale transaction which copies the transaction data,
              except the Account Number, Expiration Date and Swipe data from a previous transaction.
              PNRef of this previous transaction needs to be set in this OrigId property.</remarks>
             <remarks>A successful Sale needs to be captured using a capture transaction.</remarks>
             <example>This example shows how to create and perform a reference sale transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
             	//Create a new Sale Transaction
             	SaleTransaction Trans = new SaleTransaction(
            													UserInfo,
            													PayflowConnectionData,
            													Invoice,
            													Tender, 
            													RequestId);
            													
            		// Set the OrigId to refer to a previous transaction.
            		Trans.OrigId = "V64A0A07BD24";		
            	
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Sale Transaction
            		Dim Trans as New SaleTransaction(
            										UserInfo,
            										PayflowConnectionData,
            										Invoice,
            										Tender, 
            										RequestId)
            										
            										
            		' Set the OrigId to refer to a previous transaction.
            		Trans.OrigId = "V64A0A07BD24"
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="P:PayPal.Payments.Transactions.SaleTransaction.CreateSecureToken">
             <remarks>Use a secure token to send non-credit card transaction data to the Payflow server for storage in
             a way that can’t be intercepted and manipulated maliciously.The secure token must be used with the hosted 
             checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.
             
             NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants 
             can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token, 
             these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique, 
             36-character token ID and set CREATESECURETOKEN=Y in a request to the Payflow server. The Payflow server associates your 
             ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction 
             data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger 
             the Payflow server to retrieve your data and display it for buyer approval. 
             
             See the DOSecureTokenAuth sample for more information.
             <example>This example shows how to create a SecureToken and SecureTokenId.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
             	// Since we are using the hosted payment pages, you will not be sending the credit card data with the 
                 // Secure Token Request.  You just send all other 'sensitive' data within this request and when you
                 // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
                 // and the SECURETOKENID that was created and used in the request.
            
                 // Create a new Secure Token Authorization Transaction.  Even though this example is performing
                 // an authorization, you can create a secure token using SaleTransction too.  Only Authorization and Sale
                 // type transactions are permitted.
            		//Create a new Authorization Transaction.
            		 AuthorizationTransaction Trans = new AuthorizationTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		// Set the flag to create a Secure Token.
            		Trans.CreateSecureToken = "Y";
            		// The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to generate 
            		// a random id, but any means to create an id can be used.
            		Trans.SecureTokenId = PayflowUtility.RequestId;
            		
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            		{
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            			Console.WriteLine("SECURETOKEN = " + TrxnResponse.SecureToken);
            			Console.WriteLine("SECURETOKENID = " + TrxnResponse.SecureTokenId);
            			// If value is true, then the Request ID has not been changed and the original response
            			// of the original transaction is returned. 
            			Console.WriteLine("DUPLICATE = " + TrxnResponse.Duplicate);
            		}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null ++ Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
                 ' Since we are using the hosted payment pages, you will not be sending the credit card data with the 
                 ' Secure Token Request.  You just send all other 'sensitive' data within this request and when you
                 ' call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
                 ' and the SECURETOKENID that was created and used in the request.
                 
                 ' Create a new Secure Token Authorization Transaction.  Even though this example is performing
                 ' an authorization, you can create a secure token using SaleTransction too.  Only Authorization and Sale
                 ' type transactions are permitted.
            		'Create a new Authorization Transaction.
            		Dim Trans as New AuthorizationTransaction(UserInfo, PayflowConnectionData, Invoice, Tender, RequestId)
            		' See the CreateSecureToken parameter to yes "Y", to flag this transaction request to create a secure token.
            		Trans.CreateSecureToken = "Y"
            		
                 ' The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to 
                 ' generate a random id, but any means to create an id can be used.
                 Trans.SecureTokenId = PayflowUtility.RequestId
            		
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
                        Console.WriteLine("RESULT = " + TrxnResponse.Result.ToString)
                        Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
                        Console.WriteLine("SECURETOKEN = " + TrxnResponse.SecureToken)
                        Console.WriteLine("SECURETOKENID = " + TrxnResponse.SecureTokenId)
                        ' If value is true, then the Request ID has not been changed and the original response
                        ' of the original transaction is returned. 
                        Console.WriteLine("DUPLICATE = " + TrxnResponse.Duplicate)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
             </remarks>
            <summary>
            Gets, Sets CreateSecureToken. This property is used to create a Secure Token.
            </summary>
        </member>
        <member name="P:PayPal.Payments.Transactions.SaleTransaction.SecureTokenId">
            <summary>
            Gets, Sets SecureTokenId. This property is used when calling the hosted page.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.SaleTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.SaleTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor. 
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
             <example>This example shows how to create and perform a sale transaction.
             <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            				
             	//Create a new Sale Transaction
             	SaleTransaction Trans = new SaleTransaction(
            													UserInfo,
            													PayflowConnectionData,
            													Invoice,
            													Tender, 
            													RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            		
            		'Create a new Sale Transaction
            		Dim Trans as New SaleTransaction(
            										UserInfo,
            										PayflowConnectionData,
            										Invoice,
            										Tender, 
            										RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.SaleTransaction.#ctor(PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor. 
             </summary>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object </param>
             <param name="RequestId">Request Id</param>
             <example>This example shows how to create and perform a sale transaction.
            <code lang="C#" escaped="false">
            		..........
            		..........
            		//Populate required data objects.
            		..........
            		..........
            		
            		// Create a new Sale Transaction.
            		SaleTransaction Trans = new SaleTransaction(
            												UserInfo,
            												PayflowConnectionData,
            												Invoice,
            												Tender, 
            												RequestId);
            		//Submit the transaction.
            		Trans.SubmitTransaction();
            			
            		// Get the Response.
            		Response Resp = Trans.Response;
            		if (Resp != null)
            		{
            			// Get the Transaction Response parameters.
            			TransactionResponse TrxnResponse =  Resp.TransactionResponse;
            			if (TrxnResponse != null)
            			{
            				Console.WriteLine("RESULT = " + TrxnResponse.Result);
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref);
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr);
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip);
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS);
            			}
            			// Get the Fraud Response parameters.
            			FraudResponse FraudResp =  Resp.FraudResponse;
            			if (FraudResp != null)
            			{
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg);
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg);
            			}
            		}
            		// Get the Context and check for any contained SDK specific errors.
            		Context Ctx = Resp.TransactionContext;
            		if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
            		{
            			Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
            		}	
            </code>
            <code lang="Visual Basic" escaped="false">
            		..........
            		..........
            		'Populate required data objects.
            		..........
            		..........
            				
             'Create a new Sale Transaction.
            	Dim Trans as New SaleTransaction(
            									UserInfo,
            									PayflowConnectionData,
            									Invoice,
            									Tender, 
            									RequestId)
            		' Submit the transaction.
            		Trans.SubmitTransaction()
            
            		' Get the Response.
            		Dim Resp As Response = Trans.Response
            		
            		If Not Resp Is Nothing Then
            		' Get the Transaction Response parameters.
            		
            			Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse
            			
            			If Not TrxnResponse Is Nothing Then
            				Console.WriteLine("RESULT = " + TrxnResponse.Result)
            				Console.WriteLine("PNREF = " + TrxnResponse.Pnref)
            				Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)
            				Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)
            				Console.WriteLine("AVSADDR = " + TrxnResponse.AVSAddr)
            				Console.WriteLine("AVSZIP = " + TrxnResponse.AVSZip)
            				Console.WriteLine("IAVS = " + TrxnResponse.IAVS)
            			End If
            
            			' Get the Fraud Response parameters.
            			Dim FraudResp As FraudResponse = Resp.FraudResponse
            			If Not FraudResp Is Nothing Then
            				Console.WriteLine("PREFPSMSG = " + FraudResp.PreFpsMsg)
            				Console.WriteLine("POSTFPSMSG = " + FraudResp.PostFpsMsg)
            			End If
            		End If
            
            		' Get the Context and check for any contained SDK specific errors.
            		Dim Ctx As Context = Resp.TransactionContext
            		
            		If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then
            			Console.WriteLine(Constants.vbLf + "Errors = " + Ctx.ToString())
            		End If												
             </code>
             </example>
        </member>
        <member name="M:PayPal.Payments.Transactions.SaleTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.VoiceAuthTransaction">
             <summary>
             This class is used to perform a voice authorization transaction.
             </summary>
             <remarks> 
             Some transactions cannot be authorized over the Internet (for example, high dollar
             amounts)—processing networks generate Referral (Result Code 13) transactions.
             In these situations, contact the customer service department of the 
             merchant bank and provide the payment information as requested. 
             If the transaction is approved, the bank provides a voice authorization 
             code (AUTHCODE) for the transaction. This must be included as AUTHCODE 
             as part of a Voice Authorization transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Voice Auth Transaction.                                                           
            	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI",                    
            		User, Connection, Inv, Card, PayflowUtility.RequestId);                                
            	                                                                                                                    
            	// Submit the transaction.                                                                                
            	Response Resp = Trans.SubmitTransaction();                                                   
            	                                                                                                                    
            	if (Resp != null)                                                                                              
            	{                                                                                                                   
            		// Get the Transaction Response parameters.                                            
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;            
            		if (TrxnResponse != null)                                                                         
            		{                                                                                                           
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                   
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                      
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);            
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);        
            		}                                                                                                           
            	}                                                                                                                   
            	                                                                                                                    
            	// Get the Context and check for any contained SDK specific errors.                   
            	Context Ctx = Resp.TransactionContext;                                                          
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                       
            	{                                                                                                                   
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());    
            	}                                                                                                                   
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	 ' Create a new Voice Auth Transaction.                                                                
            	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", User,    
            		Connection, Inv, Card, PayflowUtility.RequestId)                                          
            	                                                                                                                         
            	 ' Submit the transaction.                                                                                     
            	 Dim Resp As Response = Trans.SubmitTransaction()                                             
            	                                                                                                                         
            	 If Not Resp Is Nothing Then                                                                                 
            	     ' Get the Transaction Response parameters.                                                     
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse           
            	     If Not TrxnResponse Is Nothing Then                                                               
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)                                
            	         Console.WriteLine("PNREF = " + TrxnResponse.Pnref)                                   
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                         
            	         Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)                      
            	     End If                                                                                                            
            	 End If                                                                                                                
            	                                                                                                                         
            	 ' Get the Context and check for any contained SDK specific errors.                         
            	 Dim Ctx As Context = Resp.TransactionContext                                                    
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                  
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())             
            	 End If                                                                                                                
            
            	</code>
            	</example>
        </member>
        <member name="F:PayPal.Payments.Transactions.VoiceAuthTransaction.mAuthCode">
            <summary>
            Holds AuthCode, Authorization code obtain via another means; i.e. phone.
            </summary>
        </member>
        <member name="F:PayPal.Payments.Transactions.VoiceAuthTransaction.mAuthDate">
            <summary>
            Holds AuthDate, Date the AuthCode was obtained.
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor">
            <summary>
            Private Constructor. This prevents creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             Some transactions cannot be authorized over the Internet (for example, high dollar
             amounts)—processing networks generate Referral (Result Code 13) transactions.
             In these situations, contact the customer service department of the 
             merchant bank and provide the payment information as requested. 
             If the transaction is approved, the bank provides a voice authorization 
             code (AUTHCODE) for the transaction. This must be included as AUTHCODE 
             as part of a Voice Authorization transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Voice Authorization Transaction.                                                           
            	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI",                    
            		User, Connection, Inv, Card, PayflowUtility.RequestId);                                
            	                                                                                                                    
            	// Submit the transaction.                                                                                
            	Response Resp = Trans.SubmitTransaction();                                                   
            	                                                                                                                    
            	if (Resp != null)                                                                                              
            	{                                                                                                                   
            		// Get the Transaction Response parameters.                                            
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;            
            		if (TrxnResponse != null)                                                                         
            		{                                                                                                           
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                   
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                      
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);            
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);        
            		}                                                                                                           
            	}                                                                                                                   
            	                                                                                                                    
            	// Get the Context and check for any contained SDK specific errors.                   
            	Context Ctx = Resp.TransactionContext;                                                          
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                       
            	{                                                                                                                   
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());    
            	}                                                                                                                   
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	 ' Create a new Voice Authorization Transaction.                                                                
            	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", User,    
            		Connection, Inv, Card, PayflowUtility.RequestId)                                          
            	                                                                                                                         
            	 ' Submit the transaction.                                                                                     
            	 Dim Resp As Response = Trans.SubmitTransaction()                                             
            	                                                                                                                         
            	 If Not Resp Is Nothing Then                                                                                 
            	     ' Get the Transaction Response parameters.                                                     
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse           
            	     If Not TrxnResponse Is Nothing Then                                                               
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)                                
            	         Console.WriteLine("PNREF = " + TrxnResponse.Pnref)                                   
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                         
            	         Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)                      
            	     End If                                                                                                            
            	 End If                                                                                                                
            	                                                                                                                         
            	 ' Get the Context and check for any contained SDK specific errors.                         
            	 Dim Ctx As Context = Resp.TransactionContext                                                    
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                  
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())             
            	 End If                                                                                                                
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
             <param name="AuthDate">Date the AuthCode was obtained.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             Some transactions cannot be authorized over the Internet (for example, high dollar
             amounts)—processing networks generate Referral (Result Code 13) transactions.
             In these situations, contact the customer service department of the 
             merchant bank and provide the payment information as requested. 
             If the transaction is approved, the bank provides a voice authorization 
             code (AUTHCODE) for the transaction. This must be included as AUTHCODE 
             as part of a Voice Authorization transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Voice Authorization Transaction.                                                           
            	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI", "08102020",                 
            		User, Connection, Inv, Card, PayflowUtility.RequestId);                                
            	                                                                                                                    
            	// Submit the transaction.                                                                                
            	Response Resp = Trans.SubmitTransaction();                                                   
            	                                                                                                                    
            	if (Resp != null)                                                                                              
            	{                                                                                                                   
            		// Get the Transaction Response parameters.                                            
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;            
            		if (TrxnResponse != null)                                                                         
            		{                                                                                                           
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                   
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                      
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);            
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);        
            		}                                                                                                           
            	}                                                                                                                   
            	                                                                                                                    
            	// Get the Context and check for any contained SDK specific errors.                   
            	Context Ctx = Resp.TransactionContext;                                                          
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                       
            	{                                                                                                                   
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());    
            	}                                                                                                                   
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	 ' Create a new Voice Authorization Transaction.                                                                
            	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", "08102020",
            	 User, Connection, Inv, Card, PayflowUtility.RequestId)                                          
            	                                                                                                                         
            	 ' Submit the transaction.                                                                                     
            	 Dim Resp As Response = Trans.SubmitTransaction()                                             
            	                                                                                                                         
            	 If Not Resp Is Nothing Then                                                                                 
            	     ' Get the Transaction Response parameters.                                                     
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse           
            	     If Not TrxnResponse Is Nothing Then                                                               
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)                                
            	         Console.WriteLine("PNREF = " + TrxnResponse.Pnref)                                   
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                         
            	         Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)                      
            	     End If                                                                                                            
            	 End If                                                                                                                
            	                                                                                                                         
            	 ' Get the Context and check for any contained SDK specific errors.                         
            	 Dim Ctx As Context = Resp.TransactionContext                                                    
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                  
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())             
            	 End If                                                                                                                
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="Tender">Tender object such as  Card Tender.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             Some transactions cannot be authorized over the Internet (for example, high dollar
             amounts)—processing networks generate Referral (Result Code 13) transactions.
             In these situations, contact the customer service department of the 
             merchant bank and provide the payment information as requested. 
             If the transaction is approved, the bank provides a voice authorization 
             code (AUTHCODE) for the transaction. This must be included as AUTHCODE 
             as part of a Voice Authorization transaction.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Voice Authorization Transaction.                                                           
            	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI",                    
            		User, Inv, Card, PayflowUtility.RequestId);                                
            	                                                                                                                    
            	// Submit the transaction.                                                                                
            	Response Resp = Trans.SubmitTransaction();                                                   
            	                                                                                                                    
            	if (Resp != null)                                                                                              
            	{                                                                                                                   
            		// Get the Transaction Response parameters.                                            
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;            
            		if (TrxnResponse != null)                                                                         
            		{                                                                                                           
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                   
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                      
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);            
            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);        
            		}                                                                                                           
            	}                                                                                                                   
            	                                                                                                                    
            	// Get the Context and check for any contained SDK specific errors.                   
            	Context Ctx = Resp.TransactionContext;                                                          
            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                       
            	{                                                                                                                   
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());    
            	}                                                                                                                   
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	 ' Create a new Voice Auth Transaction.                                                                
            	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", User,    
            		Inv, Card, PayflowUtility.RequestId)                                          
            	                                                                                                                         
            	 ' Submit the transaction.                                                                                     
            	 Dim Resp As Response = Trans.SubmitTransaction()                                             
            	                                                                                                                         
            	 If Not Resp Is Nothing Then                                                                                 
            	     ' Get the Transaction Response parameters.                                                     
            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse           
            	     If Not TrxnResponse Is Nothing Then                                                               
            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)                                
            	         Console.WriteLine("PNREF = " + TrxnResponse.Pnref)                                   
            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                         
            	         Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)                      
            	     End If                                                                                                            
            	 End If                                                                                                                
            	                                                                                                                         
            	 ' Get the Context and check for any contained SDK specific errors.                         
            	 Dim Ctx As Context = Resp.TransactionContext                                                    
            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                  
            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())             
            	 End If                                                                                                                
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.GenerateRequest">
            <summary>
            Generates the transaction request.
            </summary>
        </member>
        <member name="T:PayPal.Payments.Transactions.VoidTransaction">
             <summary>
             This class is used to perform a void transaction.
             </summary>
             <remarks> 
             The Void transaction prevents a transaction from being settled, but does
             not release the authorization (hold on funds) on the cardholder’s account. 
             Delayed Capture, Sale, Credit, Authorization, and Voice
             Authorization transactions can be voided. A Void transaction cannot be voided.
             The Void must occur prior to settlement.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Void Transaction.                                                                     
            	// The ORIGID is the PNREF no. for a previous transaction.                                 
            	VoidTransaction Trans = new VoidTransaction("V63A0A07BE5A",                         
            		User, Connection, PayflowUtility.RequestId);                                                 
            	                                                                                                                     
            	// Submit the transaction.                                                                                 
            	Response Resp = Trans.SubmitTransaction();                                                    
            	                                                                                                                     
            	if (Resp != null)                                                                                               
            	{                                                                                                                    
            		// Get the Transaction Response parameters.                                             
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;             
            		if (TrxnResponse != null)                                                                          
            		{                                                                                                            
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                    
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);             
            		}                                                                                                            
            	}                                                                                                                    
            	                                                                                                                     
            	// Get the Context and check for any contained SDK specific errors.                    
            	Context Ctx = Resp.TransactionContext;                                                           
            	if (Ctx != null  &amp;  &amp;  Ctx.getErrorCount() > 0)                                                        
            	{                                                                                                                    
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());     
            	}                                                                                                                    
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	  ' Create a new Void Transaction.                                                                    
            	  ' The ORIGID is the PNREF no. for a previous transaction.                                 
            		 Dim Trans As VoidTransaction = New VoidTransaction("V63A0A07BE5A",           
            	 User, Connection, PayflowUtility.RequestId)                                                    
            	                                                                                                                     
            	  ' Submit the transaction.                                                                                
            	  Dim Resp As Response = Trans.SubmitTransaction()                                        
            	                                                                                                                     
            	  If Not Resp Is Nothing Then                                                                            
            	      ' Get the Transaction Response parameters.                                                
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse      
            	      If Not TrxnResponse Is Nothing Then                                                          
            	          Console.WriteLine("RESULT = "  +  TrxnResponse.Result)                           
            	          Console.WriteLine("PNREF = "  +  TrxnResponse.Pnref)                              
            	          Console.WriteLine("RESPMSG = "  +  TrxnResponse.RespMsg)                    
            	      End If                                                                                                       
            	  End If                                                                                                           
            	                                                                                                                     
            	  ' Get the Context and check for any contained SDK specific errors.                    
            	  Dim Ctx As Context = Resp.TransactionContext                                               
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                             
            	      Console.WriteLine(Environment.NewLine  +  "Errors = "  +  Ctx.ToString())        
            	  End If                                                                                                           
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoidTransaction.#ctor">
            <summary>
            Private Constructor. This prevents
            creation of an empty Transaction object. 
            </summary>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoidTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             The Void transaction prevents a transaction from being settled, but does
             not release the authorization (hold on funds) on the cardholder’s account. 
             Delayed Capture, Sale, Credit, Authorization, and Voice
             Authorization transactions can be voided. A Void transaction cannot be voided.
             The Void must occur prior to settlement.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Void Transaction.                                                                     
            	// The ORIGID is the PNREF no. for a previous transaction.                                 
            	VoidTransaction Trans = new VoidTransaction("V63A0A07BE5A",                         
            		User, Connection, PayflowUtility.RequestId);                                                 
            	                                                                                                                     
            	// Submit the transaction.                                                                                 
            	Response Resp = Trans.SubmitTransaction();                                                    
            	                                                                                                                     
            	if (Resp != null)                                                                                               
            	{                                                                                                                    
            		// Get the Transaction Response parameters.                                             
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;             
            		if (TrxnResponse != null)                                                                          
            		{                                                                                                            
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                    
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);             
            		}                                                                                                            
            	}                                                                                                                    
            	                                                                                                                     
            	// Get the Context and check for any contained SDK specific errors.                    
            	Context Ctx = Resp.TransactionContext;                                                           
            	if (Ctx != null  &amp;  &amp;  Ctx.getErrorCount() > 0)                                                        
            	{                                                                                                                    
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());     
            	}                                                                                                                    
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	  ' Create a new Void Transaction.                                                                    
            	  ' The ORIGID is the PNREF no. for a previous transaction.                                 
            		 Dim Trans As VoidTransaction = New VoidTransaction("V63A0A07BE5A",           
            	 User, Connection, PayflowUtility.RequestId)                                                    
            	                                                                                                                     
            	  ' Submit the transaction.                                                                                
            	  Dim Resp As Response = Trans.SubmitTransaction()                                        
            	                                                                                                                     
            	  If Not Resp Is Nothing Then                                                                            
            	      ' Get the Transaction Response parameters.                                                
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse      
            	      If Not TrxnResponse Is Nothing Then                                                          
            	          Console.WriteLine("RESULT = "  +  TrxnResponse.Result)                           
            	          Console.WriteLine("PNREF = "  +  TrxnResponse.Pnref)                              
            	          Console.WriteLine("RESPMSG = "  +  TrxnResponse.RespMsg)                    
            	      End If                                                                                                       
            	  End If                                                                                                           
            	                                                                                                                     
            	  ' Get the Context and check for any contained SDK specific errors.                    
            	  Dim Ctx As Context = Resp.TransactionContext                                               
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                             
            	      Console.WriteLine(Environment.NewLine  +  "Errors = "  +  Ctx.ToString())        
            	  End If                                                                                                           
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoidTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             The Void transaction prevents a transaction from being settled, but does
             not release the authorization (hold on funds) on the cardholder’s account. 
             Delayed Capture, Sale, Credit, Authorization, and Voice
             Authorization transactions can be voided. A Void transaction cannot be voided.
             The Void must occur prior to settlement.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Void Transaction.                                                                     
            	// The ORIGID is the PNREF no. for a previous transaction.                                 
            	VoidTransaction Trans = new VoidTransaction("V63A0A07BE5A",                         
            		User, PayflowUtility.RequestId);                                                 
            	                                                                                                                     
            	// Submit the transaction.                                                                                 
            	Response Resp = Trans.SubmitTransaction();                                                    
            	                                                                                                                     
            	if (Resp != null)                                                                                               
            	{                                                                                                                    
            		// Get the Transaction Response parameters.                                             
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;             
            		if (TrxnResponse != null)                                                                          
            		{                                                                                                            
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                    
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);             
            		}                                                                                                            
            	}                                                                                                                    
            	                                                                                                                     
            	// Get the Context and check for any contained SDK specific errors.                    
            	Context Ctx = Resp.TransactionContext;                                                           
            	if (Ctx != null  &amp;  &amp;  Ctx.getErrorCount() > 0)                                                        
            	{                                                                                                                    
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());     
            	}                                                                                                                    
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	  ' Create a new Void Transaction.                                                                    
            	  ' The ORIGID is the PNREF no. for a previous transaction.                                 
            		 Dim Trans As VoidTransaction = New VoidTransaction("V63A0A07BE5A",           
            	 User, PayflowUtility.RequestId)                                                    
            	                                                                                                                     
            	  ' Submit the transaction.                                                                                
            	  Dim Resp As Response = Trans.SubmitTransaction()                                        
            	                                                                                                                     
            	  If Not Resp Is Nothing Then                                                                            
            	      ' Get the Transaction Response parameters.                                                
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse      
            	      If Not TrxnResponse Is Nothing Then                                                          
            	          Console.WriteLine("RESULT = "  +  TrxnResponse.Result)                           
            	          Console.WriteLine("PNREF = "  +  TrxnResponse.Pnref)                              
            	          Console.WriteLine("RESPMSG = "  +  TrxnResponse.RespMsg)                    
            	      End If                                                                                                       
            	  End If                                                                                                           
            	                                                                                                                     
            	  ' Get the Context and check for any contained SDK specific errors.                    
            	  Dim Ctx As Context = Resp.TransactionContext                                               
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                             
            	      Console.WriteLine(Environment.NewLine  +  "Errors = "  +  Ctx.ToString())        
            	  End If                                                                                                           
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoidTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="PayflowConnectionData">Connection credentials object.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             The Void transaction prevents a transaction from being settled, but does
             not release the authorization (hold on funds) on the cardholder’s account. 
             Delayed Capture, Sale, Credit, Authorization, and Voice
             Authorization transactions can be voided. A Void transaction cannot be voided.
             The Void must occur prior to settlement.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Void Transaction.                                                                     
            	// The ORIGID is the PNREF no. for a previous transaction.                                 
            	VoidTransaction Trans = new VoidTransaction("V63A0A07BE5A",                         
            		User, Connection, PayflowUtility.RequestId);                                                 
            	                                                                                                                     
            	// Submit the transaction.                                                                                 
            	Response Resp = Trans.SubmitTransaction();                                                    
            	                                                                                                                     
            	if (Resp != null)                                                                                               
            	{                                                                                                                    
            		// Get the Transaction Response parameters.                                             
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;             
            		if (TrxnResponse != null)                                                                          
            		{                                                                                                            
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                    
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);             
            		}                                                                                                            
            	}                                                                                                                    
            	                                                                                                                     
            	// Get the Context and check for any contained SDK specific errors.                    
            	Context Ctx = Resp.TransactionContext;                                                           
            	if (Ctx != null  &amp;  &amp;  Ctx.getErrorCount() > 0)                                                        
            	{                                                                                                                    
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());     
            	}                                                                                                                    
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	  ' Create a new Void Transaction.                                                                    
            	  ' The ORIGID is the PNREF no. for a previous transaction.                                 
            		 Dim Trans As VoidTransaction = New VoidTransaction("V63A0A07BE5A",           
            	 User, Connection, PayflowUtility.RequestId)                                                    
            	                                                                                                                     
            	  ' Submit the transaction.                                                                                
            	  Dim Resp As Response = Trans.SubmitTransaction()                                        
            	                                                                                                                     
            	  If Not Resp Is Nothing Then                                                                            
            	      ' Get the Transaction Response parameters.                                                
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse      
            	      If Not TrxnResponse Is Nothing Then                                                          
            	          Console.WriteLine("RESULT = "  +  TrxnResponse.Result)                           
            	          Console.WriteLine("PNREF = "  +  TrxnResponse.Pnref)                              
            	          Console.WriteLine("RESPMSG = "  +  TrxnResponse.RespMsg)                    
            	      End If                                                                                                       
            	  End If                                                                                                           
            	                                                                                                                     
            	  ' Get the Context and check for any contained SDK specific errors.                    
            	  Dim Ctx As Context = Resp.TransactionContext                                               
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                             
            	      Console.WriteLine(Environment.NewLine  +  "Errors = "  +  Ctx.ToString())        
            	  End If                                                                                                           
            
            	</code>
            	</example>
        </member>
        <member name="M:PayPal.Payments.Transactions.VoidTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.Invoice,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="OrigId">Original Transaction Id.</param>
             <param name="UserInfo">User Info object populated with user credentials.</param>
             <param name="Invoice">Invoice object.</param>
             <param name="RequestId">Request Id</param>
             <remarks> 
             The Void transaction prevents a transaction from being settled, but does
             not release the authorization (hold on funds) on the cardholder’s account. 
             Delayed Capture, Sale, Credit, Authorization, and Voice
             Authorization transactions can be voided. A Void transaction cannot be voided.
             The Void must occur prior to settlement.
             </remarks>
            	<example>
            	<code lang="C#" escaped="false">
            	...............
            	// Populate data objects
            	...............
            
            	// Create a new Void Transaction.                                                                     
            	// The ORIGID is the PNREF no. for a previous transaction.                                 
            	VoidTransaction Trans = new VoidTransaction("V63A0A07BE5A",                         
            		User, Connection, Inv, PayflowUtility.RequestId);                                                 
            	                                                                                                                     
            	// Submit the transaction.                                                                                 
            	Response Resp = Trans.SubmitTransaction();                                                    
            	                                                                                                                     
            	if (Resp != null)                                                                                               
            	{                                                                                                                    
            		// Get the Transaction Response parameters.                                             
            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;             
            		if (TrxnResponse != null)                                                                          
            		{                                                                                                            
            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                    
            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                       
            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);             
            		}                                                                                                            
            	}                                                                                                                    
            	                                                                                                                     
            	// Get the Context and check for any contained SDK specific errors.                    
            	Context Ctx = Resp.TransactionContext;                                                           
            	if (Ctx != null  &amp;  &amp;  Ctx.getErrorCount() > 0)                                                        
            	{                                                                                                                    
            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());     
            	}                                                                                                                    
            
            
             </code>
            	<code lang="Visual Basic" escaped="false">
            	...............
            	' Populate data objects
            	...............
            	  ' Create a new Void Transaction.                                                                    
            	  ' The ORIGID is the PNREF no. for a previous transaction.                                 
            		 Dim Trans As VoidTransaction = New VoidTransaction("V63A0A07BE5A",           
            	 User, Connection, Inv, PayflowUtility.RequestId)                                                    
            	                                                                                                                     
            	  ' Submit the transaction.                                                                                
            	  Dim Resp As Response = Trans.SubmitTransaction()                                        
            	                                                                                                                     
            	  If Not Resp Is Nothing Then                                                                            
            	      ' Get the Transaction Response parameters.                                                
            	      Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse      
            	      If Not TrxnResponse Is Nothing Then                                                          
            	          Console.WriteLine("RESULT = "  +  TrxnResponse.Result)                           
            	          Console.WriteLine("PNREF = "  +  TrxnResponse.Pnref)                              
            	          Console.WriteLine("RESPMSG = "  +  TrxnResponse.RespMsg)                    
            	      End If                                                                                                       
            	  End If                                                                                                           
            	                                                                                                                     
            	  ' Get the Context and check for any contained SDK specific errors.                    
            	  Dim Ctx As Context = Resp.TransactionContext                                               
            	  If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                             
            	      Console.WriteLine(Environment.NewLine  +  "Errors = "  +  Ctx.ToString())        
            	  End If                                                                                                           
            
            	</code>
            	</example>
        </member>
    </members>
</doc>
